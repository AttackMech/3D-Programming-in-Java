<?xml version="1.0" encoding="UTF-8"?>
<mile>
	<session_info>
		<session_id>
			1418493507703
		</session_id>
		<student_id>
			3042012
		</student_id>
		<assignment>
			TME1
		</assignment>
		<local_path>
			C:\Documents and Settings\Jason Bishop\My Documents\Dropbox\COMP382\TME1\Question1
		</local_path>
	</session_info>
	<session_data>
		<compile_instance>
			<iTime>
				8405609
			</iTime>
			<fName>
				MyOwn3Dv2.java
			</fName>
			<fSize>
				3563.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.awt.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import java.util.ArrayList;


public class MyOwn3Dv2 {

    public MyOwn3Dv2() {
        
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        
        BranchGroup scene = createSceneGraph();
        scene.compile();
        
        SimpleUniverse su = new SimpleUniverse(c3d);
        su.addBranchGroup(scene);
    } // end of constructor
    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();

        // colours for walls and floor
        private final static Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        private final static Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
        private final static Color3f medRed = new Color3f(0.8f, 0.4f, 0.3f);
        private final static Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
        private final static Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
         
         // arrays to hold each wall
        ArrayList floorCoords = new ArrayList();
        ArrayList wall1Coords = new ArrayList();
        ArrayList wall2Coords = new ArrayList();
        ArrayList wall3Coords = new ArrayList();
        ArrayList wall4Coords = new ArrayList();
        
        // points for plane dimensions
        Point3f p1 = new Point3f(-1.5f, -1.5f, 1.5f);
        Point3f p2 = new Point3f(1.5f, -1.5f, 1.5f);
        Point3f p3 = new Point3f(1.5f, -1.5f, -1.5f);
        Point3f p4 = new Point3f(-1.5f, -1.5f, -1.5f);
        Point3f p5 = new Point3f(-1.5f, 1.5f, 1.5f);
        Point3f p6 = new Point3f(1.5f, 1.5f, 1.5f);
        Point3f p7 = new Point3f(1.5f, 1.5f, -1.5f);
        Point3f p8 = new Point3f(-1.5f, 1.5f, -1.5f);
        
        // create arrays for structures
        floorCoords.add(p1);
        floorCoords.add(p2);
        floorCoords.add(p3);
        floorCoords.add(p4);
        
        wall1Coords.add(p5);
        wall1Coords.add(p6);
        wall1Coords.add(p2);
        wall1Coords.add(p1);
        
        wall2Coords.add(p6);
        wall2Coords.add(p7);
        wall2Coords.add(p3);
        wall2Coords.add(p2);
        
        wall3Coords.add(p7);
        wall3Coords.add(p8);
        wall3Coords.add(p4);
        wall3Coords.add(p3);
        
        wall4Coords.add(p8);
        wall4Coords.add(p5);
        wall4Coords.add(p1);
        wall4Coords.add(p4);
    
        // create tiles to represent room
        ColoredTiles floor = new ColoredTiles(floorCoords, blue);
        ColoredTiles wall1 = new ColoredTiles(floorCoords, white);
        ColoredTiles wall2 = new ColoredTiles(floorCoords, black);
        ColoredTiles wall3 = new ColoredTiles(floorCoords, medRed);
        ColoredTiles wall4 = new ColoredTiles(floorCoords, green);
        
        // add to objects to branch group
        objRoot.addChild(floor);
        objRoot.addChild(wall1);
        objRoot.addChild(wall2);
        objRoot.addChild(wall3);
        objRoot.addChild(wall4);
        
        
        return objRoot;
    } // end of method

    public static void main(String args[]) {
        new MyOwn3Dv2();
    }

}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				52
			<iErrLine>
			<iErrMessage>
				illegal start of expression
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				53
			<iErrLine>
			<iErrMessage>
				illegal start of expression
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				54
			<iErrLine>
			<iErrMessage>
				illegal start of expression
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				55
			<iErrLine>
			<iErrMessage>
				illegal start of expression
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				56
			<iErrLine>
			<iErrMessage>
				illegal start of expression
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				8457656
			</iTime>
			<fName>
				MyOwn3Dv2.java
			</fName>
			<fSize>
				3458.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.awt.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import java.util.ArrayList;


public class MyOwn3Dv2 {

    public MyOwn3Dv2() {
        
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        
        BranchGroup scene = createSceneGraph();
        scene.compile();
        
        SimpleUniverse su = new SimpleUniverse(c3d);
        su.addBranchGroup(scene);
    } // end of constructor
    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();

        // colours for walls and floor
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
        Color3f medRed = new Color3f(0.8f, 0.4f, 0.3f);
        Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
        Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
         
         // arrays to hold each wall
        ArrayList floorCoords = new ArrayList();
        ArrayList wall1Coords = new ArrayList();
        ArrayList wall2Coords = new ArrayList();
        ArrayList wall3Coords = new ArrayList();
        ArrayList wall4Coords = new ArrayList();
        
        // points for plane dimensions
        Point3f p1 = new Point3f(-1.5f, -1.5f, 1.5f);
        Point3f p2 = new Point3f(1.5f, -1.5f, 1.5f);
        Point3f p3 = new Point3f(1.5f, -1.5f, -1.5f);
        Point3f p4 = new Point3f(-1.5f, -1.5f, -1.5f);
        Point3f p5 = new Point3f(-1.5f, 1.5f, 1.5f);
        Point3f p6 = new Point3f(1.5f, 1.5f, 1.5f);
        Point3f p7 = new Point3f(1.5f, 1.5f, -1.5f);
        Point3f p8 = new Point3f(-1.5f, 1.5f, -1.5f);
        
        // create arrays for structures
        floorCoords.add(p1);
        floorCoords.add(p2);
        floorCoords.add(p3);
        floorCoords.add(p4);
        
        wall1Coords.add(p5);
        wall1Coords.add(p6);
        wall1Coords.add(p2);
        wall1Coords.add(p1);
        
        wall2Coords.add(p6);
        wall2Coords.add(p7);
        wall2Coords.add(p3);
        wall2Coords.add(p2);
        
        wall3Coords.add(p7);
        wall3Coords.add(p8);
        wall3Coords.add(p4);
        wall3Coords.add(p3);
        
        wall4Coords.add(p8);
        wall4Coords.add(p5);
        wall4Coords.add(p1);
        wall4Coords.add(p4);
    
        // create tiles to represent room
        ColoredTiles floor = new ColoredTiles(floorCoords, blue);
        ColoredTiles wall1 = new ColoredTiles(floorCoords, white);
        ColoredTiles wall2 = new ColoredTiles(floorCoords, black);
        ColoredTiles wall3 = new ColoredTiles(floorCoords, medRed);
        ColoredTiles wall4 = new ColoredTiles(floorCoords, green);
        
        // add to objects to branch group
        objRoot.addChild(floor);
        objRoot.addChild(wall1);
        objRoot.addChild(wall2);
        objRoot.addChild(wall3);
        objRoot.addChild(wall4);
        
        
        return objRoot;
    } // end of method

    public static void main(String args[]) {
        new MyOwn3Dv2();
    }

}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				37
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable SimpleUniverse
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				43
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class SimpleUniverse
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				43
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class SimpleUniverse
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				102
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class ColoredTiles
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				102
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class ColoredTiles
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				103
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class ColoredTiles
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				103
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class ColoredTiles
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				104
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class ColoredTiles
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				104
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class ColoredTiles
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				105
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class ColoredTiles
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				105
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class ColoredTiles
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				106
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class ColoredTiles
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				106
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class ColoredTiles
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				8475015
			</iTime>
			<fName>
				MyOwn3Dv2.java
			</fName>
			<fSize>
				3458.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.awt.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import java.util.ArrayList;


public class MyOwn3Dv2 {

    public MyOwn3Dv2() {
        
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        
        BranchGroup scene = createSceneGraph();
        scene.compile();
        
        SimpleUniverse su = new SimpleUniverse(c3d);
        su.addBranchGroup(scene);
    } // end of constructor
    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();

        // colours for walls and floor
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
        Color3f medRed = new Color3f(0.8f, 0.4f, 0.3f);
        Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
        Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
         
         // arrays to hold each wall
        ArrayList floorCoords = new ArrayList();
        ArrayList wall1Coords = new ArrayList();
        ArrayList wall2Coords = new ArrayList();
        ArrayList wall3Coords = new ArrayList();
        ArrayList wall4Coords = new ArrayList();
        
        // points for plane dimensions
        Point3f p1 = new Point3f(-1.5f, -1.5f, 1.5f);
        Point3f p2 = new Point3f(1.5f, -1.5f, 1.5f);
        Point3f p3 = new Point3f(1.5f, -1.5f, -1.5f);
        Point3f p4 = new Point3f(-1.5f, -1.5f, -1.5f);
        Point3f p5 = new Point3f(-1.5f, 1.5f, 1.5f);
        Point3f p6 = new Point3f(1.5f, 1.5f, 1.5f);
        Point3f p7 = new Point3f(1.5f, 1.5f, -1.5f);
        Point3f p8 = new Point3f(-1.5f, 1.5f, -1.5f);
        
        // create arrays for structures
        floorCoords.add(p1);
        floorCoords.add(p2);
        floorCoords.add(p3);
        floorCoords.add(p4);
        
        wall1Coords.add(p5);
        wall1Coords.add(p6);
        wall1Coords.add(p2);
        wall1Coords.add(p1);
        
        wall2Coords.add(p6);
        wall2Coords.add(p7);
        wall2Coords.add(p3);
        wall2Coords.add(p2);
        
        wall3Coords.add(p7);
        wall3Coords.add(p8);
        wall3Coords.add(p4);
        wall3Coords.add(p3);
        
        wall4Coords.add(p8);
        wall4Coords.add(p5);
        wall4Coords.add(p1);
        wall4Coords.add(p4);
    
        // create tiles to represent room
        ColoredTiles floor = new ColoredTiles(floorCoords, blue);
        ColoredTiles wall1 = new ColoredTiles(floorCoords, white);
        ColoredTiles wall2 = new ColoredTiles(floorCoords, black);
        ColoredTiles wall3 = new ColoredTiles(floorCoords, medRed);
        ColoredTiles wall4 = new ColoredTiles(floorCoords, green);
        
        // add to objects to branch group
        objRoot.addChild(floor);
        objRoot.addChild(wall1);
        objRoot.addChild(wall2);
        objRoot.addChild(wall3);
        objRoot.addChild(wall4);
        
        
        return objRoot;
    } // end of method

    public static void main(String args[]) {
        new MyOwn3Dv2();
    }

}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				37
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable SimpleUniverse
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				43
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class SimpleUniverse
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				43
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class SimpleUniverse
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				102
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class ColoredTiles
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				102
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class ColoredTiles
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				103
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class ColoredTiles
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				103
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class ColoredTiles
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				104
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class ColoredTiles
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				104
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class ColoredTiles
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				105
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class ColoredTiles
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				105
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class ColoredTiles
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				106
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class ColoredTiles
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				106
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class ColoredTiles
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				8715625
			</iTime>
			<fName>
				MyOwn3Dv2.java
			</fName>
			<fSize>
				3542.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.awt.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import java.util.ArrayList;


public class MyOwn3Dv2 extends Applet {

    public MyOwn3Dv2() {
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        
        BranchGroup scene = createSceneGraph();
        scene.compile();
        
        SimpleUniverse su = new SimpleUniverse(c3d);
        su.addBranchGroup(scene);
    } // end of constructor
    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();

        // colours for walls and floor
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
        Color3f medRed = new Color3f(0.8f, 0.4f, 0.3f);
        Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
        Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
         
         // arrays to hold each wall
        ArrayList floorCoords = new ArrayList();
        ArrayList wall1Coords = new ArrayList();
        ArrayList wall2Coords = new ArrayList();
        ArrayList wall3Coords = new ArrayList();
        ArrayList wall4Coords = new ArrayList();
        
        // points for plane dimensions
        Point3f p1 = new Point3f(-1.5f, -1.5f, 1.5f);
        Point3f p2 = new Point3f(1.5f, -1.5f, 1.5f);
        Point3f p3 = new Point3f(1.5f, -1.5f, -1.5f);
        Point3f p4 = new Point3f(-1.5f, -1.5f, -1.5f);
        Point3f p5 = new Point3f(-1.5f, 1.5f, 1.5f);
        Point3f p6 = new Point3f(1.5f, 1.5f, 1.5f);
        Point3f p7 = new Point3f(1.5f, 1.5f, -1.5f);
        Point3f p8 = new Point3f(-1.5f, 1.5f, -1.5f);
        
        // create arrays for structures
        floorCoords.add(p1);
        floorCoords.add(p2);
        floorCoords.add(p3);
        floorCoords.add(p4);
        
        wall1Coords.add(p5);
        wall1Coords.add(p6);
        wall1Coords.add(p2);
        wall1Coords.add(p1);
        
        wall2Coords.add(p6);
        wall2Coords.add(p7);
        wall2Coords.add(p3);
        wall2Coords.add(p2);
        
        wall3Coords.add(p7);
        wall3Coords.add(p8);
        wall3Coords.add(p4);
        wall3Coords.add(p3);
        
        wall4Coords.add(p8);
        wall4Coords.add(p5);
        wall4Coords.add(p1);
        wall4Coords.add(p4);
    
        // create tiles to represent room
        ColoredTiles floor = new ColoredTiles(floorCoords, blue);
        ColoredTiles wall1 = new ColoredTiles(floorCoords, white);
        ColoredTiles wall2 = new ColoredTiles(floorCoords, black);
        ColoredTiles wall3 = new ColoredTiles(floorCoords, medRed);
        ColoredTiles wall4 = new ColoredTiles(floorCoords, green);
        
        // add to objects to branch group
        objRoot.addChild(floor);
        objRoot.addChild(wall1);
        objRoot.addChild(wall2);
        objRoot.addChild(wall3);
        objRoot.addChild(wall4);
        
        
        return objRoot;
    } // end of method

    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3Dv2(), 256, 256);
    }

}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				33
			<iErrLine>
			<iErrMessage>
				cannot find symbol - class Applet
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				36
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   method setLayout(java.awt.BorderLayout)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				37
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable SimpleUniverse
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				43
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class SimpleUniverse
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				43
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class SimpleUniverse
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				102
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class ColoredTiles
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				102
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class ColoredTiles
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				103
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class ColoredTiles
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				103
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class ColoredTiles
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				104
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class ColoredTiles
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				104
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class ColoredTiles
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				105
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class ColoredTiles
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				105
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class ColoredTiles
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				106
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class ColoredTiles
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				106
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class ColoredTiles
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				120
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class MainFrame
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				8787656
			</iTime>
			<fName>
				MyOwn3Dv2.java
			</fName>
			<fSize>
				3749.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.util.ArrayList;
import java.applet.Applet;
import java.awt.BorderLayout;
import java.awt.Frame;
import java.awt.event.*;
import java.awt.GraphicsConfiguration;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;



public class MyOwn3Dv2 extends Applet {

    public MyOwn3Dv2() {
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        
        BranchGroup scene = createSceneGraph();
        scene.compile();
        
        SimpleUniverse su = new SimpleUniverse(c3d);
        su.addBranchGroup(scene);
    } // end of constructor
    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();

        // colours for walls and floor
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
        Color3f medRed = new Color3f(0.8f, 0.4f, 0.3f);
        Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
        Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
         
         // arrays to hold each wall
        ArrayList floorCoords = new ArrayList();
        ArrayList wall1Coords = new ArrayList();
        ArrayList wall2Coords = new ArrayList();
        ArrayList wall3Coords = new ArrayList();
        ArrayList wall4Coords = new ArrayList();
        
        // points for plane dimensions
        Point3f p1 = new Point3f(-1.5f, -1.5f, 1.5f);
        Point3f p2 = new Point3f(1.5f, -1.5f, 1.5f);
        Point3f p3 = new Point3f(1.5f, -1.5f, -1.5f);
        Point3f p4 = new Point3f(-1.5f, -1.5f, -1.5f);
        Point3f p5 = new Point3f(-1.5f, 1.5f, 1.5f);
        Point3f p6 = new Point3f(1.5f, 1.5f, 1.5f);
        Point3f p7 = new Point3f(1.5f, 1.5f, -1.5f);
        Point3f p8 = new Point3f(-1.5f, 1.5f, -1.5f);
        
        // create arrays for structures
        floorCoords.add(p1);
        floorCoords.add(p2);
        floorCoords.add(p3);
        floorCoords.add(p4);
        
        wall1Coords.add(p5);
        wall1Coords.add(p6);
        wall1Coords.add(p2);
        wall1Coords.add(p1);
        
        wall2Coords.add(p6);
        wall2Coords.add(p7);
        wall2Coords.add(p3);
        wall2Coords.add(p2);
        
        wall3Coords.add(p7);
        wall3Coords.add(p8);
        wall3Coords.add(p4);
        wall3Coords.add(p3);
        
        wall4Coords.add(p8);
        wall4Coords.add(p5);
        wall4Coords.add(p1);
        wall4Coords.add(p4);
    
        // create tiles to represent room
        ColoredTiles floor = new ColoredTiles(floorCoords, blue);
        ColoredTiles wall1 = new ColoredTiles(floorCoords, white);
        ColoredTiles wall2 = new ColoredTiles(floorCoords, black);
        ColoredTiles wall3 = new ColoredTiles(floorCoords, medRed);
        ColoredTiles wall4 = new ColoredTiles(floorCoords, green);
        
        // add to objects to branch group
        objRoot.addChild(floor);
        objRoot.addChild(wall1);
        objRoot.addChild(wall2);
        objRoot.addChild(wall3);
        objRoot.addChild(wall4);
        
        
        return objRoot;
    } // end of method

    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3Dv2(), 256, 256);
    }

}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				51
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   method addBranchGroup(javax.media.j3d.BranchGroup)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				109
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class ColoredTiles
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				109
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class ColoredTiles
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				110
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class ColoredTiles
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				110
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class ColoredTiles
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				111
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class ColoredTiles
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				111
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class ColoredTiles
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				112
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class ColoredTiles
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				112
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class ColoredTiles
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				113
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class ColoredTiles
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				113
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class ColoredTiles
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				8871718
			</iTime>
			<fName>
				MyOwn3Dv2.java
			</fName>
			<fSize>
				3749.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.util.ArrayList;
import java.applet.Applet;
import java.awt.BorderLayout;
import java.awt.Frame;
import java.awt.event.*;
import java.awt.GraphicsConfiguration;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;



public class MyOwn3Dv2 extends Applet {

    public MyOwn3Dv2() {
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        
        BranchGroup scene = createSceneGraph();
        scene.compile();
        
        SimpleUniverse su = new SimpleUniverse(c3d);
        su.addBranchGraph(scene);
    } // end of constructor
    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();

        // colours for walls and floor
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
        Color3f medRed = new Color3f(0.8f, 0.4f, 0.3f);
        Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
        Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
         
         // arrays to hold each wall
        ArrayList floorCoords = new ArrayList();
        ArrayList wall1Coords = new ArrayList();
        ArrayList wall2Coords = new ArrayList();
        ArrayList wall3Coords = new ArrayList();
        ArrayList wall4Coords = new ArrayList();
        
        // points for plane dimensions
        Point3f p1 = new Point3f(-1.5f, -1.5f, 1.5f);
        Point3f p2 = new Point3f(1.5f, -1.5f, 1.5f);
        Point3f p3 = new Point3f(1.5f, -1.5f, -1.5f);
        Point3f p4 = new Point3f(-1.5f, -1.5f, -1.5f);
        Point3f p5 = new Point3f(-1.5f, 1.5f, 1.5f);
        Point3f p6 = new Point3f(1.5f, 1.5f, 1.5f);
        Point3f p7 = new Point3f(1.5f, 1.5f, -1.5f);
        Point3f p8 = new Point3f(-1.5f, 1.5f, -1.5f);
        
        // create arrays for structures
        floorCoords.add(p1);
        floorCoords.add(p2);
        floorCoords.add(p3);
        floorCoords.add(p4);
        
        wall1Coords.add(p5);
        wall1Coords.add(p6);
        wall1Coords.add(p2);
        wall1Coords.add(p1);
        
        wall2Coords.add(p6);
        wall2Coords.add(p7);
        wall2Coords.add(p3);
        wall2Coords.add(p2);
        
        wall3Coords.add(p7);
        wall3Coords.add(p8);
        wall3Coords.add(p4);
        wall3Coords.add(p3);
        
        wall4Coords.add(p8);
        wall4Coords.add(p5);
        wall4Coords.add(p1);
        wall4Coords.add(p4);
    
        // create tiles to represent room
        ColoredTiles floor = new ColoredTiles(floorCoords, blue);
        ColoredTiles wall1 = new ColoredTiles(floorCoords, white);
        ColoredTiles wall2 = new ColoredTiles(floorCoords, black);
        ColoredTiles wall3 = new ColoredTiles(floorCoords, medRed);
        ColoredTiles wall4 = new ColoredTiles(floorCoords, green);
        
        // add to objects to branch group
        objRoot.addChild(floor);
        objRoot.addChild(wall1);
        objRoot.addChild(wall2);
        objRoot.addChild(wall3);
        objRoot.addChild(wall4);
        
        
        return objRoot;
    } // end of method

    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3Dv2(), 256, 256);
    }

}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				109
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class ColoredTiles
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				109
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class ColoredTiles
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				110
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class ColoredTiles
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				110
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class ColoredTiles
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				111
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class ColoredTiles
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				111
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class ColoredTiles
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				112
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class ColoredTiles
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				112
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class ColoredTiles
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				113
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class ColoredTiles
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				113
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class ColoredTiles
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				8976484
			</iTime>
			<fName>
				MyOwn3Dv2.java
			</fName>
			<fSize>
				3780.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;



public class MyOwn3Dv2 extends Applet {

    public MyOwn3Dv2() {
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        
        BranchGroup scene = createSceneGraph();
        scene.compile();
        
        SimpleUniverse su = new SimpleUniverse(c3d);
        su.addBranchGraph(scene);
    } // end of constructor
    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();

        // colours for walls and floor
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
        Color3f medRed = new Color3f(0.8f, 0.4f, 0.3f);
        Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
        Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
         
         // arrays to hold each wall
        ArrayList floorCoords = new ArrayList();
        ArrayList wall1Coords = new ArrayList();
        ArrayList wall2Coords = new ArrayList();
        ArrayList wall3Coords = new ArrayList();
        ArrayList wall4Coords = new ArrayList();
        
        // points for plane dimensions
        Point3f p1 = new Point3f(-1.5f, -1.5f, 1.5f);
        Point3f p2 = new Point3f(1.5f, -1.5f, 1.5f);
        Point3f p3 = new Point3f(1.5f, -1.5f, -1.5f);
        Point3f p4 = new Point3f(-1.5f, -1.5f, -1.5f);
        Point3f p5 = new Point3f(-1.5f, 1.5f, 1.5f);
        Point3f p6 = new Point3f(1.5f, 1.5f, 1.5f);
        Point3f p7 = new Point3f(1.5f, 1.5f, -1.5f);
        Point3f p8 = new Point3f(-1.5f, 1.5f, -1.5f);
        
        // create arrays for structures
        floorCoords.add(p1);
        floorCoords.add(p2);
        floorCoords.add(p3);
        floorCoords.add(p4);
        
        wall1Coords.add(p5);
        wall1Coords.add(p6);
        wall1Coords.add(p2);
        wall1Coords.add(p1);
        
        wall2Coords.add(p6);
        wall2Coords.add(p7);
        wall2Coords.add(p3);
        wall2Coords.add(p2);
        
        wall3Coords.add(p7);
        wall3Coords.add(p8);
        wall3Coords.add(p4);
        wall3Coords.add(p3);
        
        wall4Coords.add(p8);
        wall4Coords.add(p5);
        wall4Coords.add(p1);
        wall4Coords.add(p4);
    
        // create tiles to represent room
        ColoredTiles floor = new ColoredTiles(floorCoords, blue);
        ColoredTiles wall1 = new ColoredTiles(floorCoords, white);
        ColoredTiles wall2 = new ColoredTiles(floorCoords, black);
        ColoredTiles wall3 = new ColoredTiles(floorCoords, medRed);
        ColoredTiles wall4 = new ColoredTiles(floorCoords, green);
        
        // add to objects to branch group
        objRoot.addChild(floor);
        objRoot.addChild(wall1);
        objRoot.addChild(wall2);
        objRoot.addChild(wall3);
        objRoot.addChild(wall4);
        
        
        return objRoot;
    } // end of method

    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3Dv2(), 256, 256);
    }

}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				110
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class ColoredTiles
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				110
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class ColoredTiles
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				111
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class ColoredTiles
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				111
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class ColoredTiles
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				112
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class ColoredTiles
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				112
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class ColoredTiles
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				113
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class ColoredTiles
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				113
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class ColoredTiles
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				114
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class ColoredTiles
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				114
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class ColoredTiles
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				165490687
			</iTime>
			<fName>
				MyOwn3Dv2.java
			</fName>
			<fSize>
				3785.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;



public class MyOwn3Dv2 extends Applet {

    public MyOwn3Dv2() {
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        
        BranchGroup scene = createSceneGraph();
        scene.compile();
        
        SimpleUniverse su = new SimpleUniverse(c3d);
        su.addBranchGraph(scene);
    } // end of constructor
    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();

        // colours for walls and floor
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
        Color3f medRed = new Color3f(0.8f, 0.4f, 0.3f);
        Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
        Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
         
         // arrays to hold each wall
        ArrayList floorCoords = new ArrayList();
        ArrayList wall1Coords = new ArrayList();
        ArrayList wall2Coords = new ArrayList();
        ArrayList wall3Coords = new ArrayList();
        ArrayList wall4Coords = new ArrayList();
        
        // points for plane dimensions
        Point3f p1 = new Point3f(-1.5f, -1.5f, 1.5f);
        Point3f p2 = new Point3f(1.5f, -1.5f, 1.5f);
        Point3f p3 = new Point3f(1.5f, -1.5f, -1.5f);
        Point3f p4 = new Point3f(-1.5f, -1.5f, -1.5f);
        Point3f p5 = new Point3f(-1.5f, 1.5f, 1.5f);
        Point3f p6 = new Point3f(1.5f, 1.5f, 1.5f);
        Point3f p7 = new Point3f(1.5f, 1.5f, -1.5f);
        Point3f p8 = new Point3f(-1.5f, 1.5f, -1.5f);
        
        // create arrays for structures
        floorCoords.add(p1);
        floorCoords.add(p2);
        floorCoords.add(p3);
        floorCoords.add(p4);
        
        wall1Coords.add(p5);
        wall1Coords.add(p6);
        wall1Coords.add(p2);
        wall1Coords.add(p1);
        
        wall2Coords.add(p6);
        wall2Coords.add(p7);
        wall2Coords.add(p3);
        wall2Coords.add(p2);
        
        wall3Coords.add(p7);
        wall3Coords.add(p8);
        wall3Coords.add(p4);
        wall3Coords.add(p3);
        
        wall4Coords.add(p8);
        wall4Coords.add(p5);
        wall4Coords.add(p1);
        wall4Coords.add(p4);
    
        // create tiles to represent room
        QuadArray floor = new QuadArray(floorCoords.size(), blue);
        QuadArray wall1 = new QuadArray(floorCoords.size(), white);
        QuadArray wall2 = new QuadArray(floorCoords.size(), black);
        QuadArray wall3 = new QuadArray(floorCoords.size(), medRed);
        QuadArray wall4 = new QuadArray(floorCoords.size(), green);
        
        // add to objects to branch group
        objRoot.addChild(floor);
        objRoot.addChild(wall1);
        objRoot.addChild(wall2);
        objRoot.addChild(wall3);
        objRoot.addChild(wall4);
        
        
        return objRoot;
    } // end of method

    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3Dv2(), 256, 256);
    }

}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				19
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				19
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				19
			<iErrLine>
			<iErrMessage>
				')' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				19
			<iErrLine>
			<iErrMessage>
				';' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				19
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				19
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				20
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				20
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				20
			<iErrLine>
			<iErrMessage>
				')' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				20
			<iErrLine>
			<iErrMessage>
				';' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				20
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				20
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				20
			<iErrLine>
			<iErrMessage>
				';' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				20
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				20
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				21
			<iErrLine>
			<iErrMessage>
				invalid method declaration; return type required
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				21
			<iErrLine>
			<iErrMessage>
				';' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				25
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				25
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				25
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				28
			<iErrLine>
			<iErrMessage>
				invalid method declaration; return type required
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				28
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				29
			<iErrLine>
			<iErrMessage>
				invalid method declaration; return type required
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				29
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				30
			<iErrLine>
			<iErrMessage>
				invalid method declaration; return type required
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				31
			<iErrLine>
			<iErrMessage>
				invalid method declaration; return type required
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				31
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				36
			<iErrLine>
			<iErrMessage>
				class, interface, or enum expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				40
			<iErrLine>
			<iErrMessage>
				class, interface, or enum expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				43
			<iErrLine>
			<iErrMessage>
				class, interface, or enum expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				46
			<iErrLine>
			<iErrMessage>
				class, interface, or enum expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				49
			<iErrLine>
			<iErrMessage>
				class, interface, or enum expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				52
			<iErrLine>
			<iErrMessage>
				class, interface, or enum expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				53
			<iErrLine>
			<iErrMessage>
				class, interface, or enum expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				54
			<iErrLine>
			<iErrMessage>
				class, interface, or enum expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				56
			<iErrLine>
			<iErrMessage>
				class, interface, or enum expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				59
			<iErrLine>
			<iErrMessage>
				class, interface, or enum expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				64
			<iErrLine>
			<iErrMessage>
				class, interface, or enum expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				65
			<iErrLine>
			<iErrMessage>
				class, interface, or enum expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				66
			<iErrLine>
			<iErrMessage>
				class, interface, or enum expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				35
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				35
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				36
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				36
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				37
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				37
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				38
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				38
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				40
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				40
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				41
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				41
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				42
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				42
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				43
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				43
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				45
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				45
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				46
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				46
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				47
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				47
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				48
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				48
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				50
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				50
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				51
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				51
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				52
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				52
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				53
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				53
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				55
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				55
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				56
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				56
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				57
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				57
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				58
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				58
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				165502000
			</iTime>
			<fName>
				MyOwn3Dv2.java
			</fName>
			<fSize>
				3785.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;



public class MyOwn3Dv2 extends Applet {

    public MyOwn3Dv2() {
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        
        BranchGroup scene = createSceneGraph();
        scene.compile();
        
        SimpleUniverse su = new SimpleUniverse(c3d);
        su.addBranchGraph(scene);
    } // end of constructor
    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();

        // colours for walls and floor
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
        Color3f medRed = new Color3f(0.8f, 0.4f, 0.3f);
        Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
        Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
         
         // arrays to hold each wall
        ArrayList floorCoords = new ArrayList();
        ArrayList wall1Coords = new ArrayList();
        ArrayList wall2Coords = new ArrayList();
        ArrayList wall3Coords = new ArrayList();
        ArrayList wall4Coords = new ArrayList();
        
        // points for plane dimensions
        Point3f p1 = new Point3f(-1.5f, -1.5f, 1.5f);
        Point3f p2 = new Point3f(1.5f, -1.5f, 1.5f);
        Point3f p3 = new Point3f(1.5f, -1.5f, -1.5f);
        Point3f p4 = new Point3f(-1.5f, -1.5f, -1.5f);
        Point3f p5 = new Point3f(-1.5f, 1.5f, 1.5f);
        Point3f p6 = new Point3f(1.5f, 1.5f, 1.5f);
        Point3f p7 = new Point3f(1.5f, 1.5f, -1.5f);
        Point3f p8 = new Point3f(-1.5f, 1.5f, -1.5f);
        
        // create arrays for structures
        floorCoords.add(p1);
        floorCoords.add(p2);
        floorCoords.add(p3);
        floorCoords.add(p4);
        
        wall1Coords.add(p5);
        wall1Coords.add(p6);
        wall1Coords.add(p2);
        wall1Coords.add(p1);
        
        wall2Coords.add(p6);
        wall2Coords.add(p7);
        wall2Coords.add(p3);
        wall2Coords.add(p2);
        
        wall3Coords.add(p7);
        wall3Coords.add(p8);
        wall3Coords.add(p4);
        wall3Coords.add(p3);
        
        wall4Coords.add(p8);
        wall4Coords.add(p5);
        wall4Coords.add(p1);
        wall4Coords.add(p4);
    
        // create tiles to represent room
        QuadArray floor = new QuadArray(floorCoords.size(), blue);
        QuadArray wall1 = new QuadArray(floorCoords.size(), white);
        QuadArray wall2 = new QuadArray(floorCoords.size(), black);
        QuadArray wall3 = new QuadArray(floorCoords.size(), medRed);
        QuadArray wall4 = new QuadArray(floorCoords.size(), green);
        
        // add to objects to branch group
        objRoot.addChild(floor);
        objRoot.addChild(wall1);
        objRoot.addChild(wall2);
        objRoot.addChild(wall3);
        objRoot.addChild(wall4);
        
        
        return objRoot;
    } // end of method

    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3Dv2(), 256, 256);
    }

}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				110
			<iErrLine>
			<iErrMessage>
				no suitable constructor found for QuadArray(int,javax.vecmath.Color3f)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int,int,int[],int,int[]) is not applicable
      (actual and formal argument lists differ in length)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int,int,int[]) is not applicable
      (actual and formal argument lists differ in length)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int) is not applicable
      (actual argument javax.vecmath.Color3f cannot be converted to int by method invocation conversion)
    constructor javax.media.j3d.QuadArray.QuadArray() is not applicable
      (actual and formal argument lists differ in length)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				111
			<iErrLine>
			<iErrMessage>
				no suitable constructor found for QuadArray(int,javax.vecmath.Color3f)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int,int,int[],int,int[]) is not applicable
      (actual and formal argument lists differ in length)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int,int,int[]) is not applicable
      (actual and formal argument lists differ in length)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int) is not applicable
      (actual argument javax.vecmath.Color3f cannot be converted to int by method invocation conversion)
    constructor javax.media.j3d.QuadArray.QuadArray() is not applicable
      (actual and formal argument lists differ in length)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				112
			<iErrLine>
			<iErrMessage>
				no suitable constructor found for QuadArray(int,javax.vecmath.Color3f)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int,int,int[],int,int[]) is not applicable
      (actual and formal argument lists differ in length)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int,int,int[]) is not applicable
      (actual and formal argument lists differ in length)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int) is not applicable
      (actual argument javax.vecmath.Color3f cannot be converted to int by method invocation conversion)
    constructor javax.media.j3d.QuadArray.QuadArray() is not applicable
      (actual and formal argument lists differ in length)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				113
			<iErrLine>
			<iErrMessage>
				no suitable constructor found for QuadArray(int,javax.vecmath.Color3f)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int,int,int[],int,int[]) is not applicable
      (actual and formal argument lists differ in length)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int,int,int[]) is not applicable
      (actual and formal argument lists differ in length)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int) is not applicable
      (actual argument javax.vecmath.Color3f cannot be converted to int by method invocation conversion)
    constructor javax.media.j3d.QuadArray.QuadArray() is not applicable
      (actual and formal argument lists differ in length)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				114
			<iErrLine>
			<iErrMessage>
				no suitable constructor found for QuadArray(int,javax.vecmath.Color3f)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int,int,int[],int,int[]) is not applicable
      (actual and formal argument lists differ in length)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int,int,int[]) is not applicable
      (actual and formal argument lists differ in length)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int) is not applicable
      (actual argument javax.vecmath.Color3f cannot be converted to int by method invocation conversion)
    constructor javax.media.j3d.QuadArray.QuadArray() is not applicable
      (actual and formal argument lists differ in length)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				117
			<iErrLine>
			<iErrMessage>
				method addChild in class javax.media.j3d.Group cannot be applied to given types;
  required: javax.media.j3d.Node
  found: javax.media.j3d.QuadArray
  reason: actual argument javax.media.j3d.QuadArray cannot be converted to javax.media.j3d.Node by method invocation conversion
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				118
			<iErrLine>
			<iErrMessage>
				method addChild in class javax.media.j3d.Group cannot be applied to given types;
  required: javax.media.j3d.Node
  found: javax.media.j3d.QuadArray
  reason: actual argument javax.media.j3d.QuadArray cannot be converted to javax.media.j3d.Node by method invocation conversion
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				119
			<iErrLine>
			<iErrMessage>
				method addChild in class javax.media.j3d.Group cannot be applied to given types;
  required: javax.media.j3d.Node
  found: javax.media.j3d.QuadArray
  reason: actual argument javax.media.j3d.QuadArray cannot be converted to javax.media.j3d.Node by method invocation conversion
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				120
			<iErrLine>
			<iErrMessage>
				method addChild in class javax.media.j3d.Group cannot be applied to given types;
  required: javax.media.j3d.Node
  found: javax.media.j3d.QuadArray
  reason: actual argument javax.media.j3d.QuadArray cannot be converted to javax.media.j3d.Node by method invocation conversion
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				121
			<iErrLine>
			<iErrMessage>
				method addChild in class javax.media.j3d.Group cannot be applied to given types;
  required: javax.media.j3d.Node
  found: javax.media.j3d.QuadArray
  reason: actual argument javax.media.j3d.QuadArray cannot be converted to javax.media.j3d.Node by method invocation conversion
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				165788906
			</iTime>
			<fName>
				MyOwn3Dv2.java
			</fName>
			<fSize>
				3822.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;



public class MyOwn3Dv2 extends Applet {

    public MyOwn3Dv2() {
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        
        BranchGroup scene = createSceneGraph();
        scene.compile();
        
        SimpleUniverse su = new SimpleUniverse(c3d);
        su.addBranchGraph(scene);
    } // end of constructor
    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();

        // colours for walls and floor
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
        Color3f medRed = new Color3f(0.8f, 0.4f, 0.3f);
        Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
        Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
         
         // arrays to hold each wall
        ArrayList floorCoords = new ArrayList();
        ArrayList wall1Coords = new ArrayList();
        ArrayList wall2Coords = new ArrayList();
        ArrayList wall3Coords = new ArrayList();
        ArrayList wall4Coords = new ArrayList();
        
        // points for plane dimensions
        Point3f p1 = new Point3f(-1.5f, -1.5f, 1.5f);
        Point3f p2 = new Point3f(1.5f, -1.5f, 1.5f);
        Point3f p3 = new Point3f(1.5f, -1.5f, -1.5f);
        Point3f p4 = new Point3f(-1.5f, -1.5f, -1.5f);
        Point3f p5 = new Point3f(-1.5f, 1.5f, 1.5f);
        Point3f p6 = new Point3f(1.5f, 1.5f, 1.5f);
        Point3f p7 = new Point3f(1.5f, 1.5f, -1.5f);
        Point3f p8 = new Point3f(-1.5f, 1.5f, -1.5f);
        
        // create arrays for structures
        floorCoords.add(p1);
        floorCoords.add(p2);
        floorCoords.add(p3);
        floorCoords.add(p4);
        
        wall1Coords.add(p5);
        wall1Coords.add(p6);
        wall1Coords.add(p2);
        wall1Coords.add(p1);
        
        wall2Coords.add(p6);
        wall2Coords.add(p7);
        wall2Coords.add(p3);
        wall2Coords.add(p2);
        
        wall3Coords.add(p7);
        wall3Coords.add(p8);
        wall3Coords.add(p4);
        wall3Coords.add(p3);
        
        wall4Coords.add(p8);
        wall4Coords.add(p5);
        wall4Coords.add(p1);
        wall4Coords.add(p4);
    
        // create tiles to represent room
        QuadArray floor = new QuadArray(floorCoords.size(), blue);
        QuadArray wall1 = new QuadArray(floorCoords.size(), white);
        QuadArray wall2 = new QuadArray(floorCoords.size(), black);
        QuadArray wall3 = new QuadArray(floorCoords.size(), medRed);
        QuadArray wall4 = new QuadArray(floorCoords.size(), green);
        
        // add to objects to branch group
        objRoot.addChild(floor);
        objRoot.addChild(wall1);
        objRoot.addChild(wall2);
        objRoot.addChild(wall3);
        objRoot.addChild(wall4);
        
        
        return objRoot;
    } // end of method

    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3Dv2(), 256, 256);
    }

}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				111
			<iErrLine>
			<iErrMessage>
				no suitable constructor found for QuadArray(int,javax.vecmath.Color3f)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int,int,int[],int,int[]) is not applicable
      (actual and formal argument lists differ in length)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int,int,int[]) is not applicable
      (actual and formal argument lists differ in length)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int) is not applicable
      (actual argument javax.vecmath.Color3f cannot be converted to int by method invocation conversion)
    constructor javax.media.j3d.QuadArray.QuadArray() is not applicable
      (actual and formal argument lists differ in length)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				112
			<iErrLine>
			<iErrMessage>
				no suitable constructor found for QuadArray(int,javax.vecmath.Color3f)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int,int,int[],int,int[]) is not applicable
      (actual and formal argument lists differ in length)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int,int,int[]) is not applicable
      (actual and formal argument lists differ in length)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int) is not applicable
      (actual argument javax.vecmath.Color3f cannot be converted to int by method invocation conversion)
    constructor javax.media.j3d.QuadArray.QuadArray() is not applicable
      (actual and formal argument lists differ in length)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				113
			<iErrLine>
			<iErrMessage>
				no suitable constructor found for QuadArray(int,javax.vecmath.Color3f)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int,int,int[],int,int[]) is not applicable
      (actual and formal argument lists differ in length)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int,int,int[]) is not applicable
      (actual and formal argument lists differ in length)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int) is not applicable
      (actual argument javax.vecmath.Color3f cannot be converted to int by method invocation conversion)
    constructor javax.media.j3d.QuadArray.QuadArray() is not applicable
      (actual and formal argument lists differ in length)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				114
			<iErrLine>
			<iErrMessage>
				no suitable constructor found for QuadArray(int,javax.vecmath.Color3f)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int,int,int[],int,int[]) is not applicable
      (actual and formal argument lists differ in length)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int,int,int[]) is not applicable
      (actual and formal argument lists differ in length)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int) is not applicable
      (actual argument javax.vecmath.Color3f cannot be converted to int by method invocation conversion)
    constructor javax.media.j3d.QuadArray.QuadArray() is not applicable
      (actual and formal argument lists differ in length)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				115
			<iErrLine>
			<iErrMessage>
				no suitable constructor found for QuadArray(int,javax.vecmath.Color3f)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int,int,int[],int,int[]) is not applicable
      (actual and formal argument lists differ in length)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int,int,int[]) is not applicable
      (actual and formal argument lists differ in length)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int) is not applicable
      (actual argument javax.vecmath.Color3f cannot be converted to int by method invocation conversion)
    constructor javax.media.j3d.QuadArray.QuadArray() is not applicable
      (actual and formal argument lists differ in length)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				118
			<iErrLine>
			<iErrMessage>
				method addChild in class javax.media.j3d.Group cannot be applied to given types;
  required: javax.media.j3d.Node
  found: javax.media.j3d.QuadArray
  reason: actual argument javax.media.j3d.QuadArray cannot be converted to javax.media.j3d.Node by method invocation conversion
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				119
			<iErrLine>
			<iErrMessage>
				method addChild in class javax.media.j3d.Group cannot be applied to given types;
  required: javax.media.j3d.Node
  found: javax.media.j3d.QuadArray
  reason: actual argument javax.media.j3d.QuadArray cannot be converted to javax.media.j3d.Node by method invocation conversion
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				120
			<iErrLine>
			<iErrMessage>
				method addChild in class javax.media.j3d.Group cannot be applied to given types;
  required: javax.media.j3d.Node
  found: javax.media.j3d.QuadArray
  reason: actual argument javax.media.j3d.QuadArray cannot be converted to javax.media.j3d.Node by method invocation conversion
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				121
			<iErrLine>
			<iErrMessage>
				method addChild in class javax.media.j3d.Group cannot be applied to given types;
  required: javax.media.j3d.Node
  found: javax.media.j3d.QuadArray
  reason: actual argument javax.media.j3d.QuadArray cannot be converted to javax.media.j3d.Node by method invocation conversion
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				122
			<iErrLine>
			<iErrMessage>
				method addChild in class javax.media.j3d.Group cannot be applied to given types;
  required: javax.media.j3d.Node
  found: javax.media.j3d.QuadArray
  reason: actual argument javax.media.j3d.QuadArray cannot be converted to javax.media.j3d.Node by method invocation conversion
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				165961062
			</iTime>
			<fName>
				MyOwn3Dv2.java
			</fName>
			<fSize>
				3848.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;



public class MyOwn3Dv2 extends Applet {

    public MyOwn3Dv2() {
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        
        BranchGroup scene = createSceneGraph();
        scene.compile();
        
        SimpleUniverse su = new SimpleUniverse(c3d);
        su.addBranchGraph(scene);
    } // end of constructor
    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();

        // colours for walls and floor
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
        Color3f medRed = new Color3f(0.8f, 0.4f, 0.3f);
        Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
        Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
         
         // arrays to hold each wall
        ArrayList floorCoords = new ArrayList();
        ArrayList wall1Coords = new ArrayList();
        ArrayList wall2Coords = new ArrayList();
        ArrayList wall3Coords = new ArrayList();
        ArrayList wall4Coords = new ArrayList();
        
        // points for plane dimensions
        Point3f p1 = new Point3f(-1.5f, -1.5f, 1.5f);
        Point3f p2 = new Point3f(1.5f, -1.5f, 1.5f);
        Point3f p3 = new Point3f(1.5f, -1.5f, -1.5f);
        Point3f p4 = new Point3f(-1.5f, -1.5f, -1.5f);
        Point3f p5 = new Point3f(-1.5f, 1.5f, 1.5f);
        Point3f p6 = new Point3f(1.5f, 1.5f, 1.5f);
        Point3f p7 = new Point3f(1.5f, 1.5f, -1.5f);
        Point3f p8 = new Point3f(-1.5f, 1.5f, -1.5f);
        
        // create arrays for structures
        floorCoords.add(p1);
        floorCoords.add(p2);
        floorCoords.add(p3);
        floorCoords.add(p4);
        
        wall1Coords.add(p5);
        wall1Coords.add(p6);
        wall1Coords.add(p2);
        wall1Coords.add(p1);
        
        wall2Coords.add(p6);
        wall2Coords.add(p7);
        wall2Coords.add(p3);
        wall2Coords.add(p2);
        
        wall3Coords.add(p7);
        wall3Coords.add(p8);
        wall3Coords.add(p4);
        wall3Coords.add(p3);
        
        wall4Coords.add(p8);
        wall4Coords.add(p5);
        wall4Coords.add(p1);
        wall4Coords.add(p4);
    
        // create tiles to represent room
        QuadArray floor = new QuadArray(floorCoords.size(), floorCoords.COORDINATES | blue);
        QuadArray wall1 = new QuadArray(floorCoords.size(), white);
        QuadArray wall2 = new QuadArray(floorCoords.size(), black);
        QuadArray wall3 = new QuadArray(floorCoords.size(), medRed);
        QuadArray wall4 = new QuadArray(floorCoords.size(), green);
        
        // add to objects to branch group
        objRoot.addChild(floor);
        objRoot.addChild(wall1);
        objRoot.addChild(wall2);
        objRoot.addChild(wall3);
        objRoot.addChild(wall4);
        
        
        return objRoot;
    } // end of method

    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3Dv2(), 256, 256);
    }

}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				111
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable COORDINATES
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				112
			<iErrLine>
			<iErrMessage>
				no suitable constructor found for QuadArray(int,javax.vecmath.Color3f)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int,int,int[],int,int[]) is not applicable
      (actual and formal argument lists differ in length)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int,int,int[]) is not applicable
      (actual and formal argument lists differ in length)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int) is not applicable
      (actual argument javax.vecmath.Color3f cannot be converted to int by method invocation conversion)
    constructor javax.media.j3d.QuadArray.QuadArray() is not applicable
      (actual and formal argument lists differ in length)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				113
			<iErrLine>
			<iErrMessage>
				no suitable constructor found for QuadArray(int,javax.vecmath.Color3f)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int,int,int[],int,int[]) is not applicable
      (actual and formal argument lists differ in length)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int,int,int[]) is not applicable
      (actual and formal argument lists differ in length)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int) is not applicable
      (actual argument javax.vecmath.Color3f cannot be converted to int by method invocation conversion)
    constructor javax.media.j3d.QuadArray.QuadArray() is not applicable
      (actual and formal argument lists differ in length)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				114
			<iErrLine>
			<iErrMessage>
				no suitable constructor found for QuadArray(int,javax.vecmath.Color3f)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int,int,int[],int,int[]) is not applicable
      (actual and formal argument lists differ in length)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int,int,int[]) is not applicable
      (actual and formal argument lists differ in length)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int) is not applicable
      (actual argument javax.vecmath.Color3f cannot be converted to int by method invocation conversion)
    constructor javax.media.j3d.QuadArray.QuadArray() is not applicable
      (actual and formal argument lists differ in length)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				115
			<iErrLine>
			<iErrMessage>
				no suitable constructor found for QuadArray(int,javax.vecmath.Color3f)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int,int,int[],int,int[]) is not applicable
      (actual and formal argument lists differ in length)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int,int,int[]) is not applicable
      (actual and formal argument lists differ in length)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int) is not applicable
      (actual argument javax.vecmath.Color3f cannot be converted to int by method invocation conversion)
    constructor javax.media.j3d.QuadArray.QuadArray() is not applicable
      (actual and formal argument lists differ in length)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				118
			<iErrLine>
			<iErrMessage>
				method addChild in class javax.media.j3d.Group cannot be applied to given types;
  required: javax.media.j3d.Node
  found: javax.media.j3d.QuadArray
  reason: actual argument javax.media.j3d.QuadArray cannot be converted to javax.media.j3d.Node by method invocation conversion
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				119
			<iErrLine>
			<iErrMessage>
				method addChild in class javax.media.j3d.Group cannot be applied to given types;
  required: javax.media.j3d.Node
  found: javax.media.j3d.QuadArray
  reason: actual argument javax.media.j3d.QuadArray cannot be converted to javax.media.j3d.Node by method invocation conversion
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				120
			<iErrLine>
			<iErrMessage>
				method addChild in class javax.media.j3d.Group cannot be applied to given types;
  required: javax.media.j3d.Node
  found: javax.media.j3d.QuadArray
  reason: actual argument javax.media.j3d.QuadArray cannot be converted to javax.media.j3d.Node by method invocation conversion
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				121
			<iErrLine>
			<iErrMessage>
				method addChild in class javax.media.j3d.Group cannot be applied to given types;
  required: javax.media.j3d.Node
  found: javax.media.j3d.QuadArray
  reason: actual argument javax.media.j3d.QuadArray cannot be converted to javax.media.j3d.Node by method invocation conversion
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				122
			<iErrLine>
			<iErrMessage>
				method addChild in class javax.media.j3d.Group cannot be applied to given types;
  required: javax.media.j3d.Node
  found: javax.media.j3d.QuadArray
  reason: actual argument javax.media.j3d.QuadArray cannot be converted to javax.media.j3d.Node by method invocation conversion
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				166014125
			</iTime>
			<fName>
				MyOwn3Dv2.java
			</fName>
			<fSize>
				3846.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;



public class MyOwn3Dv2 extends Applet {

    public MyOwn3Dv2() {
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        
        BranchGroup scene = createSceneGraph();
        scene.compile();
        
        SimpleUniverse su = new SimpleUniverse(c3d);
        su.addBranchGraph(scene);
    } // end of constructor
    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();

        // colours for walls and floor
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
        Color3f medRed = new Color3f(0.8f, 0.4f, 0.3f);
        Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
        Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
         
         // arrays to hold each wall
        ArrayList floorCoords = new ArrayList();
        ArrayList wall1Coords = new ArrayList();
        ArrayList wall2Coords = new ArrayList();
        ArrayList wall3Coords = new ArrayList();
        ArrayList wall4Coords = new ArrayList();
        
        // points for plane dimensions
        Point3f p1 = new Point3f(-1.5f, -1.5f, 1.5f);
        Point3f p2 = new Point3f(1.5f, -1.5f, 1.5f);
        Point3f p3 = new Point3f(1.5f, -1.5f, -1.5f);
        Point3f p4 = new Point3f(-1.5f, -1.5f, -1.5f);
        Point3f p5 = new Point3f(-1.5f, 1.5f, 1.5f);
        Point3f p6 = new Point3f(1.5f, 1.5f, 1.5f);
        Point3f p7 = new Point3f(1.5f, 1.5f, -1.5f);
        Point3f p8 = new Point3f(-1.5f, 1.5f, -1.5f);
        
        // create arrays for structures
        floorCoords.add(p1);
        floorCoords.add(p2);
        floorCoords.add(p3);
        floorCoords.add(p4);
        
        wall1Coords.add(p5);
        wall1Coords.add(p6);
        wall1Coords.add(p2);
        wall1Coords.add(p1);
        
        wall2Coords.add(p6);
        wall2Coords.add(p7);
        wall2Coords.add(p3);
        wall2Coords.add(p2);
        
        wall3Coords.add(p7);
        wall3Coords.add(p8);
        wall3Coords.add(p4);
        wall3Coords.add(p3);
        
        wall4Coords.add(p8);
        wall4Coords.add(p5);
        wall4Coords.add(p1);
        wall4Coords.add(p4);
    
        // create tiles to represent room
        QuadArray floor = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | blue);
        QuadArray wall1 = new QuadArray(floorCoords.size(), white);
        QuadArray wall2 = new QuadArray(floorCoords.size(), black);
        QuadArray wall3 = new QuadArray(floorCoords.size(), medRed);
        QuadArray wall4 = new QuadArray(floorCoords.size(), green);
        
        // add to objects to branch group
        objRoot.addChild(floor);
        objRoot.addChild(wall1);
        objRoot.addChild(wall2);
        objRoot.addChild(wall3);
        objRoot.addChild(wall4);
        
        
        return objRoot;
    } // end of method

    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3Dv2(), 256, 256);
    }

}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				111
			<iErrLine>
			<iErrMessage>
				bad operand types for binary operator '|'
  first type:  int
  second type: javax.vecmath.Color3f
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				112
			<iErrLine>
			<iErrMessage>
				no suitable constructor found for QuadArray(int,javax.vecmath.Color3f)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int,int,int[],int,int[]) is not applicable
      (actual and formal argument lists differ in length)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int,int,int[]) is not applicable
      (actual and formal argument lists differ in length)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int) is not applicable
      (actual argument javax.vecmath.Color3f cannot be converted to int by method invocation conversion)
    constructor javax.media.j3d.QuadArray.QuadArray() is not applicable
      (actual and formal argument lists differ in length)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				113
			<iErrLine>
			<iErrMessage>
				no suitable constructor found for QuadArray(int,javax.vecmath.Color3f)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int,int,int[],int,int[]) is not applicable
      (actual and formal argument lists differ in length)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int,int,int[]) is not applicable
      (actual and formal argument lists differ in length)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int) is not applicable
      (actual argument javax.vecmath.Color3f cannot be converted to int by method invocation conversion)
    constructor javax.media.j3d.QuadArray.QuadArray() is not applicable
      (actual and formal argument lists differ in length)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				114
			<iErrLine>
			<iErrMessage>
				no suitable constructor found for QuadArray(int,javax.vecmath.Color3f)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int,int,int[],int,int[]) is not applicable
      (actual and formal argument lists differ in length)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int,int,int[]) is not applicable
      (actual and formal argument lists differ in length)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int) is not applicable
      (actual argument javax.vecmath.Color3f cannot be converted to int by method invocation conversion)
    constructor javax.media.j3d.QuadArray.QuadArray() is not applicable
      (actual and formal argument lists differ in length)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				115
			<iErrLine>
			<iErrMessage>
				no suitable constructor found for QuadArray(int,javax.vecmath.Color3f)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int,int,int[],int,int[]) is not applicable
      (actual and formal argument lists differ in length)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int,int,int[]) is not applicable
      (actual and formal argument lists differ in length)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int) is not applicable
      (actual argument javax.vecmath.Color3f cannot be converted to int by method invocation conversion)
    constructor javax.media.j3d.QuadArray.QuadArray() is not applicable
      (actual and formal argument lists differ in length)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				118
			<iErrLine>
			<iErrMessage>
				method addChild in class javax.media.j3d.Group cannot be applied to given types;
  required: javax.media.j3d.Node
  found: javax.media.j3d.QuadArray
  reason: actual argument javax.media.j3d.QuadArray cannot be converted to javax.media.j3d.Node by method invocation conversion
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				119
			<iErrLine>
			<iErrMessage>
				method addChild in class javax.media.j3d.Group cannot be applied to given types;
  required: javax.media.j3d.Node
  found: javax.media.j3d.QuadArray
  reason: actual argument javax.media.j3d.QuadArray cannot be converted to javax.media.j3d.Node by method invocation conversion
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				120
			<iErrLine>
			<iErrMessage>
				method addChild in class javax.media.j3d.Group cannot be applied to given types;
  required: javax.media.j3d.Node
  found: javax.media.j3d.QuadArray
  reason: actual argument javax.media.j3d.QuadArray cannot be converted to javax.media.j3d.Node by method invocation conversion
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				121
			<iErrLine>
			<iErrMessage>
				method addChild in class javax.media.j3d.Group cannot be applied to given types;
  required: javax.media.j3d.Node
  found: javax.media.j3d.QuadArray
  reason: actual argument javax.media.j3d.QuadArray cannot be converted to javax.media.j3d.Node by method invocation conversion
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				122
			<iErrLine>
			<iErrMessage>
				method addChild in class javax.media.j3d.Group cannot be applied to given types;
  required: javax.media.j3d.Node
  found: javax.media.j3d.QuadArray
  reason: actual argument javax.media.j3d.QuadArray cannot be converted to javax.media.j3d.Node by method invocation conversion
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				166147109
			</iTime>
			<fName>
				MyOwn3Dv2.java
			</fName>
			<fSize>
				3858.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;



public class MyOwn3Dv2 extends Applet {

    public MyOwn3Dv2() {
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        
        BranchGroup scene = createSceneGraph();
        scene.compile();
        
        SimpleUniverse su = new SimpleUniverse(c3d);
        su.addBranchGraph(scene);
    } // end of constructor
    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();

        // colours for walls and floor
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
        Color3f medRed = new Color3f(0.8f, 0.4f, 0.3f);
        Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
        Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
         
         // arrays to hold each wall
        ArrayList floorCoords = new ArrayList();
        ArrayList wall1Coords = new ArrayList();
        ArrayList wall2Coords = new ArrayList();
        ArrayList wall3Coords = new ArrayList();
        ArrayList wall4Coords = new ArrayList();
        
        // points for plane dimensions
        Point3f p1 = new Point3f(-1.5f, -1.5f, 1.5f);
        Point3f p2 = new Point3f(1.5f, -1.5f, 1.5f);
        Point3f p3 = new Point3f(1.5f, -1.5f, -1.5f);
        Point3f p4 = new Point3f(-1.5f, -1.5f, -1.5f);
        Point3f p5 = new Point3f(-1.5f, 1.5f, 1.5f);
        Point3f p6 = new Point3f(1.5f, 1.5f, 1.5f);
        Point3f p7 = new Point3f(1.5f, 1.5f, -1.5f);
        Point3f p8 = new Point3f(-1.5f, 1.5f, -1.5f);
        
        // create arrays for structures
        floorCoords.add(p1);
        floorCoords.add(p2);
        floorCoords.add(p3);
        floorCoords.add(p4);
        
        wall1Coords.add(p5);
        wall1Coords.add(p6);
        wall1Coords.add(p2);
        wall1Coords.add(p1);
        
        wall2Coords.add(p6);
        wall2Coords.add(p7);
        wall2Coords.add(p3);
        wall2Coords.add(p2);
        
        wall3Coords.add(p7);
        wall3Coords.add(p8);
        wall3Coords.add(p4);
        wall3Coords.add(p3);
        
        wall4Coords.add(p8);
        wall4Coords.add(p5);
        wall4Coords.add(p1);
        wall4Coords.add(p4);
    
        // create tiles to represent room
        QuadArray floor = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR3);
        QuadArray wall1 = new QuadArray(floorCoords.size(), white);
        QuadArray wall2 = new QuadArray(floorCoords.size(), black);
        QuadArray wall3 = new QuadArray(floorCoords.size(), medRed);
        QuadArray wall4 = new QuadArray(floorCoords.size(), green);
        
        // add to objects to branch group
        objRoot.addChild(floor);
        objRoot.addChild(wall1);
        objRoot.addChild(wall2);
        objRoot.addChild(wall3);
        objRoot.addChild(wall4);
        
        
        return objRoot;
    } // end of method

    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3Dv2(), 256, 256);
    }

}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				111
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable COLOR3
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				112
			<iErrLine>
			<iErrMessage>
				no suitable constructor found for QuadArray(int,javax.vecmath.Color3f)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int,int,int[],int,int[]) is not applicable
      (actual and formal argument lists differ in length)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int,int,int[]) is not applicable
      (actual and formal argument lists differ in length)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int) is not applicable
      (actual argument javax.vecmath.Color3f cannot be converted to int by method invocation conversion)
    constructor javax.media.j3d.QuadArray.QuadArray() is not applicable
      (actual and formal argument lists differ in length)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				113
			<iErrLine>
			<iErrMessage>
				no suitable constructor found for QuadArray(int,javax.vecmath.Color3f)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int,int,int[],int,int[]) is not applicable
      (actual and formal argument lists differ in length)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int,int,int[]) is not applicable
      (actual and formal argument lists differ in length)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int) is not applicable
      (actual argument javax.vecmath.Color3f cannot be converted to int by method invocation conversion)
    constructor javax.media.j3d.QuadArray.QuadArray() is not applicable
      (actual and formal argument lists differ in length)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				114
			<iErrLine>
			<iErrMessage>
				no suitable constructor found for QuadArray(int,javax.vecmath.Color3f)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int,int,int[],int,int[]) is not applicable
      (actual and formal argument lists differ in length)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int,int,int[]) is not applicable
      (actual and formal argument lists differ in length)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int) is not applicable
      (actual argument javax.vecmath.Color3f cannot be converted to int by method invocation conversion)
    constructor javax.media.j3d.QuadArray.QuadArray() is not applicable
      (actual and formal argument lists differ in length)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				115
			<iErrLine>
			<iErrMessage>
				no suitable constructor found for QuadArray(int,javax.vecmath.Color3f)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int,int,int[],int,int[]) is not applicable
      (actual and formal argument lists differ in length)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int,int,int[]) is not applicable
      (actual and formal argument lists differ in length)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int) is not applicable
      (actual argument javax.vecmath.Color3f cannot be converted to int by method invocation conversion)
    constructor javax.media.j3d.QuadArray.QuadArray() is not applicable
      (actual and formal argument lists differ in length)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				118
			<iErrLine>
			<iErrMessage>
				method addChild in class javax.media.j3d.Group cannot be applied to given types;
  required: javax.media.j3d.Node
  found: javax.media.j3d.QuadArray
  reason: actual argument javax.media.j3d.QuadArray cannot be converted to javax.media.j3d.Node by method invocation conversion
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				119
			<iErrLine>
			<iErrMessage>
				method addChild in class javax.media.j3d.Group cannot be applied to given types;
  required: javax.media.j3d.Node
  found: javax.media.j3d.QuadArray
  reason: actual argument javax.media.j3d.QuadArray cannot be converted to javax.media.j3d.Node by method invocation conversion
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				120
			<iErrLine>
			<iErrMessage>
				method addChild in class javax.media.j3d.Group cannot be applied to given types;
  required: javax.media.j3d.Node
  found: javax.media.j3d.QuadArray
  reason: actual argument javax.media.j3d.QuadArray cannot be converted to javax.media.j3d.Node by method invocation conversion
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				121
			<iErrLine>
			<iErrMessage>
				method addChild in class javax.media.j3d.Group cannot be applied to given types;
  required: javax.media.j3d.Node
  found: javax.media.j3d.QuadArray
  reason: actual argument javax.media.j3d.QuadArray cannot be converted to javax.media.j3d.Node by method invocation conversion
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				122
			<iErrLine>
			<iErrMessage>
				method addChild in class javax.media.j3d.Group cannot be applied to given types;
  required: javax.media.j3d.Node
  found: javax.media.j3d.QuadArray
  reason: actual argument javax.media.j3d.QuadArray cannot be converted to javax.media.j3d.Node by method invocation conversion
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				166167984
			</iTime>
			<fName>
				MyOwn3Dv2.java
			</fName>
			<fSize>
				3859.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;



public class MyOwn3Dv2 extends Applet {

    public MyOwn3Dv2() {
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        
        BranchGroup scene = createSceneGraph();
        scene.compile();
        
        SimpleUniverse su = new SimpleUniverse(c3d);
        su.addBranchGraph(scene);
    } // end of constructor
    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();

        // colours for walls and floor
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
        Color3f medRed = new Color3f(0.8f, 0.4f, 0.3f);
        Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
        Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
         
         // arrays to hold each wall
        ArrayList floorCoords = new ArrayList();
        ArrayList wall1Coords = new ArrayList();
        ArrayList wall2Coords = new ArrayList();
        ArrayList wall3Coords = new ArrayList();
        ArrayList wall4Coords = new ArrayList();
        
        // points for plane dimensions
        Point3f p1 = new Point3f(-1.5f, -1.5f, 1.5f);
        Point3f p2 = new Point3f(1.5f, -1.5f, 1.5f);
        Point3f p3 = new Point3f(1.5f, -1.5f, -1.5f);
        Point3f p4 = new Point3f(-1.5f, -1.5f, -1.5f);
        Point3f p5 = new Point3f(-1.5f, 1.5f, 1.5f);
        Point3f p6 = new Point3f(1.5f, 1.5f, 1.5f);
        Point3f p7 = new Point3f(1.5f, 1.5f, -1.5f);
        Point3f p8 = new Point3f(-1.5f, 1.5f, -1.5f);
        
        // create arrays for structures
        floorCoords.add(p1);
        floorCoords.add(p2);
        floorCoords.add(p3);
        floorCoords.add(p4);
        
        wall1Coords.add(p5);
        wall1Coords.add(p6);
        wall1Coords.add(p2);
        wall1Coords.add(p1);
        
        wall2Coords.add(p6);
        wall2Coords.add(p7);
        wall2Coords.add(p3);
        wall2Coords.add(p2);
        
        wall3Coords.add(p7);
        wall3Coords.add(p8);
        wall3Coords.add(p4);
        wall3Coords.add(p3);
        
        wall4Coords.add(p8);
        wall4Coords.add(p5);
        wall4Coords.add(p1);
        wall4Coords.add(p4);
    
        // create tiles to represent room
        QuadArray floor = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
        QuadArray wall1 = new QuadArray(floorCoords.size(), white);
        QuadArray wall2 = new QuadArray(floorCoords.size(), black);
        QuadArray wall3 = new QuadArray(floorCoords.size(), medRed);
        QuadArray wall4 = new QuadArray(floorCoords.size(), green);
        
        // add to objects to branch group
        objRoot.addChild(floor);
        objRoot.addChild(wall1);
        objRoot.addChild(wall2);
        objRoot.addChild(wall3);
        objRoot.addChild(wall4);
        
        
        return objRoot;
    } // end of method

    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3Dv2(), 256, 256);
    }

}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				112
			<iErrLine>
			<iErrMessage>
				no suitable constructor found for QuadArray(int,javax.vecmath.Color3f)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int,int,int[],int,int[]) is not applicable
      (actual and formal argument lists differ in length)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int,int,int[]) is not applicable
      (actual and formal argument lists differ in length)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int) is not applicable
      (actual argument javax.vecmath.Color3f cannot be converted to int by method invocation conversion)
    constructor javax.media.j3d.QuadArray.QuadArray() is not applicable
      (actual and formal argument lists differ in length)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				113
			<iErrLine>
			<iErrMessage>
				no suitable constructor found for QuadArray(int,javax.vecmath.Color3f)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int,int,int[],int,int[]) is not applicable
      (actual and formal argument lists differ in length)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int,int,int[]) is not applicable
      (actual and formal argument lists differ in length)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int) is not applicable
      (actual argument javax.vecmath.Color3f cannot be converted to int by method invocation conversion)
    constructor javax.media.j3d.QuadArray.QuadArray() is not applicable
      (actual and formal argument lists differ in length)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				114
			<iErrLine>
			<iErrMessage>
				no suitable constructor found for QuadArray(int,javax.vecmath.Color3f)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int,int,int[],int,int[]) is not applicable
      (actual and formal argument lists differ in length)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int,int,int[]) is not applicable
      (actual and formal argument lists differ in length)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int) is not applicable
      (actual argument javax.vecmath.Color3f cannot be converted to int by method invocation conversion)
    constructor javax.media.j3d.QuadArray.QuadArray() is not applicable
      (actual and formal argument lists differ in length)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				115
			<iErrLine>
			<iErrMessage>
				no suitable constructor found for QuadArray(int,javax.vecmath.Color3f)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int,int,int[],int,int[]) is not applicable
      (actual and formal argument lists differ in length)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int,int,int[]) is not applicable
      (actual and formal argument lists differ in length)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int) is not applicable
      (actual argument javax.vecmath.Color3f cannot be converted to int by method invocation conversion)
    constructor javax.media.j3d.QuadArray.QuadArray() is not applicable
      (actual and formal argument lists differ in length)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				118
			<iErrLine>
			<iErrMessage>
				method addChild in class javax.media.j3d.Group cannot be applied to given types;
  required: javax.media.j3d.Node
  found: javax.media.j3d.QuadArray
  reason: actual argument javax.media.j3d.QuadArray cannot be converted to javax.media.j3d.Node by method invocation conversion
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				119
			<iErrLine>
			<iErrMessage>
				method addChild in class javax.media.j3d.Group cannot be applied to given types;
  required: javax.media.j3d.Node
  found: javax.media.j3d.QuadArray
  reason: actual argument javax.media.j3d.QuadArray cannot be converted to javax.media.j3d.Node by method invocation conversion
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				120
			<iErrLine>
			<iErrMessage>
				method addChild in class javax.media.j3d.Group cannot be applied to given types;
  required: javax.media.j3d.Node
  found: javax.media.j3d.QuadArray
  reason: actual argument javax.media.j3d.QuadArray cannot be converted to javax.media.j3d.Node by method invocation conversion
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				121
			<iErrLine>
			<iErrMessage>
				method addChild in class javax.media.j3d.Group cannot be applied to given types;
  required: javax.media.j3d.Node
  found: javax.media.j3d.QuadArray
  reason: actual argument javax.media.j3d.QuadArray cannot be converted to javax.media.j3d.Node by method invocation conversion
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				122
			<iErrLine>
			<iErrMessage>
				method addChild in class javax.media.j3d.Group cannot be applied to given types;
  required: javax.media.j3d.Node
  found: javax.media.j3d.QuadArray
  reason: actual argument javax.media.j3d.QuadArray cannot be converted to javax.media.j3d.Node by method invocation conversion
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				166428015
			</iTime>
			<fName>
				MyOwn3Dv2.java
			</fName>
			<fSize>
				4075.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;



public class MyOwn3Dv2 extends Applet {

    public MyOwn3Dv2() {
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        
        BranchGroup scene = createSceneGraph();
        scene.compile();
        
        SimpleUniverse su = new SimpleUniverse(c3d);
        su.addBranchGraph(scene);
    } // end of constructor
    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();

        // colours for walls and floor
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
        Color3f medRed = new Color3f(0.8f, 0.4f, 0.3f);
        Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
        Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
         
         // arrays to hold each wall
        ArrayList floorCoords = new ArrayList();
        ArrayList wall1Coords = new ArrayList();
        ArrayList wall2Coords = new ArrayList();
        ArrayList wall3Coords = new ArrayList();
        ArrayList wall4Coords = new ArrayList();
        
        // points for plane dimensions
        Point3f p1 = new Point3f(-1.5f, -1.5f, 1.5f);
        Point3f p2 = new Point3f(1.5f, -1.5f, 1.5f);
        Point3f p3 = new Point3f(1.5f, -1.5f, -1.5f);
        Point3f p4 = new Point3f(-1.5f, -1.5f, -1.5f);
        Point3f p5 = new Point3f(-1.5f, 1.5f, 1.5f);
        Point3f p6 = new Point3f(1.5f, 1.5f, 1.5f);
        Point3f p7 = new Point3f(1.5f, 1.5f, -1.5f);
        Point3f p8 = new Point3f(-1.5f, 1.5f, -1.5f);
        
        // create arrays for structures
        floorCoords.add(p1);
        floorCoords.add(p2);
        floorCoords.add(p3);
        floorCoords.add(p4);
        
        wall1Coords.add(p5);
        wall1Coords.add(p6);
        wall1Coords.add(p2);
        wall1Coords.add(p1);
        
        wall2Coords.add(p6);
        wall2Coords.add(p7);
        wall2Coords.add(p3);
        wall2Coords.add(p2);
        
        wall3Coords.add(p7);
        wall3Coords.add(p8);
        wall3Coords.add(p4);
        wall3Coords.add(p3);
        
        wall4Coords.add(p8);
        wall4Coords.add(p5);
        wall4Coords.add(p1);
        wall4Coords.add(p4);
    
        // create tiles to represent room
        QuadArray floor = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
        floor.setCoordinates(floorCoords);
        floor.setColor(blue);
        QuadArray wall1 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
        QuadArray wall2 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
        QuadArray wall3 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
        QuadArray wall4 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
        
        // add to objects to branch group
        objRoot.addChild(floor);
        objRoot.addChild(wall1);
        objRoot.addChild(wall2);
        objRoot.addChild(wall3);
        objRoot.addChild(wall4);
        
        
        return objRoot;
    } // end of method

    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3Dv2(), 256, 256);
    }

}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				112
			<iErrLine>
			<iErrMessage>
				no suitable method found for setCoordinates(java.util.ArrayList)
    method javax.media.j3d.GeometryArray.setCoordinates(int,javax.vecmath.Point3d[],int,int) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.GeometryArray.setCoordinates(int,javax.vecmath.Point3f[],int,int) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.GeometryArray.setCoordinates(int,double[],int,int) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.GeometryArray.setCoordinates(int,float[],int,int) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.GeometryArray.setCoordinates(int,javax.vecmath.Point3d[]) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.GeometryArray.setCoordinates(int,javax.vecmath.Point3f[]) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.GeometryArray.setCoordinates(int,double[]) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.GeometryArray.setCoordinates(int,float[]) is not applicable
      (actual and formal argument lists differ in length)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				113
			<iErrLine>
			<iErrMessage>
				no suitable method found for setColor(javax.vecmath.Color3f)
    method javax.media.j3d.GeometryArray.setColor(int,javax.vecmath.Color4b) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.GeometryArray.setColor(int,javax.vecmath.Color3b) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.GeometryArray.setColor(int,javax.vecmath.Color4f) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.GeometryArray.setColor(int,javax.vecmath.Color3f) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.GeometryArray.setColor(int,byte[]) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.GeometryArray.setColor(int,float[]) is not applicable
      (actual and formal argument lists differ in length)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				120
			<iErrLine>
			<iErrMessage>
				method addChild in class javax.media.j3d.Group cannot be applied to given types;
  required: javax.media.j3d.Node
  found: javax.media.j3d.QuadArray
  reason: actual argument javax.media.j3d.QuadArray cannot be converted to javax.media.j3d.Node by method invocation conversion
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				121
			<iErrLine>
			<iErrMessage>
				method addChild in class javax.media.j3d.Group cannot be applied to given types;
  required: javax.media.j3d.Node
  found: javax.media.j3d.QuadArray
  reason: actual argument javax.media.j3d.QuadArray cannot be converted to javax.media.j3d.Node by method invocation conversion
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				122
			<iErrLine>
			<iErrMessage>
				method addChild in class javax.media.j3d.Group cannot be applied to given types;
  required: javax.media.j3d.Node
  found: javax.media.j3d.QuadArray
  reason: actual argument javax.media.j3d.QuadArray cannot be converted to javax.media.j3d.Node by method invocation conversion
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				123
			<iErrLine>
			<iErrMessage>
				method addChild in class javax.media.j3d.Group cannot be applied to given types;
  required: javax.media.j3d.Node
  found: javax.media.j3d.QuadArray
  reason: actual argument javax.media.j3d.QuadArray cannot be converted to javax.media.j3d.Node by method invocation conversion
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				124
			<iErrLine>
			<iErrMessage>
				method addChild in class javax.media.j3d.Group cannot be applied to given types;
  required: javax.media.j3d.Node
  found: javax.media.j3d.QuadArray
  reason: actual argument javax.media.j3d.QuadArray cannot be converted to javax.media.j3d.Node by method invocation conversion
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				166541703
			</iTime>
			<fName>
				MyOwn3Dv2.java
			</fName>
			<fSize>
				4106.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;



public class MyOwn3Dv2 extends Applet {

    public MyOwn3Dv2() {
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        
        BranchGroup scene = createSceneGraph();
        scene.compile();
        
        SimpleUniverse su = new SimpleUniverse(c3d);
        su.addBranchGraph(scene);
    } // end of constructor
    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();

        // colours for walls and floor
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
        Color3f medRed = new Color3f(0.8f, 0.4f, 0.3f);
        Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
        Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
         
         // arrays to hold each wall
        ArrayList floorCoords = new ArrayList();
        floorCoords.toArray();
        ArrayList wall1Coords = new ArrayList();
        ArrayList wall2Coords = new ArrayList();
        ArrayList wall3Coords = new ArrayList();
        ArrayList wall4Coords = new ArrayList();
        
        // points for plane dimensions
        Point3f p1 = new Point3f(-1.5f, -1.5f, 1.5f);
        Point3f p2 = new Point3f(1.5f, -1.5f, 1.5f);
        Point3f p3 = new Point3f(1.5f, -1.5f, -1.5f);
        Point3f p4 = new Point3f(-1.5f, -1.5f, -1.5f);
        Point3f p5 = new Point3f(-1.5f, 1.5f, 1.5f);
        Point3f p6 = new Point3f(1.5f, 1.5f, 1.5f);
        Point3f p7 = new Point3f(1.5f, 1.5f, -1.5f);
        Point3f p8 = new Point3f(-1.5f, 1.5f, -1.5f);
        
        // create arrays for structures
        floorCoords.add(p1);
        floorCoords.add(p2);
        floorCoords.add(p3);
        floorCoords.add(p4);
        
        wall1Coords.add(p5);
        wall1Coords.add(p6);
        wall1Coords.add(p2);
        wall1Coords.add(p1);
        
        wall2Coords.add(p6);
        wall2Coords.add(p7);
        wall2Coords.add(p3);
        wall2Coords.add(p2);
        
        wall3Coords.add(p7);
        wall3Coords.add(p8);
        wall3Coords.add(p4);
        wall3Coords.add(p3);
        
        wall4Coords.add(p8);
        wall4Coords.add(p5);
        wall4Coords.add(p1);
        wall4Coords.add(p4);
    
        // create tiles to represent room
        QuadArray floor = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
        floor.setCoordinates(floorCoords);
        floor.setColor(blue);
        QuadArray wall1 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
        QuadArray wall2 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
        QuadArray wall3 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
        QuadArray wall4 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
        
        // add to objects to branch group
        objRoot.addChild(floor);
        objRoot.addChild(wall1);
        objRoot.addChild(wall2);
        objRoot.addChild(wall3);
        objRoot.addChild(wall4);
        
        
        return objRoot;
    } // end of method

    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3Dv2(), 256, 256);
    }

}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				113
			<iErrLine>
			<iErrMessage>
				no suitable method found for setCoordinates(java.util.ArrayList)
    method javax.media.j3d.GeometryArray.setCoordinates(int,javax.vecmath.Point3d[],int,int) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.GeometryArray.setCoordinates(int,javax.vecmath.Point3f[],int,int) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.GeometryArray.setCoordinates(int,double[],int,int) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.GeometryArray.setCoordinates(int,float[],int,int) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.GeometryArray.setCoordinates(int,javax.vecmath.Point3d[]) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.GeometryArray.setCoordinates(int,javax.vecmath.Point3f[]) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.GeometryArray.setCoordinates(int,double[]) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.GeometryArray.setCoordinates(int,float[]) is not applicable
      (actual and formal argument lists differ in length)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				114
			<iErrLine>
			<iErrMessage>
				no suitable method found for setColor(javax.vecmath.Color3f)
    method javax.media.j3d.GeometryArray.setColor(int,javax.vecmath.Color4b) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.GeometryArray.setColor(int,javax.vecmath.Color3b) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.GeometryArray.setColor(int,javax.vecmath.Color4f) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.GeometryArray.setColor(int,javax.vecmath.Color3f) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.GeometryArray.setColor(int,byte[]) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.GeometryArray.setColor(int,float[]) is not applicable
      (actual and formal argument lists differ in length)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				121
			<iErrLine>
			<iErrMessage>
				method addChild in class javax.media.j3d.Group cannot be applied to given types;
  required: javax.media.j3d.Node
  found: javax.media.j3d.QuadArray
  reason: actual argument javax.media.j3d.QuadArray cannot be converted to javax.media.j3d.Node by method invocation conversion
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				122
			<iErrLine>
			<iErrMessage>
				method addChild in class javax.media.j3d.Group cannot be applied to given types;
  required: javax.media.j3d.Node
  found: javax.media.j3d.QuadArray
  reason: actual argument javax.media.j3d.QuadArray cannot be converted to javax.media.j3d.Node by method invocation conversion
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				123
			<iErrLine>
			<iErrMessage>
				method addChild in class javax.media.j3d.Group cannot be applied to given types;
  required: javax.media.j3d.Node
  found: javax.media.j3d.QuadArray
  reason: actual argument javax.media.j3d.QuadArray cannot be converted to javax.media.j3d.Node by method invocation conversion
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				124
			<iErrLine>
			<iErrMessage>
				method addChild in class javax.media.j3d.Group cannot be applied to given types;
  required: javax.media.j3d.Node
  found: javax.media.j3d.QuadArray
  reason: actual argument javax.media.j3d.QuadArray cannot be converted to javax.media.j3d.Node by method invocation conversion
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				125
			<iErrLine>
			<iErrMessage>
				method addChild in class javax.media.j3d.Group cannot be applied to given types;
  required: javax.media.j3d.Node
  found: javax.media.j3d.QuadArray
  reason: actual argument javax.media.j3d.QuadArray cannot be converted to javax.media.j3d.Node by method invocation conversion
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				167352797
			</iTime>
			<fName>
				MyOwn3Dv2.java
			</fName>
			<fSize>
				4461.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;



public class MyOwn3Dv2 extends Applet {

    public MyOwn3Dv2() {
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        
        BranchGroup scene = createSceneGraph();
        scene.compile();
        
        SimpleUniverse su = new SimpleUniverse(c3d);
        su.addBranchGraph(scene);
    } // end of constructor
    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();

        // colours for walls and floor
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
        Color3f medRed = new Color3f(0.8f, 0.4f, 0.3f);
        Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
        Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
         
         // arrays to hold each wall
        ArrayList floorCoords = new ArrayList();
        ArrayList wall1Coords = new ArrayList();
        ArrayList wall2Coords = new ArrayList();
        ArrayList wall3Coords = new ArrayList();
        ArrayList wall4Coords = new ArrayList();
        
        // points for plane dimensions
        Point3f p1 = new Point3f(-1.5f, -1.5f, 1.5f);
        Point3f p2 = new Point3f(1.5f, -1.5f, 1.5f);
        Point3f p3 = new Point3f(1.5f, -1.5f, -1.5f);
        Point3f p4 = new Point3f(-1.5f, -1.5f, -1.5f);
        Point3f p5 = new Point3f(-1.5f, 1.5f, 1.5f);
        Point3f p6 = new Point3f(1.5f, 1.5f, 1.5f);
        Point3f p7 = new Point3f(1.5f, 1.5f, -1.5f);
        Point3f p8 = new Point3f(-1.5f, 1.5f, -1.5f);
        
        // create arrays for structures
        floorCoords.add(p1);
        floorCoords.add(p2);
        floorCoords.add(p3);
        floorCoords.add(p4);
        
        wall1Coords.add(p5);
        wall1Coords.add(p6);
        wall1Coords.add(p2);
        wall1Coords.add(p1);
        
        wall2Coords.add(p6);
        wall2Coords.add(p7);
        wall2Coords.add(p3);
        wall2Coords.add(p2);
        
        wall3Coords.add(p7);
        wall3Coords.add(p8);
        wall3Coords.add(p4);
        wall3Coords.add(p3);
        
        wall4Coords.add(p8);
        wall4Coords.add(p5);
        wall4Coords.add(p1);
        wall4Coords.add(p4);
    
        // convert arraylists to arrays
        private Point3f[] AListToArray(ArrayList in) {
            Point3f[] out = new Point3f[in.size()];
            
            for(i = 0; i < in.size(); i++) {
                out[i] = in.get(i);
            }
            return out;
        }
        
        // create tiles to represent room
        QuadArray floor = new QuadArray(floorArray.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
        Point3f floorArray[] = AListToArray(floorCoords);
        floor.setCoordinates(0, floorArray);
//        floor.setColor(blue);
//         QuadArray wall1 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall2 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall3 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall4 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         
        // add to objects to branch group
        objRoot.addChild(floor);
//         objRoot.addChild(wall1);
//         objRoot.addChild(wall2);
//         objRoot.addChild(wall3);
//         objRoot.addChild(wall4);
        
        
        return objRoot;
    } // end of method

    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3Dv2(), 256, 256);
    }

}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				111
			<iErrLine>
			<iErrMessage>
				illegal start of expression
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				111
			<iErrLine>
			<iErrMessage>
				';' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				111
			<iErrLine>
			<iErrMessage>
				';' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				167394406
			</iTime>
			<fName>
				MyOwn3Dv2.java
			</fName>
			<fSize>
				4439.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;



public class MyOwn3Dv2 extends Applet {

    public MyOwn3Dv2() {
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        
        BranchGroup scene = createSceneGraph();
        scene.compile();
        
        SimpleUniverse su = new SimpleUniverse(c3d);
        su.addBranchGraph(scene);
    } // end of constructor
    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();

        // colours for walls and floor
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
        Color3f medRed = new Color3f(0.8f, 0.4f, 0.3f);
        Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
        Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
         
         // arrays to hold each wall
        ArrayList floorCoords = new ArrayList();
        ArrayList wall1Coords = new ArrayList();
        ArrayList wall2Coords = new ArrayList();
        ArrayList wall3Coords = new ArrayList();
        ArrayList wall4Coords = new ArrayList();
        
        // points for plane dimensions
        Point3f p1 = new Point3f(-1.5f, -1.5f, 1.5f);
        Point3f p2 = new Point3f(1.5f, -1.5f, 1.5f);
        Point3f p3 = new Point3f(1.5f, -1.5f, -1.5f);
        Point3f p4 = new Point3f(-1.5f, -1.5f, -1.5f);
        Point3f p5 = new Point3f(-1.5f, 1.5f, 1.5f);
        Point3f p6 = new Point3f(1.5f, 1.5f, 1.5f);
        Point3f p7 = new Point3f(1.5f, 1.5f, -1.5f);
        Point3f p8 = new Point3f(-1.5f, 1.5f, -1.5f);
        
        // create arrays for structures
        floorCoords.add(p1);
        floorCoords.add(p2);
        floorCoords.add(p3);
        floorCoords.add(p4);
        
        wall1Coords.add(p5);
        wall1Coords.add(p6);
        wall1Coords.add(p2);
        wall1Coords.add(p1);
        
        wall2Coords.add(p6);
        wall2Coords.add(p7);
        wall2Coords.add(p3);
        wall2Coords.add(p2);
        
        wall3Coords.add(p7);
        wall3Coords.add(p8);
        wall3Coords.add(p4);
        wall3Coords.add(p3);
        
        wall4Coords.add(p8);
        wall4Coords.add(p5);
        wall4Coords.add(p1);
        wall4Coords.add(p4);
    
        
        
        // create tiles to represent room
        QuadArray floor = new QuadArray(floorArray.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
        Point3f floorArray[] = AListToArray(floorCoords);
        floor.setCoordinates(0, floorArray);
//        floor.setColor(blue);
//         QuadArray wall1 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall2 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall3 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall4 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         
        // add to objects to branch group
        objRoot.addChild(floor);
//         objRoot.addChild(wall1);
//         objRoot.addChild(wall2);
//         objRoot.addChild(wall3);
//         objRoot.addChild(wall4);
        
        
        return objRoot;
    } // end of method

    // convert arraylists to arrays
    private Point3f[] AListToArray(ArrayList in) {
        Point3f[] out = new Point3f[in.size()];
        
        for(i = 0; i < in.size(); i++) {
            out[i] = in.get(i);
        }
        return out;
    }
    
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3Dv2(), 256, 256);
    }

}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				113
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable floorArray
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				123
			<iErrLine>
			<iErrMessage>
				method addChild in class javax.media.j3d.Group cannot be applied to given types;
  required: javax.media.j3d.Node
  found: javax.media.j3d.QuadArray
  reason: actual argument javax.media.j3d.QuadArray cannot be converted to javax.media.j3d.Node by method invocation conversion
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				137
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable i
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				137
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable i
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				137
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable i
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				138
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable i
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				138
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable i
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				167427797
			</iTime>
			<fName>
				MyOwn3Dv2.java
			</fName>
			<fSize>
				4448.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;



public class MyOwn3Dv2 extends Applet {

    public MyOwn3Dv2() {
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        
        BranchGroup scene = createSceneGraph();
        scene.compile();
        
        SimpleUniverse su = new SimpleUniverse(c3d);
        su.addBranchGraph(scene);
    } // end of constructor
    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();

        // colours for walls and floor
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
        Color3f medRed = new Color3f(0.8f, 0.4f, 0.3f);
        Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
        Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
         
         // arrays to hold each wall
        ArrayList floorCoords = new ArrayList();
        ArrayList wall1Coords = new ArrayList();
        ArrayList wall2Coords = new ArrayList();
        ArrayList wall3Coords = new ArrayList();
        ArrayList wall4Coords = new ArrayList();
        
        // points for plane dimensions
        Point3f p1 = new Point3f(-1.5f, -1.5f, 1.5f);
        Point3f p2 = new Point3f(1.5f, -1.5f, 1.5f);
        Point3f p3 = new Point3f(1.5f, -1.5f, -1.5f);
        Point3f p4 = new Point3f(-1.5f, -1.5f, -1.5f);
        Point3f p5 = new Point3f(-1.5f, 1.5f, 1.5f);
        Point3f p6 = new Point3f(1.5f, 1.5f, 1.5f);
        Point3f p7 = new Point3f(1.5f, 1.5f, -1.5f);
        Point3f p8 = new Point3f(-1.5f, 1.5f, -1.5f);
        
        // create arrays for structures
        floorCoords.add(p1);
        floorCoords.add(p2);
        floorCoords.add(p3);
        floorCoords.add(p4);
        
        wall1Coords.add(p5);
        wall1Coords.add(p6);
        wall1Coords.add(p2);
        wall1Coords.add(p1);
        
        wall2Coords.add(p6);
        wall2Coords.add(p7);
        wall2Coords.add(p3);
        wall2Coords.add(p2);
        
        wall3Coords.add(p7);
        wall3Coords.add(p8);
        wall3Coords.add(p4);
        wall3Coords.add(p3);
        
        wall4Coords.add(p8);
        wall4Coords.add(p5);
        wall4Coords.add(p1);
        wall4Coords.add(p4);
    
        
        
        // create tiles to represent room
        Point3f floorArray[] = AListToArray(floorCoords);
        QuadArray floor = new QuadArray(floorArray.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
        
        floor.setCoordinates(0, floorArray);
//        floor.setColor(blue);
//         QuadArray wall1 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall2 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall3 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall4 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         
        // add to objects to branch group
        objRoot.addChild(floor);
//         objRoot.addChild(wall1);
//         objRoot.addChild(wall2);
//         objRoot.addChild(wall3);
//         objRoot.addChild(wall4);
        
        
        return objRoot;
    } // end of method

    // convert arraylists to arrays
    private Point3f[] AListToArray(ArrayList in) {
        Point3f[] out = new Point3f[in.size()];
        
        for(i = 0; i < in.size(); i++) {
            out[i] = in.get(i);
        }
        return out;
    }
    
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3Dv2(), 256, 256);
    }

}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				114
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   method size()
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				124
			<iErrLine>
			<iErrMessage>
				method addChild in class javax.media.j3d.Group cannot be applied to given types;
  required: javax.media.j3d.Node
  found: javax.media.j3d.QuadArray
  reason: actual argument javax.media.j3d.QuadArray cannot be converted to javax.media.j3d.Node by method invocation conversion
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				138
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable i
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				138
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable i
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				138
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable i
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				139
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable i
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				139
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable i
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				167454968
			</iTime>
			<fName>
				MyOwn3Dv2.java
			</fName>
			<fSize>
				4448.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;



public class MyOwn3Dv2 extends Applet {

    public MyOwn3Dv2() {
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        
        BranchGroup scene = createSceneGraph();
        scene.compile();
        
        SimpleUniverse su = new SimpleUniverse(c3d);
        su.addBranchGraph(scene);
    } // end of constructor
    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();

        // colours for walls and floor
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
        Color3f medRed = new Color3f(0.8f, 0.4f, 0.3f);
        Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
        Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
         
         // arrays to hold each wall
        ArrayList floorCoords = new ArrayList();
        ArrayList wall1Coords = new ArrayList();
        ArrayList wall2Coords = new ArrayList();
        ArrayList wall3Coords = new ArrayList();
        ArrayList wall4Coords = new ArrayList();
        
        // points for plane dimensions
        Point3f p1 = new Point3f(-1.5f, -1.5f, 1.5f);
        Point3f p2 = new Point3f(1.5f, -1.5f, 1.5f);
        Point3f p3 = new Point3f(1.5f, -1.5f, -1.5f);
        Point3f p4 = new Point3f(-1.5f, -1.5f, -1.5f);
        Point3f p5 = new Point3f(-1.5f, 1.5f, 1.5f);
        Point3f p6 = new Point3f(1.5f, 1.5f, 1.5f);
        Point3f p7 = new Point3f(1.5f, 1.5f, -1.5f);
        Point3f p8 = new Point3f(-1.5f, 1.5f, -1.5f);
        
        // create arrays for structures
        floorCoords.add(p1);
        floorCoords.add(p2);
        floorCoords.add(p3);
        floorCoords.add(p4);
        
        wall1Coords.add(p5);
        wall1Coords.add(p6);
        wall1Coords.add(p2);
        wall1Coords.add(p1);
        
        wall2Coords.add(p6);
        wall2Coords.add(p7);
        wall2Coords.add(p3);
        wall2Coords.add(p2);
        
        wall3Coords.add(p7);
        wall3Coords.add(p8);
        wall3Coords.add(p4);
        wall3Coords.add(p3);
        
        wall4Coords.add(p8);
        wall4Coords.add(p5);
        wall4Coords.add(p1);
        wall4Coords.add(p4);
    
        
        
        // create tiles to represent room
        Point3f floorArray[] = AListToArray(floorCoords);
        QuadArray floor = new QuadArray(floorArray.length, QuadArray.COORDINATES | QuadArray.COLOR_3);
        
        floor.setCoordinates(0, floorArray);
//        floor.setColor(blue);
//         QuadArray wall1 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall2 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall3 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall4 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         
        // add to objects to branch group
        objRoot.addChild(floor);
//         objRoot.addChild(wall1);
//         objRoot.addChild(wall2);
//         objRoot.addChild(wall3);
//         objRoot.addChild(wall4);
        
        
        return objRoot;
    } // end of method

    // convert arraylists to arrays
    private Point3f[] AListToArray(ArrayList in) {
        Point3f[] out = new Point3f[in.size()];
        
        for(i = 0; i < in.size(); i++) {
            out[i] = in.get(i);
        }
        return out;
    }
    
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3Dv2(), 256, 256);
    }

}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				124
			<iErrLine>
			<iErrMessage>
				method addChild in class javax.media.j3d.Group cannot be applied to given types;
  required: javax.media.j3d.Node
  found: javax.media.j3d.QuadArray
  reason: actual argument javax.media.j3d.QuadArray cannot be converted to javax.media.j3d.Node by method invocation conversion
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				138
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable i
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				138
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable i
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				138
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable i
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				139
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable i
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				139
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable i
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				167588672
			</iTime>
			<fName>
				MyOwn3Dv2.java
			</fName>
			<fSize>
				4520.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;



public class MyOwn3Dv2 extends Applet {

    public MyOwn3Dv2() {
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        
        BranchGroup scene = createSceneGraph();
        scene.compile();
        
        SimpleUniverse su = new SimpleUniverse(c3d);
        su.addBranchGraph(scene);
    } // end of constructor
    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();

        // colours for walls and floor
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
        Color3f medRed = new Color3f(0.8f, 0.4f, 0.3f);
        Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
        Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
         
         // arrays to hold each wall
        ArrayList floorCoords = new ArrayList();
        ArrayList wall1Coords = new ArrayList();
        ArrayList wall2Coords = new ArrayList();
        ArrayList wall3Coords = new ArrayList();
        ArrayList wall4Coords = new ArrayList();
        
        // points for plane dimensions
        Point3f p1 = new Point3f(-1.5f, -1.5f, 1.5f);
        Point3f p2 = new Point3f(1.5f, -1.5f, 1.5f);
        Point3f p3 = new Point3f(1.5f, -1.5f, -1.5f);
        Point3f p4 = new Point3f(-1.5f, -1.5f, -1.5f);
        Point3f p5 = new Point3f(-1.5f, 1.5f, 1.5f);
        Point3f p6 = new Point3f(1.5f, 1.5f, 1.5f);
        Point3f p7 = new Point3f(1.5f, 1.5f, -1.5f);
        Point3f p8 = new Point3f(-1.5f, 1.5f, -1.5f);
        
        // create arrays for structures
        floorCoords.add(p1);
        floorCoords.add(p2);
        floorCoords.add(p3);
        floorCoords.add(p4);
        
        wall1Coords.add(p5);
        wall1Coords.add(p6);
        wall1Coords.add(p2);
        wall1Coords.add(p1);
        
        wall2Coords.add(p6);
        wall2Coords.add(p7);
        wall2Coords.add(p3);
        wall2Coords.add(p2);
        
        wall3Coords.add(p7);
        wall3Coords.add(p8);
        wall3Coords.add(p4);
        wall3Coords.add(p3);
        
        wall4Coords.add(p8);
        wall4Coords.add(p5);
        wall4Coords.add(p1);
        wall4Coords.add(p4);
    
        
        
        // create tiles to represent room
        Point3f floorArray[] = AListToArray(floorCoords);
        QuadArray floor = new QuadArray(floorArray.length, QuadArray.COORDINATES | QuadArray.COLOR_3);
        
        floor.setCoordinates(0, floorArray);
//        floor.setColor(blue);
//         QuadArray wall1 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall2 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall3 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall4 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         
        Shape3d shape = new Shape3d();
        shape.setGeometry(floor)
        // add to objects to branch group
        objRoot.addChild(shape);
//         objRoot.addChild(wall1);
//         objRoot.addChild(wall2);
//         objRoot.addChild(wall3);
//         objRoot.addChild(wall4);
        
        
        return objRoot;
    } // end of method

    // convert arraylists to arrays
    private Point3f[] AListToArray(ArrayList in) {
        Point3f[] out = new Point3f[in.size()];
        
        for(i = 0; i < in.size(); i++) {
            out[i] = in.get(i);
        }
        return out;
    }
    
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3Dv2(), 256, 256);
    }

}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				124
			<iErrLine>
			<iErrMessage>
				';' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				167595359
			</iTime>
			<fName>
				MyOwn3Dv2.java
			</fName>
			<fSize>
				4521.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;



public class MyOwn3Dv2 extends Applet {

    public MyOwn3Dv2() {
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        
        BranchGroup scene = createSceneGraph();
        scene.compile();
        
        SimpleUniverse su = new SimpleUniverse(c3d);
        su.addBranchGraph(scene);
    } // end of constructor
    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();

        // colours for walls and floor
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
        Color3f medRed = new Color3f(0.8f, 0.4f, 0.3f);
        Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
        Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
         
         // arrays to hold each wall
        ArrayList floorCoords = new ArrayList();
        ArrayList wall1Coords = new ArrayList();
        ArrayList wall2Coords = new ArrayList();
        ArrayList wall3Coords = new ArrayList();
        ArrayList wall4Coords = new ArrayList();
        
        // points for plane dimensions
        Point3f p1 = new Point3f(-1.5f, -1.5f, 1.5f);
        Point3f p2 = new Point3f(1.5f, -1.5f, 1.5f);
        Point3f p3 = new Point3f(1.5f, -1.5f, -1.5f);
        Point3f p4 = new Point3f(-1.5f, -1.5f, -1.5f);
        Point3f p5 = new Point3f(-1.5f, 1.5f, 1.5f);
        Point3f p6 = new Point3f(1.5f, 1.5f, 1.5f);
        Point3f p7 = new Point3f(1.5f, 1.5f, -1.5f);
        Point3f p8 = new Point3f(-1.5f, 1.5f, -1.5f);
        
        // create arrays for structures
        floorCoords.add(p1);
        floorCoords.add(p2);
        floorCoords.add(p3);
        floorCoords.add(p4);
        
        wall1Coords.add(p5);
        wall1Coords.add(p6);
        wall1Coords.add(p2);
        wall1Coords.add(p1);
        
        wall2Coords.add(p6);
        wall2Coords.add(p7);
        wall2Coords.add(p3);
        wall2Coords.add(p2);
        
        wall3Coords.add(p7);
        wall3Coords.add(p8);
        wall3Coords.add(p4);
        wall3Coords.add(p3);
        
        wall4Coords.add(p8);
        wall4Coords.add(p5);
        wall4Coords.add(p1);
        wall4Coords.add(p4);
    
        
        
        // create tiles to represent room
        Point3f floorArray[] = AListToArray(floorCoords);
        QuadArray floor = new QuadArray(floorArray.length, QuadArray.COORDINATES | QuadArray.COLOR_3);
        
        floor.setCoordinates(0, floorArray);
//        floor.setColor(blue);
//         QuadArray wall1 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall2 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall3 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall4 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         
        Shape3d shape = new Shape3d();
        shape.setGeometry(floor);
        // add to objects to branch group
        objRoot.addChild(shape);
//         objRoot.addChild(wall1);
//         objRoot.addChild(wall2);
//         objRoot.addChild(wall3);
//         objRoot.addChild(wall4);
        
        
        return objRoot;
    } // end of method

    // convert arraylists to arrays
    private Point3f[] AListToArray(ArrayList in) {
        Point3f[] out = new Point3f[in.size()];
        
        for(i = 0; i < in.size(); i++) {
            out[i] = in.get(i);
        }
        return out;
    }
    
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3Dv2(), 256, 256);
    }

}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				123
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class Shape3d
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				123
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class Shape3d
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				140
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable i
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				140
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable i
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				140
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable i
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				141
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable i
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				141
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable i
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				167667953
			</iTime>
			<fName>
				MyOwn3Dv2.java
			</fName>
			<fSize>
				4521.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;



public class MyOwn3Dv2 extends Applet {

    public MyOwn3Dv2() {
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        
        BranchGroup scene = createSceneGraph();
        scene.compile();
        
        SimpleUniverse su = new SimpleUniverse(c3d);
        su.addBranchGraph(scene);
    } // end of constructor
    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();

        // colours for walls and floor
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
        Color3f medRed = new Color3f(0.8f, 0.4f, 0.3f);
        Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
        Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
         
         // arrays to hold each wall
        ArrayList floorCoords = new ArrayList();
        ArrayList wall1Coords = new ArrayList();
        ArrayList wall2Coords = new ArrayList();
        ArrayList wall3Coords = new ArrayList();
        ArrayList wall4Coords = new ArrayList();
        
        // points for plane dimensions
        Point3f p1 = new Point3f(-1.5f, -1.5f, 1.5f);
        Point3f p2 = new Point3f(1.5f, -1.5f, 1.5f);
        Point3f p3 = new Point3f(1.5f, -1.5f, -1.5f);
        Point3f p4 = new Point3f(-1.5f, -1.5f, -1.5f);
        Point3f p5 = new Point3f(-1.5f, 1.5f, 1.5f);
        Point3f p6 = new Point3f(1.5f, 1.5f, 1.5f);
        Point3f p7 = new Point3f(1.5f, 1.5f, -1.5f);
        Point3f p8 = new Point3f(-1.5f, 1.5f, -1.5f);
        
        // create arrays for structures
        floorCoords.add(p1);
        floorCoords.add(p2);
        floorCoords.add(p3);
        floorCoords.add(p4);
        
        wall1Coords.add(p5);
        wall1Coords.add(p6);
        wall1Coords.add(p2);
        wall1Coords.add(p1);
        
        wall2Coords.add(p6);
        wall2Coords.add(p7);
        wall2Coords.add(p3);
        wall2Coords.add(p2);
        
        wall3Coords.add(p7);
        wall3Coords.add(p8);
        wall3Coords.add(p4);
        wall3Coords.add(p3);
        
        wall4Coords.add(p8);
        wall4Coords.add(p5);
        wall4Coords.add(p1);
        wall4Coords.add(p4);
    
        
        
        // create tiles to represent room
        Point3f floorArray[] = AListToArray(floorCoords);
        QuadArray floor = new QuadArray(floorArray.length, QuadArray.COORDINATES | QuadArray.COLOR_3);
        
        floor.setCoordinates(0, floorArray);
//        floor.setColor(blue);
//         QuadArray wall1 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall2 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall3 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall4 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         
        Shape3D shape = new Shape3D();
        shape.setGeometry(floor);
        // add to objects to branch group
        objRoot.addChild(shape);
//         objRoot.addChild(wall1);
//         objRoot.addChild(wall2);
//         objRoot.addChild(wall3);
//         objRoot.addChild(wall4);
        
        
        return objRoot;
    } // end of method

    // convert arraylists to arrays
    private Point3f[] AListToArray(ArrayList in) {
        Point3f[] out = new Point3f[in.size()];
        
        for(i = 0; i < in.size(); i++) {
            out[i] = in.get(i);
        }
        return out;
    }
    
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3Dv2(), 256, 256);
    }

}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				140
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable i
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				140
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable i
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				140
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable i
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				141
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable i
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				141
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable i
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				167679562
			</iTime>
			<fName>
				MyOwn3Dv2.java
			</fName>
			<fSize>
				4525.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;



public class MyOwn3Dv2 extends Applet {

    public MyOwn3Dv2() {
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        
        BranchGroup scene = createSceneGraph();
        scene.compile();
        
        SimpleUniverse su = new SimpleUniverse(c3d);
        su.addBranchGraph(scene);
    } // end of constructor
    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();

        // colours for walls and floor
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
        Color3f medRed = new Color3f(0.8f, 0.4f, 0.3f);
        Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
        Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
         
         // arrays to hold each wall
        ArrayList floorCoords = new ArrayList();
        ArrayList wall1Coords = new ArrayList();
        ArrayList wall2Coords = new ArrayList();
        ArrayList wall3Coords = new ArrayList();
        ArrayList wall4Coords = new ArrayList();
        
        // points for plane dimensions
        Point3f p1 = new Point3f(-1.5f, -1.5f, 1.5f);
        Point3f p2 = new Point3f(1.5f, -1.5f, 1.5f);
        Point3f p3 = new Point3f(1.5f, -1.5f, -1.5f);
        Point3f p4 = new Point3f(-1.5f, -1.5f, -1.5f);
        Point3f p5 = new Point3f(-1.5f, 1.5f, 1.5f);
        Point3f p6 = new Point3f(1.5f, 1.5f, 1.5f);
        Point3f p7 = new Point3f(1.5f, 1.5f, -1.5f);
        Point3f p8 = new Point3f(-1.5f, 1.5f, -1.5f);
        
        // create arrays for structures
        floorCoords.add(p1);
        floorCoords.add(p2);
        floorCoords.add(p3);
        floorCoords.add(p4);
        
        wall1Coords.add(p5);
        wall1Coords.add(p6);
        wall1Coords.add(p2);
        wall1Coords.add(p1);
        
        wall2Coords.add(p6);
        wall2Coords.add(p7);
        wall2Coords.add(p3);
        wall2Coords.add(p2);
        
        wall3Coords.add(p7);
        wall3Coords.add(p8);
        wall3Coords.add(p4);
        wall3Coords.add(p3);
        
        wall4Coords.add(p8);
        wall4Coords.add(p5);
        wall4Coords.add(p1);
        wall4Coords.add(p4);
    
        
        
        // create tiles to represent room
        Point3f floorArray[] = AListToArray(floorCoords);
        QuadArray floor = new QuadArray(floorArray.length, QuadArray.COORDINATES | QuadArray.COLOR_3);
        
        floor.setCoordinates(0, floorArray);
//        floor.setColor(blue);
//         QuadArray wall1 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall2 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall3 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall4 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         
        Shape3D shape = new Shape3D();
        shape.setGeometry(floor);
        // add to objects to branch group
        objRoot.addChild(shape);
//         objRoot.addChild(wall1);
//         objRoot.addChild(wall2);
//         objRoot.addChild(wall3);
//         objRoot.addChild(wall4);
        
        
        return objRoot;
    } // end of method

    // convert arraylists to arrays
    private Point3f[] AListToArray(ArrayList in) {
        Point3f[] out = new Point3f[in.size()];
        
        for(int i = 0; i < in.size(); i++) {
            out[i] = in.get(i);
        }
        return out;
    }
    
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3Dv2(), 256, 256);
    }

}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				141
			<iErrLine>
			<iErrMessage>
				incompatible types
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				167727906
			</iTime>
			<fName>
				MyOwn3Dv2.java
			</fName>
			<fSize>
				4534.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;



public class MyOwn3Dv2 extends Applet {

    public MyOwn3Dv2() {
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        
        BranchGroup scene = createSceneGraph();
        scene.compile();
        
        SimpleUniverse su = new SimpleUniverse(c3d);
        su.addBranchGraph(scene);
    } // end of constructor
    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();

        // colours for walls and floor
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
        Color3f medRed = new Color3f(0.8f, 0.4f, 0.3f);
        Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
        Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
         
         // arrays to hold each wall
        ArrayList floorCoords = new ArrayList();
        ArrayList wall1Coords = new ArrayList();
        ArrayList wall2Coords = new ArrayList();
        ArrayList wall3Coords = new ArrayList();
        ArrayList wall4Coords = new ArrayList();
        
        // points for plane dimensions
        Point3f p1 = new Point3f(-1.5f, -1.5f, 1.5f);
        Point3f p2 = new Point3f(1.5f, -1.5f, 1.5f);
        Point3f p3 = new Point3f(1.5f, -1.5f, -1.5f);
        Point3f p4 = new Point3f(-1.5f, -1.5f, -1.5f);
        Point3f p5 = new Point3f(-1.5f, 1.5f, 1.5f);
        Point3f p6 = new Point3f(1.5f, 1.5f, 1.5f);
        Point3f p7 = new Point3f(1.5f, 1.5f, -1.5f);
        Point3f p8 = new Point3f(-1.5f, 1.5f, -1.5f);
        
        // create arrays for structures
        floorCoords.add(p1);
        floorCoords.add(p2);
        floorCoords.add(p3);
        floorCoords.add(p4);
        
        wall1Coords.add(p5);
        wall1Coords.add(p6);
        wall1Coords.add(p2);
        wall1Coords.add(p1);
        
        wall2Coords.add(p6);
        wall2Coords.add(p7);
        wall2Coords.add(p3);
        wall2Coords.add(p2);
        
        wall3Coords.add(p7);
        wall3Coords.add(p8);
        wall3Coords.add(p4);
        wall3Coords.add(p3);
        
        wall4Coords.add(p8);
        wall4Coords.add(p5);
        wall4Coords.add(p1);
        wall4Coords.add(p4);
    
        
        
        // create tiles to represent room
        Point3f floorArray[] = AListToArray(floorCoords);
        QuadArray floor = new QuadArray(floorArray.length, QuadArray.COORDINATES | QuadArray.COLOR_3);
        
        floor.setCoordinates(0, floorArray);
//        floor.setColor(blue);
//         QuadArray wall1 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall2 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall3 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall4 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         
        Shape3D shape = new Shape3D();
        shape.setGeometry(floor);
        // add to objects to branch group
        objRoot.addChild(shape);
//         objRoot.addChild(wall1);
//         objRoot.addChild(wall2);
//         objRoot.addChild(wall3);
//         objRoot.addChild(wall4);
        
        
        return objRoot;
    } // end of method

    // convert arraylists to arrays
    private Point3f[] AListToArray(ArrayList in) {
        Point3f[] out = new Point3f[in.size()];
        
        for(int i = 0; i < in.size(); i++) {
            out[i] = (Point3f)in.get(i);
        }
        return out;
    }
    
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3Dv2(), 256, 256);
    }

}

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				168223359
			</iTime>
			<fName>
				MyOwn3Dv2.java
			</fName>
			<fSize>
				4724.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;



public class MyOwn3Dv2 extends Applet {

    public MyOwn3Dv2() {
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        
        BranchGroup scene = createSceneGraph();
        scene.compile();
        
        SimpleUniverse su = new SimpleUniverse(c3d);
        su.addBranchGraph(scene);
    } // end of constructor
    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();

        // colours for walls and floor
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
        Color3f medRed = new Color3f(0.8f, 0.4f, 0.3f);
        Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
        Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
         
         // arrays to hold each wall
        ArrayList floorCoords = new ArrayList();
        ArrayList wall1Coords = new ArrayList();
        ArrayList wall2Coords = new ArrayList();
        ArrayList wall3Coords = new ArrayList();
        ArrayList wall4Coords = new ArrayList();
        
        // points for plane dimensions
        Point3f p1 = new Point3f(-1.5f, -1.5f, 1.5f);
        Point3f p2 = new Point3f(1.5f, -1.5f, 1.5f);
        Point3f p3 = new Point3f(1.5f, -1.5f, -1.5f);
        Point3f p4 = new Point3f(-1.5f, -1.5f, -1.5f);
        Point3f p5 = new Point3f(-1.5f, 1.5f, 1.5f);
        Point3f p6 = new Point3f(1.5f, 1.5f, 1.5f);
        Point3f p7 = new Point3f(1.5f, 1.5f, -1.5f);
        Point3f p8 = new Point3f(-1.5f, 1.5f, -1.5f);
        
        // create arrays for structures
        floorCoords.add(p1);
        floorCoords.add(p2);
        floorCoords.add(p3);
        floorCoords.add(p4);
        
        wall1Coords.add(p5);
        wall1Coords.add(p6);
        wall1Coords.add(p2);
        wall1Coords.add(p1);
        
        wall2Coords.add(p6);
        wall2Coords.add(p7);
        wall2Coords.add(p3);
        wall2Coords.add(p2);
        
        wall3Coords.add(p7);
        wall3Coords.add(p8);
        wall3Coords.add(p4);
        wall3Coords.add(p3);
        
        wall4Coords.add(p8);
        wall4Coords.add(p5);
        wall4Coords.add(p1);
        wall4Coords.add(p4);
    
        
        
        // create tiles to represent room
        Point3f floorArray[] = AListToArray(floorCoords);
        QuadArray floor = new QuadArray(floorArray.length, QuadArray.COORDINATES | QuadArray.COLOR_3);
        
        floor.setCoordinates(0, floorArray);
//        floor.setColor(blue);
//         QuadArray wall1 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall2 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall3 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall4 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         
        Shape3D shape = new Shape3D();
        shape.setGeometry(floor);
        ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
        Appearance floorAppear = new Appearance();
        floorAppear.setColoringAttributes(blueFloor);
        // add to objects to branch group
        objRoot.addChild(shape, floorAppear);
//         objRoot.addChild(wall1);
//         objRoot.addChild(wall2);
//         objRoot.addChild(wall3);
//         objRoot.addChild(wall4);
        
        
        return objRoot;
    } // end of method

    // convert arraylists to arrays
    private Point3f[] AListToArray(ArrayList in) {
        Point3f[] out = new Point3f[in.size()];
        
        for(int i = 0; i < in.size(); i++) {
            out[i] = (Point3f)in.get(i);
        }
        return out;
    }
    
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3Dv2(), 256, 256);
    }

}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				129
			<iErrLine>
			<iErrMessage>
				method addChild in class javax.media.j3d.Group cannot be applied to given types;
  required: javax.media.j3d.Node
  found: javax.media.j3d.Shape3D,javax.media.j3d.Appearance
  reason: actual and formal argument lists differ in length
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				168292422
			</iTime>
			<fName>
				MyOwn3Dv2.java
			</fName>
			<fSize>
				4733.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;



public class MyOwn3Dv2 extends Applet {

    public MyOwn3Dv2() {
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        
        BranchGroup scene = createSceneGraph();
        scene.compile();
        
        SimpleUniverse su = new SimpleUniverse(c3d);
        su.addBranchGraph(scene);
    } // end of constructor
    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();

        // colours for walls and floor
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
        Color3f medRed = new Color3f(0.8f, 0.4f, 0.3f);
        Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
        Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
         
         // arrays to hold each wall
        ArrayList floorCoords = new ArrayList();
        ArrayList wall1Coords = new ArrayList();
        ArrayList wall2Coords = new ArrayList();
        ArrayList wall3Coords = new ArrayList();
        ArrayList wall4Coords = new ArrayList();
        
        // points for plane dimensions
        Point3f p1 = new Point3f(-1.5f, -1.5f, 1.5f);
        Point3f p2 = new Point3f(1.5f, -1.5f, 1.5f);
        Point3f p3 = new Point3f(1.5f, -1.5f, -1.5f);
        Point3f p4 = new Point3f(-1.5f, -1.5f, -1.5f);
        Point3f p5 = new Point3f(-1.5f, 1.5f, 1.5f);
        Point3f p6 = new Point3f(1.5f, 1.5f, 1.5f);
        Point3f p7 = new Point3f(1.5f, 1.5f, -1.5f);
        Point3f p8 = new Point3f(-1.5f, 1.5f, -1.5f);
        
        // create arrays for structures
        floorCoords.add(p1);
        floorCoords.add(p2);
        floorCoords.add(p3);
        floorCoords.add(p4);
        
        wall1Coords.add(p5);
        wall1Coords.add(p6);
        wall1Coords.add(p2);
        wall1Coords.add(p1);
        
        wall2Coords.add(p6);
        wall2Coords.add(p7);
        wall2Coords.add(p3);
        wall2Coords.add(p2);
        
        wall3Coords.add(p7);
        wall3Coords.add(p8);
        wall3Coords.add(p4);
        wall3Coords.add(p3);
        
        wall4Coords.add(p8);
        wall4Coords.add(p5);
        wall4Coords.add(p1);
        wall4Coords.add(p4);
    
        
        
        // create tiles to represent room
        Point3f floorArray[] = AListToArray(floorCoords);
        QuadArray floor = new QuadArray(floorArray.length, QuadArray.COORDINATES | QuadArray.COLOR_3);
        
        floor.setCoordinates(0, floorArray);
//        floor.setColor(blue);
//         QuadArray wall1 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall2 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall3 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall4 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         

//         shape.setGeometry(floor);
        ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
        Appearance floorAppear = new Appearance();
        floorAppear.setColoringAttributes(blueFloor);
        // add to objects to branch group
        Shape3D shape = new Shape3D(floor, floorAppear);
        objRoot.addChild(shape);
//         objRoot.addChild(wall1);
//         objRoot.addChild(wall2);
//         objRoot.addChild(wall3);
//         objRoot.addChild(wall4);
        
        
        return objRoot;
    } // end of method

    // convert arraylists to arrays
    private Point3f[] AListToArray(ArrayList in) {
        Point3f[] out = new Point3f[in.size()];
        
        for(int i = 0; i < in.size(); i++) {
            out[i] = (Point3f)in.get(i);
        }
        return out;
    }
    
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3Dv2(), 256, 256);
    }

}

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				168506140
			</iTime>
			<fName>
				MyOwn3Dv2.java
			</fName>
			<fSize>
				4733.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;



public class MyOwn3Dv2 extends Applet {

    public MyOwn3Dv2() {
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        
        BranchGroup scene = createSceneGraph();
        scene.compile();
        
        SimpleUniverse su = new SimpleUniverse(c3d);
        su.addBranchGraph(scene);
    } // end of constructor
    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();

        // colours for walls and floor
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
        Color3f medRed = new Color3f(0.8f, 0.4f, 0.3f);
        Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
        Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
         
         // arrays to hold each wall
        ArrayList floorCoords = new ArrayList();
        ArrayList wall1Coords = new ArrayList();
        ArrayList wall2Coords = new ArrayList();
        ArrayList wall3Coords = new ArrayList();
        ArrayList wall4Coords = new ArrayList();
        
        // points for plane dimensions
        Point3f p1 = new Point3f(-1.5f, -1.5f, 1.5f);
        Point3f p2 = new Point3f(1.5f, -1.5f, 1.5f);
        Point3f p3 = new Point3f(1.5f, -1.5f, -1.5f);
        Point3f p4 = new Point3f(-1.5f, -1.5f, -1.5f);
        Point3f p5 = new Point3f(-1.5f, 1.5f, 1.5f);
        Point3f p6 = new Point3f(1.5f, 1.5f, 1.5f);
        Point3f p7 = new Point3f(1.5f, 1.5f, -1.5f);
        Point3f p8 = new Point3f(-1.5f, 1.5f, -1.5f);
        
        // create arrays for structures
        floorCoords.add(p1);
        floorCoords.add(p4);
        floorCoords.add(p3);
        floorCoords.add(p2);
        
        wall1Coords.add(p5);
        wall1Coords.add(p6);
        wall1Coords.add(p2);
        wall1Coords.add(p1);
        
        wall2Coords.add(p6);
        wall2Coords.add(p7);
        wall2Coords.add(p3);
        wall2Coords.add(p2);
        
        wall3Coords.add(p7);
        wall3Coords.add(p8);
        wall3Coords.add(p4);
        wall3Coords.add(p3);
        
        wall4Coords.add(p8);
        wall4Coords.add(p5);
        wall4Coords.add(p1);
        wall4Coords.add(p4);
    
        
        
        // create tiles to represent room
        Point3f floorArray[] = AListToArray(floorCoords);
        QuadArray floor = new QuadArray(floorArray.length, QuadArray.COORDINATES | QuadArray.COLOR_3);
        
        floor.setCoordinates(0, floorArray);
//        floor.setColor(blue);
//         QuadArray wall1 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall2 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall3 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall4 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         

//         shape.setGeometry(floor);
        ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
        Appearance floorAppear = new Appearance();
        floorAppear.setColoringAttributes(blueFloor);
        // add to objects to branch group
        Shape3D shape = new Shape3D(floor, floorAppear);
        objRoot.addChild(shape);
//         objRoot.addChild(wall1);
//         objRoot.addChild(wall2);
//         objRoot.addChild(wall3);
//         objRoot.addChild(wall4);
        
        
        return objRoot;
    } // end of method

    // convert arraylists to arrays
    private Point3f[] AListToArray(ArrayList in) {
        Point3f[] out = new Point3f[in.size()];
        
        for(int i = 0; i < in.size(); i++) {
            out[i] = (Point3f)in.get(i);
        }
        return out;
    }
    
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3Dv2(), 256, 256);
    }

}

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				168603047
			</iTime>
			<fName>
				MyOwn3Dv2.java
			</fName>
			<fSize>
				4733.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;



public class MyOwn3Dv2 extends Applet {

    public MyOwn3Dv2() {
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        
        BranchGroup scene = createSceneGraph();
        scene.compile();
        
        SimpleUniverse su = new SimpleUniverse(c3d);
        su.addBranchGraph(scene);
    } // end of constructor
    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();

        // colours for walls and floor
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
        Color3f medRed = new Color3f(0.8f, 0.4f, 0.3f);
        Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
        Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
         
         // arrays to hold each wall
        ArrayList floorCoords = new ArrayList();
        ArrayList wall1Coords = new ArrayList();
        ArrayList wall2Coords = new ArrayList();
        ArrayList wall3Coords = new ArrayList();
        ArrayList wall4Coords = new ArrayList();
        
        // points for plane dimensions
        Point3f p1 = new Point3f(-1.5f, -1.5f, 1.5f);
        Point3f p2 = new Point3f(1.5f, -1.5f, 1.5f);
        Point3f p3 = new Point3f(1.5f, -1.5f, -1.5f);
        Point3f p4 = new Point3f(-1.5f, -1.5f, -1.5f);
        Point3f p5 = new Point3f(-1.5f, 1.5f, 1.5f);
        Point3f p6 = new Point3f(1.5f, 1.5f, 1.5f);
        Point3f p7 = new Point3f(1.5f, 1.5f, -1.5f);
        Point3f p8 = new Point3f(-1.5f, 1.5f, -1.5f);
        
        // create arrays for structures
        floorCoords.add(p5);
        floorCoords.add(p6);
        floorCoords.add(p2);
        floorCoords.add(p1);
        
        wall1Coords.add(p5);
        wall1Coords.add(p6);
        wall1Coords.add(p2);
        wall1Coords.add(p1);
        
        wall2Coords.add(p6);
        wall2Coords.add(p7);
        wall2Coords.add(p3);
        wall2Coords.add(p2);
        
        wall3Coords.add(p7);
        wall3Coords.add(p8);
        wall3Coords.add(p4);
        wall3Coords.add(p3);
        
        wall4Coords.add(p8);
        wall4Coords.add(p5);
        wall4Coords.add(p1);
        wall4Coords.add(p4);
    
        
        
        // create tiles to represent room
        Point3f floorArray[] = AListToArray(floorCoords);
        QuadArray floor = new QuadArray(floorArray.length, QuadArray.COORDINATES | QuadArray.COLOR_3);
        
        floor.setCoordinates(0, floorArray);
//        floor.setColor(blue);
//         QuadArray wall1 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall2 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall3 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall4 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         

//         shape.setGeometry(floor);
        ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
        Appearance floorAppear = new Appearance();
        floorAppear.setColoringAttributes(blueFloor);
        // add to objects to branch group
        Shape3D shape = new Shape3D(floor, floorAppear);
        objRoot.addChild(shape);
//         objRoot.addChild(wall1);
//         objRoot.addChild(wall2);
//         objRoot.addChild(wall3);
//         objRoot.addChild(wall4);
        
        
        return objRoot;
    } // end of method

    // convert arraylists to arrays
    private Point3f[] AListToArray(ArrayList in) {
        Point3f[] out = new Point3f[in.size()];
        
        for(int i = 0; i < in.size(); i++) {
            out[i] = (Point3f)in.get(i);
        }
        return out;
    }
    
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3Dv2(), 256, 256);
    }

}

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				168791015
			</iTime>
			<fName>
				MyOwn3Dv2.java
			</fName>
			<fSize>
				4832.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;



public class MyOwn3Dv2 extends Applet {

    public MyOwn3Dv2() {
//         setLayout(new BorderLayout());
//         GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
//         Canvas3D c3d = new Canvas3D(config);
        
        BranchGroup scene = createSceneGraph();
        scene.compile();
        
        SimpleUniverse su = new SimpleUniverse(c3d);
        su.getViewingPlatform().setNominalViewingTransform();
        su.addBranchGraph(scene);
    } // end of constructor
    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();

        // colours for walls and floor
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
        Color3f medRed = new Color3f(0.8f, 0.4f, 0.3f);
        Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
        Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
         
         // arrays to hold each wall
        ArrayList floorCoords = new ArrayList();
        ArrayList wall1Coords = new ArrayList();
        ArrayList wall2Coords = new ArrayList();
        ArrayList wall3Coords = new ArrayList();
        ArrayList wall4Coords = new ArrayList();
        
        // points for plane dimensions
        Point3f p1 = new Point3f(-1.5f, -1.5f, 1.5f);
        Point3f p2 = new Point3f(1.5f, -1.5f, 1.5f);
        Point3f p3 = new Point3f(1.5f, -1.5f, -1.5f);
        Point3f p4 = new Point3f(-1.5f, -1.5f, -1.5f);
        Point3f p5 = new Point3f(-1.5f, 1.5f, 1.5f);
        Point3f p6 = new Point3f(1.5f, 1.5f, 1.5f);
        Point3f p7 = new Point3f(1.5f, 1.5f, -1.5f);
        Point3f p8 = new Point3f(-1.5f, 1.5f, -1.5f);
        
        // create arrays for structures
        floorCoords.add(p5);
        floorCoords.add(p6);
        floorCoords.add(p2);
        floorCoords.add(p1);
        
        wall1Coords.add(p5);
        wall1Coords.add(p6);
        wall1Coords.add(p2);
        wall1Coords.add(p1);
        
        wall2Coords.add(p6);
        wall2Coords.add(p7);
        wall2Coords.add(p3);
        wall2Coords.add(p2);
        
        wall3Coords.add(p7);
        wall3Coords.add(p8);
        wall3Coords.add(p4);
        wall3Coords.add(p3);
        
        wall4Coords.add(p8);
        wall4Coords.add(p5);
        wall4Coords.add(p1);
        wall4Coords.add(p4);
    
        
        
        // create tiles to represent room
        Point3f floorArray[] = AListToArray(floorCoords);
        QuadArray floor = new QuadArray(floorArray.length, QuadArray.COORDINATES | QuadArray.COLOR_3);
        
        floor.setCoordinates(0, floorArray);
//        floor.setColor(blue);
//         QuadArray wall1 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall2 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall3 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall4 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         

//         shape.setGeometry(floor);
        ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
        Appearance floorAppear = new Appearance();
        floorAppear.setColoringAttributes(blueFloor);
        // add to objects to branch group
        Shape3D shape = new Shape3D(floor, floorAppear);
        objRoot.addChild(shape);
//         objRoot.addChild(wall1);
//         objRoot.addChild(wall2);
//         objRoot.addChild(wall3);
//         objRoot.addChild(wall4);
        
        
        return objRoot;
    } // end of method

    // convert arraylists to arrays
    private Point3f[] AListToArray(ArrayList in) {
        Point3f[] out = new Point3f[in.size()];
        
        for(int i = 0; i < in.size(); i++) {
            out[i] = (Point3f)in.get(i);
        }
        return out;
    }
    
    public static void main(String args[]) {
//         Frame frame = new MainFrame(new MyOwn3Dv2(), 256, 256);
        new MyOwn3Dv2();
    }

}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				52
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable c3d
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				168807781
			</iTime>
			<fName>
				MyOwn3Dv2.java
			</fName>
			<fSize>
				4829.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;



public class MyOwn3Dv2 extends Applet {

    public MyOwn3Dv2() {
//         setLayout(new BorderLayout());
//         GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
//         Canvas3D c3d = new Canvas3D(config);
        
        BranchGroup scene = createSceneGraph();
        scene.compile();
        
        SimpleUniverse su = new SimpleUniverse();
        su.getViewingPlatform().setNominalViewingTransform();
        su.addBranchGraph(scene);
    } // end of constructor
    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();

        // colours for walls and floor
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
        Color3f medRed = new Color3f(0.8f, 0.4f, 0.3f);
        Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
        Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
         
         // arrays to hold each wall
        ArrayList floorCoords = new ArrayList();
        ArrayList wall1Coords = new ArrayList();
        ArrayList wall2Coords = new ArrayList();
        ArrayList wall3Coords = new ArrayList();
        ArrayList wall4Coords = new ArrayList();
        
        // points for plane dimensions
        Point3f p1 = new Point3f(-1.5f, -1.5f, 1.5f);
        Point3f p2 = new Point3f(1.5f, -1.5f, 1.5f);
        Point3f p3 = new Point3f(1.5f, -1.5f, -1.5f);
        Point3f p4 = new Point3f(-1.5f, -1.5f, -1.5f);
        Point3f p5 = new Point3f(-1.5f, 1.5f, 1.5f);
        Point3f p6 = new Point3f(1.5f, 1.5f, 1.5f);
        Point3f p7 = new Point3f(1.5f, 1.5f, -1.5f);
        Point3f p8 = new Point3f(-1.5f, 1.5f, -1.5f);
        
        // create arrays for structures
        floorCoords.add(p5);
        floorCoords.add(p6);
        floorCoords.add(p2);
        floorCoords.add(p1);
        
        wall1Coords.add(p5);
        wall1Coords.add(p6);
        wall1Coords.add(p2);
        wall1Coords.add(p1);
        
        wall2Coords.add(p6);
        wall2Coords.add(p7);
        wall2Coords.add(p3);
        wall2Coords.add(p2);
        
        wall3Coords.add(p7);
        wall3Coords.add(p8);
        wall3Coords.add(p4);
        wall3Coords.add(p3);
        
        wall4Coords.add(p8);
        wall4Coords.add(p5);
        wall4Coords.add(p1);
        wall4Coords.add(p4);
    
        
        
        // create tiles to represent room
        Point3f floorArray[] = AListToArray(floorCoords);
        QuadArray floor = new QuadArray(floorArray.length, QuadArray.COORDINATES | QuadArray.COLOR_3);
        
        floor.setCoordinates(0, floorArray);
//        floor.setColor(blue);
//         QuadArray wall1 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall2 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall3 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall4 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         

//         shape.setGeometry(floor);
        ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
        Appearance floorAppear = new Appearance();
        floorAppear.setColoringAttributes(blueFloor);
        // add to objects to branch group
        Shape3D shape = new Shape3D(floor, floorAppear);
        objRoot.addChild(shape);
//         objRoot.addChild(wall1);
//         objRoot.addChild(wall2);
//         objRoot.addChild(wall3);
//         objRoot.addChild(wall4);
        
        
        return objRoot;
    } // end of method

    // convert arraylists to arrays
    private Point3f[] AListToArray(ArrayList in) {
        Point3f[] out = new Point3f[in.size()];
        
        for(int i = 0; i < in.size(); i++) {
            out[i] = (Point3f)in.get(i);
        }
        return out;
    }
    
    public static void main(String args[]) {
//         Frame frame = new MainFrame(new MyOwn3Dv2(), 256, 256);
        new MyOwn3Dv2();
    }

}

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				169008765
			</iTime>
			<fName>
				MyOwn3Dv2.java
			</fName>
			<fSize>
				5012.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;



public class MyOwn3Dv2 extends Applet {

    public MyOwn3Dv2() {
//         setLayout(new BorderLayout());
//         GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
//         Canvas3D c3d = new Canvas3D(config);
        
        BranchGroup scene = createSceneGraph();
        scene.compile();
        
        SimpleUniverse su = new SimpleUniverse();
        su.getViewingPlatform().setNominalViewingTransform();
        su.addBranchGraph(scene);
    } // end of constructor
    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();

        // colours for walls and floor
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
        Color3f medRed = new Color3f(0.8f, 0.4f, 0.3f);
        Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
        Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
         
         // arrays to hold each wall
        ArrayList floorCoords = new ArrayList();
        ArrayList wall1Coords = new ArrayList();
        ArrayList wall2Coords = new ArrayList();
        ArrayList wall3Coords = new ArrayList();
        ArrayList wall4Coords = new ArrayList();
        
        // points for plane dimensions
        Point3f p1 = new Point3f(1.5f, -1.5f, 1.5f);
        Point3f p2 = new Point3f(1.5f, -1.5f, 1.5f);
        Point3f p3 = new Point3f(1.5f, -1.5f, -1.5f);
        Point3f p4 = new Point3f(-1.5f, -1.5f, -1.5f);
        Point3f p5 = new Point3f(-1.5f, 1.5f, 1.5f);
        Point3f p6 = new Point3f(1.5f, 1.5f, 1.5f);
        Point3f p7 = new Point3f(1.5f, 1.5f, -1.5f);
        Point3f p8 = new Point3f(-1.5f, 1.5f, -1.5f);
        
        // create arrays for structures
        Point3f a1 = new Point3f(0f, 0f, 0f);
        Point3f a2 = new Point3f(2f, 0f, 0f);
        Point3f a3 = new Point3f(2f, 3f, 0f);
        Point3f a4 = new Point3f(0f, 3f, 0f);
        floorCoords.add(a1);
        floorCoords.add(a2);
        floorCoords.add(a3);
        floorCoords.add(a4);
        
        wall1Coords.add(p5);
        wall1Coords.add(p6);
        wall1Coords.add(p2);
        wall1Coords.add(p1);
        
        wall2Coords.add(p6);
        wall2Coords.add(p7);
        wall2Coords.add(p3);
        wall2Coords.add(p2);
        
        wall3Coords.add(p7);
        wall3Coords.add(p8);
        wall3Coords.add(p4);
        wall3Coords.add(p3);
        
        wall4Coords.add(p8);
        wall4Coords.add(p5);
        wall4Coords.add(p1);
        wall4Coords.add(p4);
    
        
        
        // create tiles to represent room
        Point3f floorArray[] = AListToArray(floorCoords);
        QuadArray floor = new QuadArray(floorArray.length, QuadArray.COORDINATES | QuadArray.COLOR_3);
        
        floor.setCoordinates(0, floorArray);
//        floor.setColor(blue);
//         QuadArray wall1 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall2 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall3 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall4 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         

//         shape.setGeometry(floor);
        ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
        Appearance floorAppear = new Appearance();
        floorAppear.setColoringAttributes(blueFloor);
        // add to objects to branch group
        Shape3D shape = new Shape3D(floor, floorAppear);
        objRoot.addChild(shape);
//         objRoot.addChild(wall1);
//         objRoot.addChild(wall2);
//         objRoot.addChild(wall3);
//         objRoot.addChild(wall4);
        
        
        return objRoot;
    } // end of method

    // convert arraylists to arrays
    private Point3f[] AListToArray(ArrayList in) {
        Point3f[] out = new Point3f[in.size()];
        
        for(int i = 0; i < in.size(); i++) {
            out[i] = (Point3f)in.get(i);
        }
        return out;
    }
    
    public static void main(String args[]) {
//         Frame frame = new MainFrame(new MyOwn3Dv2(), 256, 256);
        new MyOwn3Dv2();
    }

}

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				169480375
			</iTime>
			<fName>
				MyOwn3Dv2.java
			</fName>
			<fSize>
				5277.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;



public class MyOwn3Dv2 extends Applet {

    public MyOwn3Dv2() {
//         setLayout(new BorderLayout());
//         GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
//         Canvas3D c3d = new Canvas3D(config);
        
        Point3f a1 = new Point3f(0f, 0f, 0f);
        Point3f a2 = new Point3f(2f, 0f, 0f);
        Point3f a3 = new Point3f(2f, 3f, 0f);
        Point3f a4 = new Point3f(0f, 3f, 0f);
        QuadArray floorCoord = new QuadArray(4, QuadArray.COORDINATES);
        floorCoord.setCoordinate(0, a1);
        floorCoord.setCoordinate(0, a2);
        floorCoord.setCoordinate(0, a3);
        floorCoord.setCoordinate(0, a4);

        Appearance fa = new Appearance();
        Shape3D fs3d = new Shape3D(floorCoord, fa);
        
        BranchGroup scene = new BranchGroup();
        scene.addChild(fs3d);
//         scene.compile();
        
        SimpleUniverse su = new SimpleUniverse();
        su.getViewingPlatform().setNominalViewingTransform();
        su.addBranchGraph(scene);
    } // end of constructor
    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();

        // colours for walls and floor
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
        Color3f medRed = new Color3f(0.8f, 0.4f, 0.3f);
        Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
        Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
         
         // arrays to hold each wall
        ArrayList floorCoords = new ArrayList();
        ArrayList wall1Coords = new ArrayList();
        ArrayList wall2Coords = new ArrayList();
        ArrayList wall3Coords = new ArrayList();
        ArrayList wall4Coords = new ArrayList();
        
        // points for plane dimensions
        Point3f p1 = new Point3f(1.5f, -1.5f, 1.5f);
        Point3f p2 = new Point3f(1.5f, -1.5f, 1.5f);
        Point3f p3 = new Point3f(1.5f, -1.5f, -1.5f);
        Point3f p4 = new Point3f(-1.5f, -1.5f, -1.5f);
        Point3f p5 = new Point3f(-1.5f, 1.5f, 1.5f);
        Point3f p6 = new Point3f(1.5f, 1.5f, 1.5f);
        Point3f p7 = new Point3f(1.5f, 1.5f, -1.5f);
        Point3f p8 = new Point3f(-1.5f, 1.5f, -1.5f);
        
        // create arrays for structures
        
        
        wall1Coords.add(p5);
        wall1Coords.add(p6);
        wall1Coords.add(p2);
        wall1Coords.add(p1);
        
        wall2Coords.add(p6);
        wall2Coords.add(p7);
        wall2Coords.add(p3);
        wall2Coords.add(p2);
        
        wall3Coords.add(p7);
        wall3Coords.add(p8);
        wall3Coords.add(p4);
        wall3Coords.add(p3);
        
        wall4Coords.add(p8);
        wall4Coords.add(p5);
        wall4Coords.add(p1);
        wall4Coords.add(p4);
    
        
        
        // create tiles to represent room
        Point3f floorArray[] = AListToArray(floorCoords);
        QuadArray floor = new QuadArray(floorArray.length, QuadArray.COORDINATES | QuadArray.COLOR_3);
        
        floor.setCoordinates(0, floorArray);
//        floor.setColor(blue);
//         QuadArray wall1 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall2 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall3 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall4 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         

//         shape.setGeometry(floor);
        ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
        Appearance floorAppear = new Appearance();
        floorAppear.setColoringAttributes(blueFloor);
        // add to objects to branch group
        Shape3D shape = new Shape3D(floor, floorAppear);
        objRoot.addChild(shape);
//         objRoot.addChild(wall1);
//         objRoot.addChild(wall2);
//         objRoot.addChild(wall3);
//         objRoot.addChild(wall4);
        
        
        return objRoot;
    } // end of method

    // convert arraylists to arrays
    private Point3f[] AListToArray(ArrayList in) {
        Point3f[] out = new Point3f[in.size()];
        
        for(int i = 0; i < in.size(); i++) {
            out[i] = (Point3f)in.get(i);
        }
        return out;
    }
    
    public static void main(String args[]) {
//         Frame frame = new MainFrame(new MyOwn3Dv2(), 256, 256);
        new MyOwn3Dv2();
    }

}

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				169556953
			</iTime>
			<fName>
				MyOwn3Dv2.java
			</fName>
			<fSize>
				5277.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;



public class MyOwn3Dv2 extends Applet {

    public MyOwn3Dv2() {
//         setLayout(new BorderLayout());
//         GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
//         Canvas3D c3d = new Canvas3D(config);
        
        Point3f a1 = new Point3f(0f, 0f, 0f);
        Point3f a2 = new Point3f(2f, 0f, 0f);
        Point3f a3 = new Point3f(2f, 3f, 0f);
        Point3f a4 = new Point3f(0f, 3f, 0f);
        QuadArray floorCoord = new QuadArray(4, QuadArray.COORDINATES);
        floorCoord.setCoordinate(0, a1);
        floorCoord.setCoordinate(1, a2);
        floorCoord.setCoordinate(2, a3);
        floorCoord.setCoordinate(3, a4);

        Appearance fa = new Appearance();
        Shape3D fs3d = new Shape3D(floorCoord, fa);
        
        BranchGroup scene = new BranchGroup();
        scene.addChild(fs3d);
//         scene.compile();
        
        SimpleUniverse su = new SimpleUniverse();
        su.getViewingPlatform().setNominalViewingTransform();
        su.addBranchGraph(scene);
    } // end of constructor
    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();

        // colours for walls and floor
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
        Color3f medRed = new Color3f(0.8f, 0.4f, 0.3f);
        Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
        Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
         
         // arrays to hold each wall
        ArrayList floorCoords = new ArrayList();
        ArrayList wall1Coords = new ArrayList();
        ArrayList wall2Coords = new ArrayList();
        ArrayList wall3Coords = new ArrayList();
        ArrayList wall4Coords = new ArrayList();
        
        // points for plane dimensions
        Point3f p1 = new Point3f(1.5f, -1.5f, 1.5f);
        Point3f p2 = new Point3f(1.5f, -1.5f, 1.5f);
        Point3f p3 = new Point3f(1.5f, -1.5f, -1.5f);
        Point3f p4 = new Point3f(-1.5f, -1.5f, -1.5f);
        Point3f p5 = new Point3f(-1.5f, 1.5f, 1.5f);
        Point3f p6 = new Point3f(1.5f, 1.5f, 1.5f);
        Point3f p7 = new Point3f(1.5f, 1.5f, -1.5f);
        Point3f p8 = new Point3f(-1.5f, 1.5f, -1.5f);
        
        // create arrays for structures
        
        
        wall1Coords.add(p5);
        wall1Coords.add(p6);
        wall1Coords.add(p2);
        wall1Coords.add(p1);
        
        wall2Coords.add(p6);
        wall2Coords.add(p7);
        wall2Coords.add(p3);
        wall2Coords.add(p2);
        
        wall3Coords.add(p7);
        wall3Coords.add(p8);
        wall3Coords.add(p4);
        wall3Coords.add(p3);
        
        wall4Coords.add(p8);
        wall4Coords.add(p5);
        wall4Coords.add(p1);
        wall4Coords.add(p4);
    
        
        
        // create tiles to represent room
        Point3f floorArray[] = AListToArray(floorCoords);
        QuadArray floor = new QuadArray(floorArray.length, QuadArray.COORDINATES | QuadArray.COLOR_3);
        
        floor.setCoordinates(0, floorArray);
//        floor.setColor(blue);
//         QuadArray wall1 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall2 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall3 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall4 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         

//         shape.setGeometry(floor);
        ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
        Appearance floorAppear = new Appearance();
        floorAppear.setColoringAttributes(blueFloor);
        // add to objects to branch group
        Shape3D shape = new Shape3D(floor, floorAppear);
        objRoot.addChild(shape);
//         objRoot.addChild(wall1);
//         objRoot.addChild(wall2);
//         objRoot.addChild(wall3);
//         objRoot.addChild(wall4);
        
        
        return objRoot;
    } // end of method

    // convert arraylists to arrays
    private Point3f[] AListToArray(ArrayList in) {
        Point3f[] out = new Point3f[in.size()];
        
        for(int i = 0; i < in.size(); i++) {
            out[i] = (Point3f)in.get(i);
        }
        return out;
    }
    
    public static void main(String args[]) {
//         Frame frame = new MainFrame(new MyOwn3Dv2(), 256, 256);
        new MyOwn3Dv2();
    }

}

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				169652172
			</iTime>
			<fName>
				MyOwn3Dv2.java
			</fName>
			<fSize>
				5277.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;



public class MyOwn3Dv2 extends Applet {

    public MyOwn3Dv2() {
//         setLayout(new BorderLayout());
//         GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
//         Canvas3D c3d = new Canvas3D(config);
        
        Point3f a1 = new Point3f(0f, 0f, 0f);
        Point3f a2 = new Point3f(3f, 0f, 0f);
        Point3f a3 = new Point3f(3f, 3f, 0f);
        Point3f a4 = new Point3f(0f, 3f, 0f);
        QuadArray floorCoord = new QuadArray(4, QuadArray.COORDINATES);
        floorCoord.setCoordinate(0, a1);
        floorCoord.setCoordinate(1, a2);
        floorCoord.setCoordinate(2, a3);
        floorCoord.setCoordinate(3, a4);

        Appearance fa = new Appearance();
        Shape3D fs3d = new Shape3D(floorCoord, fa);
        
        BranchGroup scene = new BranchGroup();
        scene.addChild(fs3d);
//         scene.compile();
        
        SimpleUniverse su = new SimpleUniverse();
        su.getViewingPlatform().setNominalViewingTransform();
        su.addBranchGraph(scene);
    } // end of constructor
    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();

        // colours for walls and floor
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
        Color3f medRed = new Color3f(0.8f, 0.4f, 0.3f);
        Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
        Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
         
         // arrays to hold each wall
        ArrayList floorCoords = new ArrayList();
        ArrayList wall1Coords = new ArrayList();
        ArrayList wall2Coords = new ArrayList();
        ArrayList wall3Coords = new ArrayList();
        ArrayList wall4Coords = new ArrayList();
        
        // points for plane dimensions
        Point3f p1 = new Point3f(1.5f, -1.5f, 1.5f);
        Point3f p2 = new Point3f(1.5f, -1.5f, 1.5f);
        Point3f p3 = new Point3f(1.5f, -1.5f, -1.5f);
        Point3f p4 = new Point3f(-1.5f, -1.5f, -1.5f);
        Point3f p5 = new Point3f(-1.5f, 1.5f, 1.5f);
        Point3f p6 = new Point3f(1.5f, 1.5f, 1.5f);
        Point3f p7 = new Point3f(1.5f, 1.5f, -1.5f);
        Point3f p8 = new Point3f(-1.5f, 1.5f, -1.5f);
        
        // create arrays for structures
        
        
        wall1Coords.add(p5);
        wall1Coords.add(p6);
        wall1Coords.add(p2);
        wall1Coords.add(p1);
        
        wall2Coords.add(p6);
        wall2Coords.add(p7);
        wall2Coords.add(p3);
        wall2Coords.add(p2);
        
        wall3Coords.add(p7);
        wall3Coords.add(p8);
        wall3Coords.add(p4);
        wall3Coords.add(p3);
        
        wall4Coords.add(p8);
        wall4Coords.add(p5);
        wall4Coords.add(p1);
        wall4Coords.add(p4);
    
        
        
        // create tiles to represent room
        Point3f floorArray[] = AListToArray(floorCoords);
        QuadArray floor = new QuadArray(floorArray.length, QuadArray.COORDINATES | QuadArray.COLOR_3);
        
        floor.setCoordinates(0, floorArray);
//        floor.setColor(blue);
//         QuadArray wall1 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall2 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall3 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall4 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         

//         shape.setGeometry(floor);
        ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
        Appearance floorAppear = new Appearance();
        floorAppear.setColoringAttributes(blueFloor);
        // add to objects to branch group
        Shape3D shape = new Shape3D(floor, floorAppear);
        objRoot.addChild(shape);
//         objRoot.addChild(wall1);
//         objRoot.addChild(wall2);
//         objRoot.addChild(wall3);
//         objRoot.addChild(wall4);
        
        
        return objRoot;
    } // end of method

    // convert arraylists to arrays
    private Point3f[] AListToArray(ArrayList in) {
        Point3f[] out = new Point3f[in.size()];
        
        for(int i = 0; i < in.size(); i++) {
            out[i] = (Point3f)in.get(i);
        }
        return out;
    }
    
    public static void main(String args[]) {
//         Frame frame = new MainFrame(new MyOwn3Dv2(), 256, 256);
        new MyOwn3Dv2();
    }

}

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				169802062
			</iTime>
			<fName>
				MyOwn3Dv2.java
			</fName>
			<fSize>
				5474.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;



public class MyOwn3Dv2 extends Applet {

    public MyOwn3Dv2() {
//         setLayout(new BorderLayout());
//         GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
//         Canvas3D c3d = new Canvas3D(config);
        
        Point3f a1 = new Point3f(0f, 0f, 0f);
        Point3f a2 = new Point3f(3f, 0f, 0f);
        Point3f a3 = new Point3f(3f, 3f, 0f);
        Point3f a4 = new Point3f(0f, 3f, 0f);
        
        QuadArray floorCoord = new QuadArray(4, QuadArray.COORDINATES);
        floorCoord.setCoordinate(0, a1);
        floorCoord.setCoordinate(1, a2);
        floorCoord.setCoordinate(2, a3);
        floorCoord.setCoordinate(3, a4);
        
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
        
        Appearance fa = new Appearance();
        fa.setColoringAttributes(blueFloor);
        Shape3D fs3d = new Shape3D(floorCoord, fa);
        
        BranchGroup scene = new BranchGroup();
        scene.addChild(fs3d);
//         scene.compile();
        
        SimpleUniverse su = new SimpleUniverse();
        su.getViewingPlatform().setNominalViewingTransform();
        su.addBranchGraph(scene);
    } // end of constructor
    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();

        // colours for walls and floor
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
        Color3f medRed = new Color3f(0.8f, 0.4f, 0.3f);
        Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
        Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
         
         // arrays to hold each wall
        ArrayList floorCoords = new ArrayList();
        ArrayList wall1Coords = new ArrayList();
        ArrayList wall2Coords = new ArrayList();
        ArrayList wall3Coords = new ArrayList();
        ArrayList wall4Coords = new ArrayList();
        
        // points for plane dimensions
        Point3f p1 = new Point3f(1.5f, -1.5f, 1.5f);
        Point3f p2 = new Point3f(1.5f, -1.5f, 1.5f);
        Point3f p3 = new Point3f(1.5f, -1.5f, -1.5f);
        Point3f p4 = new Point3f(-1.5f, -1.5f, -1.5f);
        Point3f p5 = new Point3f(-1.5f, 1.5f, 1.5f);
        Point3f p6 = new Point3f(1.5f, 1.5f, 1.5f);
        Point3f p7 = new Point3f(1.5f, 1.5f, -1.5f);
        Point3f p8 = new Point3f(-1.5f, 1.5f, -1.5f);
        
        // create arrays for structures
        
        
        wall1Coords.add(p5);
        wall1Coords.add(p6);
        wall1Coords.add(p2);
        wall1Coords.add(p1);
        
        wall2Coords.add(p6);
        wall2Coords.add(p7);
        wall2Coords.add(p3);
        wall2Coords.add(p2);
        
        wall3Coords.add(p7);
        wall3Coords.add(p8);
        wall3Coords.add(p4);
        wall3Coords.add(p3);
        
        wall4Coords.add(p8);
        wall4Coords.add(p5);
        wall4Coords.add(p1);
        wall4Coords.add(p4);
    
        
        
        // create tiles to represent room
        Point3f floorArray[] = AListToArray(floorCoords);
        QuadArray floor = new QuadArray(floorArray.length, QuadArray.COORDINATES | QuadArray.COLOR_3);
        
        floor.setCoordinates(0, floorArray);
//        floor.setColor(blue);
//         QuadArray wall1 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall2 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall3 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall4 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         

//         shape.setGeometry(floor);
        ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
        Appearance floorAppear = new Appearance();
        floorAppear.setColoringAttributes(blueFloor);
        // add to objects to branch group
        Shape3D shape = new Shape3D(floor, floorAppear);
        objRoot.addChild(shape);
//         objRoot.addChild(wall1);
//         objRoot.addChild(wall2);
//         objRoot.addChild(wall3);
//         objRoot.addChild(wall4);
        
        
        return objRoot;
    } // end of method

    // convert arraylists to arrays
    private Point3f[] AListToArray(ArrayList in) {
        Point3f[] out = new Point3f[in.size()];
        
        for(int i = 0; i < in.size(); i++) {
            out[i] = (Point3f)in.get(i);
        }
        return out;
    }
    
    public static void main(String args[]) {
//         Frame frame = new MainFrame(new MyOwn3Dv2(), 256, 256);
        new MyOwn3Dv2();
    }

}

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				169979922
			</iTime>
			<fName>
				MyOwn3Dv2.java
			</fName>
			<fSize>
				5501.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;



public class MyOwn3Dv2 extends Applet {

    public MyOwn3Dv2() {
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", canvas3D);
        
        Point3f a1 = new Point3f(0f, 0f, 0f);
        Point3f a2 = new Point3f(3f, 0f, 0f);
        Point3f a3 = new Point3f(3f, 3f, 0f);
        Point3f a4 = new Point3f(0f, 3f, 0f);
        
        QuadArray floorCoord = new QuadArray(4, QuadArray.COORDINATES);
        floorCoord.setCoordinate(0, a1);
        floorCoord.setCoordinate(1, a2);
        floorCoord.setCoordinate(2, a3);
        floorCoord.setCoordinate(3, a4);
        
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
        
        Appearance fa = new Appearance();
        fa.setColoringAttributes(blueFloor);
        Shape3D fs3d = new Shape3D(floorCoord, fa);
        
        BranchGroup scene = new BranchGroup();
        scene.addChild(fs3d);
//         scene.compile();
        
        SimpleUniverse su = new SimpleUniverse(c3d);
        su.getViewingPlatform().setNominalViewingTransform();
        su.addBranchGraph(scene);
    } // end of constructor
    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();

        // colours for walls and floor
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
        Color3f medRed = new Color3f(0.8f, 0.4f, 0.3f);
        Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
        Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
         
         // arrays to hold each wall
        ArrayList floorCoords = new ArrayList();
        ArrayList wall1Coords = new ArrayList();
        ArrayList wall2Coords = new ArrayList();
        ArrayList wall3Coords = new ArrayList();
        ArrayList wall4Coords = new ArrayList();
        
        // points for plane dimensions
        Point3f p1 = new Point3f(1.5f, -1.5f, 1.5f);
        Point3f p2 = new Point3f(1.5f, -1.5f, 1.5f);
        Point3f p3 = new Point3f(1.5f, -1.5f, -1.5f);
        Point3f p4 = new Point3f(-1.5f, -1.5f, -1.5f);
        Point3f p5 = new Point3f(-1.5f, 1.5f, 1.5f);
        Point3f p6 = new Point3f(1.5f, 1.5f, 1.5f);
        Point3f p7 = new Point3f(1.5f, 1.5f, -1.5f);
        Point3f p8 = new Point3f(-1.5f, 1.5f, -1.5f);
        
        // create arrays for structures
        
        
        wall1Coords.add(p5);
        wall1Coords.add(p6);
        wall1Coords.add(p2);
        wall1Coords.add(p1);
        
        wall2Coords.add(p6);
        wall2Coords.add(p7);
        wall2Coords.add(p3);
        wall2Coords.add(p2);
        
        wall3Coords.add(p7);
        wall3Coords.add(p8);
        wall3Coords.add(p4);
        wall3Coords.add(p3);
        
        wall4Coords.add(p8);
        wall4Coords.add(p5);
        wall4Coords.add(p1);
        wall4Coords.add(p4);
    
        
        
        // create tiles to represent room
        Point3f floorArray[] = AListToArray(floorCoords);
        QuadArray floor = new QuadArray(floorArray.length, QuadArray.COORDINATES | QuadArray.COLOR_3);
        
        floor.setCoordinates(0, floorArray);
//        floor.setColor(blue);
//         QuadArray wall1 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall2 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall3 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall4 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         

//         shape.setGeometry(floor);
        ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
        Appearance floorAppear = new Appearance();
        floorAppear.setColoringAttributes(blueFloor);
        // add to objects to branch group
        Shape3D shape = new Shape3D(floor, floorAppear);
        objRoot.addChild(shape);
//         objRoot.addChild(wall1);
//         objRoot.addChild(wall2);
//         objRoot.addChild(wall3);
//         objRoot.addChild(wall4);
        
        
        return objRoot;
    } // end of method

    // convert arraylists to arrays
    private Point3f[] AListToArray(ArrayList in) {
        Point3f[] out = new Point3f[in.size()];
        
        for(int i = 0; i < in.size(); i++) {
            out[i] = (Point3f)in.get(i);
        }
        return out;
    }
    
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3Dv2(), 256, 256);
//         new MyOwn3Dv2();
    }

}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				48
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable canvas3D
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				169993687
			</iTime>
			<fName>
				MyOwn3Dv2.java
			</fName>
			<fSize>
				5496.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;



public class MyOwn3Dv2 extends Applet {

    public MyOwn3Dv2() {
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
        Point3f a1 = new Point3f(0f, 0f, 0f);
        Point3f a2 = new Point3f(3f, 0f, 0f);
        Point3f a3 = new Point3f(3f, 3f, 0f);
        Point3f a4 = new Point3f(0f, 3f, 0f);
        
        QuadArray floorCoord = new QuadArray(4, QuadArray.COORDINATES);
        floorCoord.setCoordinate(0, a1);
        floorCoord.setCoordinate(1, a2);
        floorCoord.setCoordinate(2, a3);
        floorCoord.setCoordinate(3, a4);
        
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
        
        Appearance fa = new Appearance();
        fa.setColoringAttributes(blueFloor);
        Shape3D fs3d = new Shape3D(floorCoord, fa);
        
        BranchGroup scene = new BranchGroup();
        scene.addChild(fs3d);
//         scene.compile();
        
        SimpleUniverse su = new SimpleUniverse(c3d);
        su.getViewingPlatform().setNominalViewingTransform();
        su.addBranchGraph(scene);
    } // end of constructor
    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();

        // colours for walls and floor
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
        Color3f medRed = new Color3f(0.8f, 0.4f, 0.3f);
        Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
        Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
         
         // arrays to hold each wall
        ArrayList floorCoords = new ArrayList();
        ArrayList wall1Coords = new ArrayList();
        ArrayList wall2Coords = new ArrayList();
        ArrayList wall3Coords = new ArrayList();
        ArrayList wall4Coords = new ArrayList();
        
        // points for plane dimensions
        Point3f p1 = new Point3f(1.5f, -1.5f, 1.5f);
        Point3f p2 = new Point3f(1.5f, -1.5f, 1.5f);
        Point3f p3 = new Point3f(1.5f, -1.5f, -1.5f);
        Point3f p4 = new Point3f(-1.5f, -1.5f, -1.5f);
        Point3f p5 = new Point3f(-1.5f, 1.5f, 1.5f);
        Point3f p6 = new Point3f(1.5f, 1.5f, 1.5f);
        Point3f p7 = new Point3f(1.5f, 1.5f, -1.5f);
        Point3f p8 = new Point3f(-1.5f, 1.5f, -1.5f);
        
        // create arrays for structures
        
        
        wall1Coords.add(p5);
        wall1Coords.add(p6);
        wall1Coords.add(p2);
        wall1Coords.add(p1);
        
        wall2Coords.add(p6);
        wall2Coords.add(p7);
        wall2Coords.add(p3);
        wall2Coords.add(p2);
        
        wall3Coords.add(p7);
        wall3Coords.add(p8);
        wall3Coords.add(p4);
        wall3Coords.add(p3);
        
        wall4Coords.add(p8);
        wall4Coords.add(p5);
        wall4Coords.add(p1);
        wall4Coords.add(p4);
    
        
        
        // create tiles to represent room
        Point3f floorArray[] = AListToArray(floorCoords);
        QuadArray floor = new QuadArray(floorArray.length, QuadArray.COORDINATES | QuadArray.COLOR_3);
        
        floor.setCoordinates(0, floorArray);
//        floor.setColor(blue);
//         QuadArray wall1 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall2 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall3 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall4 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         

//         shape.setGeometry(floor);
        ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
        Appearance floorAppear = new Appearance();
        floorAppear.setColoringAttributes(blueFloor);
        // add to objects to branch group
        Shape3D shape = new Shape3D(floor, floorAppear);
        objRoot.addChild(shape);
//         objRoot.addChild(wall1);
//         objRoot.addChild(wall2);
//         objRoot.addChild(wall3);
//         objRoot.addChild(wall4);
        
        
        return objRoot;
    } // end of method

    // convert arraylists to arrays
    private Point3f[] AListToArray(ArrayList in) {
        Point3f[] out = new Point3f[in.size()];
        
        for(int i = 0; i < in.size(); i++) {
            out[i] = (Point3f)in.get(i);
        }
        return out;
    }
    
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3Dv2(), 256, 256);
//         new MyOwn3Dv2();
    }

}

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				170045750
			</iTime>
			<fName>
				MyOwn3Dv2.java
			</fName>
			<fSize>
				5552.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;



public class MyOwn3Dv2 extends Applet {

    public MyOwn3Dv2() {
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
        Point3f a1 = new Point3f(0f, 0f, 0f);
        Point3f a2 = new Point3f(3f, 0f, 0f);
        Point3f a3 = new Point3f(3f, 3f, 0f);
        Point3f a4 = new Point3f(0f, 3f, 0f);
        
        QuadArray floorCoord = new QuadArray(4, QuadArray.COORDINATES);
        floorCoord.setCoordinate(0, a1);
        floorCoord.setCoordinate(1, a2);
        floorCoord.setCoordinate(2, a3);
        floorCoord.setCoordinate(3, a4);
        
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
        ColoringAttributes blueFloor = new ColoringAttributes(green, 1);
        
        Appearance fa = new Appearance();
        fa.setColoringAttributes(blueFloor);
        Shape3D fs3d = new Shape3D(floorCoord, fa);
        
        BranchGroup scene = new BranchGroup();
        scene.addChild(fs3d);
//         scene.compile();
        
        SimpleUniverse su = new SimpleUniverse(c3d);
        su.getViewingPlatform().setNominalViewingTransform();
        su.addBranchGraph(scene);
    } // end of constructor
    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();

        // colours for walls and floor
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
        Color3f medRed = new Color3f(0.8f, 0.4f, 0.3f);
        Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
        Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
         
         // arrays to hold each wall
        ArrayList floorCoords = new ArrayList();
        ArrayList wall1Coords = new ArrayList();
        ArrayList wall2Coords = new ArrayList();
        ArrayList wall3Coords = new ArrayList();
        ArrayList wall4Coords = new ArrayList();
        
        // points for plane dimensions
        Point3f p1 = new Point3f(1.5f, -1.5f, 1.5f);
        Point3f p2 = new Point3f(1.5f, -1.5f, 1.5f);
        Point3f p3 = new Point3f(1.5f, -1.5f, -1.5f);
        Point3f p4 = new Point3f(-1.5f, -1.5f, -1.5f);
        Point3f p5 = new Point3f(-1.5f, 1.5f, 1.5f);
        Point3f p6 = new Point3f(1.5f, 1.5f, 1.5f);
        Point3f p7 = new Point3f(1.5f, 1.5f, -1.5f);
        Point3f p8 = new Point3f(-1.5f, 1.5f, -1.5f);
        
        // create arrays for structures
        
        
        wall1Coords.add(p5);
        wall1Coords.add(p6);
        wall1Coords.add(p2);
        wall1Coords.add(p1);
        
        wall2Coords.add(p6);
        wall2Coords.add(p7);
        wall2Coords.add(p3);
        wall2Coords.add(p2);
        
        wall3Coords.add(p7);
        wall3Coords.add(p8);
        wall3Coords.add(p4);
        wall3Coords.add(p3);
        
        wall4Coords.add(p8);
        wall4Coords.add(p5);
        wall4Coords.add(p1);
        wall4Coords.add(p4);
    
        
        
        // create tiles to represent room
        Point3f floorArray[] = AListToArray(floorCoords);
        QuadArray floor = new QuadArray(floorArray.length, QuadArray.COORDINATES | QuadArray.COLOR_3);
        
        floor.setCoordinates(0, floorArray);
//        floor.setColor(blue);
//         QuadArray wall1 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall2 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall3 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall4 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         

//         shape.setGeometry(floor);
        ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
        Appearance floorAppear = new Appearance();
        floorAppear.setColoringAttributes(blueFloor);
        // add to objects to branch group
        Shape3D shape = new Shape3D(floor, floorAppear);
        objRoot.addChild(shape);
//         objRoot.addChild(wall1);
//         objRoot.addChild(wall2);
//         objRoot.addChild(wall3);
//         objRoot.addChild(wall4);
        
        
        return objRoot;
    } // end of method

    // convert arraylists to arrays
    private Point3f[] AListToArray(ArrayList in) {
        Point3f[] out = new Point3f[in.size()];
        
        for(int i = 0; i < in.size(); i++) {
            out[i] = (Point3f)in.get(i);
        }
        return out;
    }
    
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3Dv2(), 256, 256);
//         new MyOwn3Dv2();
    }

}

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				170429062
			</iTime>
			<fName>
				MyOwn3Dv2.java
			</fName>
			<fSize>
				5581.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;



public class MyOwn3Dv2 extends Applet {

    public MyOwn3Dv2() {
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
        Point3f a1 = new Point3f(-1.5f, -1.5f, -1.5f);
        Point3f a2 = new Point3f(1.5f, 0f, -1.5f);
        Point3f a3 = new Point3f(1.5f, 1.5f, -1.5f);
        Point3f a4 = new Point3f(-1.5f, 1.5f, -1.5f);
        
        QuadArray floorCoord = new QuadArray(4, QuadArray.COORDINATES);
        floorCoord.setCoordinate(0, a1);
        floorCoord.setCoordinate(1, a2);
        floorCoord.setCoordinate(2, a3);
        floorCoord.setCoordinate(3, a4);
        
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
        ColoringAttributes blueFloor = new ColoringAttributes(green, 1);
        
        Appearance fa = new Appearance();
        fa.setColoringAttributes(blueFloor);
        Shape3D fs3d = new Shape3D(floorCoord, fa);
        
        BranchGroup scene = new BranchGroup();
        scene.addChild(fs3d);
//         scene.compile();
        
        SimpleUniverse su = new SimpleUniverse(c3d);
        su.getViewingPlatform().setNominalViewingTransform();
        su.addBranchGraph(scene);
    } // end of constructor
    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();

        // colours for walls and floor
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
        Color3f medRed = new Color3f(0.8f, 0.4f, 0.3f);
        Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
        Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
         
         // arrays to hold each wall
        ArrayList floorCoords = new ArrayList();
        ArrayList wall1Coords = new ArrayList();
        ArrayList wall2Coords = new ArrayList();
        ArrayList wall3Coords = new ArrayList();
        ArrayList wall4Coords = new ArrayList();
        
        // points for plane dimensions
        Point3f p1 = new Point3f(1.5f, -1.5f, 1.5f);
        Point3f p2 = new Point3f(1.5f, -1.5f, 1.5f);
        Point3f p3 = new Point3f(1.5f, -1.5f, -1.5f);
        Point3f p4 = new Point3f(-1.5f, -1.5f, -1.5f);
        Point3f p5 = new Point3f(-1.5f, 1.5f, 1.5f);
        Point3f p6 = new Point3f(1.5f, 1.5f, 1.5f);
        Point3f p7 = new Point3f(1.5f, 1.5f, -1.5f);
        Point3f p8 = new Point3f(-1.5f, 1.5f, -1.5f);
        
        // create arrays for structures
        
        
        wall1Coords.add(p5);
        wall1Coords.add(p6);
        wall1Coords.add(p2);
        wall1Coords.add(p1);
        
        wall2Coords.add(p6);
        wall2Coords.add(p7);
        wall2Coords.add(p3);
        wall2Coords.add(p2);
        
        wall3Coords.add(p7);
        wall3Coords.add(p8);
        wall3Coords.add(p4);
        wall3Coords.add(p3);
        
        wall4Coords.add(p8);
        wall4Coords.add(p5);
        wall4Coords.add(p1);
        wall4Coords.add(p4);
    
        
        
        // create tiles to represent room
        Point3f floorArray[] = AListToArray(floorCoords);
        QuadArray floor = new QuadArray(floorArray.length, QuadArray.COORDINATES | QuadArray.COLOR_3);
        
        floor.setCoordinates(0, floorArray);
//        floor.setColor(blue);
//         QuadArray wall1 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall2 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall3 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall4 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         

//         shape.setGeometry(floor);
        ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
        Appearance floorAppear = new Appearance();
        floorAppear.setColoringAttributes(blueFloor);
        // add to objects to branch group
        Shape3D shape = new Shape3D(floor, floorAppear);
        objRoot.addChild(shape);
//         objRoot.addChild(wall1);
//         objRoot.addChild(wall2);
//         objRoot.addChild(wall3);
//         objRoot.addChild(wall4);
        
        
        return objRoot;
    } // end of method

    // convert arraylists to arrays
    private Point3f[] AListToArray(ArrayList in) {
        Point3f[] out = new Point3f[in.size()];
        
        for(int i = 0; i < in.size(); i++) {
            out[i] = (Point3f)in.get(i);
        }
        return out;
    }
    
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3Dv2(), 256, 256);
//         new MyOwn3Dv2();
    }

}

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				170470547
			</iTime>
			<fName>
				MyOwn3Dv2.java
			</fName>
			<fSize>
				5584.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;



public class MyOwn3Dv2 extends Applet {

    public MyOwn3Dv2() {
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
        Point3f a1 = new Point3f(-1.5f, -1.5f, -1.5f);
        Point3f a2 = new Point3f(1.5f, -1.5f, -1.5f);
        Point3f a3 = new Point3f(1.5f, 1.5f, -1.5f);
        Point3f a4 = new Point3f(-1.5f, 1.5f, -1.5f);
        
        QuadArray floorCoord = new QuadArray(4, QuadArray.COORDINATES);
        floorCoord.setCoordinate(0, a1);
        floorCoord.setCoordinate(1, a2);
        floorCoord.setCoordinate(2, a3);
        floorCoord.setCoordinate(3, a4);
        
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
        ColoringAttributes blueFloor = new ColoringAttributes(green, 1);
        
        Appearance fa = new Appearance();
        fa.setColoringAttributes(blueFloor);
        Shape3D fs3d = new Shape3D(floorCoord, fa);
        
        BranchGroup scene = new BranchGroup();
        scene.addChild(fs3d);
//         scene.compile();
        
        SimpleUniverse su = new SimpleUniverse(c3d);
        su.getViewingPlatform().setNominalViewingTransform();
        su.addBranchGraph(scene);
    } // end of constructor
    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();

        // colours for walls and floor
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
        Color3f medRed = new Color3f(0.8f, 0.4f, 0.3f);
        Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
        Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
         
         // arrays to hold each wall
        ArrayList floorCoords = new ArrayList();
        ArrayList wall1Coords = new ArrayList();
        ArrayList wall2Coords = new ArrayList();
        ArrayList wall3Coords = new ArrayList();
        ArrayList wall4Coords = new ArrayList();
        
        // points for plane dimensions
        Point3f p1 = new Point3f(1.5f, -1.5f, 1.5f);
        Point3f p2 = new Point3f(1.5f, -1.5f, 1.5f);
        Point3f p3 = new Point3f(1.5f, -1.5f, -1.5f);
        Point3f p4 = new Point3f(-1.5f, -1.5f, -1.5f);
        Point3f p5 = new Point3f(-1.5f, 1.5f, 1.5f);
        Point3f p6 = new Point3f(1.5f, 1.5f, 1.5f);
        Point3f p7 = new Point3f(1.5f, 1.5f, -1.5f);
        Point3f p8 = new Point3f(-1.5f, 1.5f, -1.5f);
        
        // create arrays for structures
        
        
        wall1Coords.add(p5);
        wall1Coords.add(p6);
        wall1Coords.add(p2);
        wall1Coords.add(p1);
        
        wall2Coords.add(p6);
        wall2Coords.add(p7);
        wall2Coords.add(p3);
        wall2Coords.add(p2);
        
        wall3Coords.add(p7);
        wall3Coords.add(p8);
        wall3Coords.add(p4);
        wall3Coords.add(p3);
        
        wall4Coords.add(p8);
        wall4Coords.add(p5);
        wall4Coords.add(p1);
        wall4Coords.add(p4);
    
        
        
        // create tiles to represent room
        Point3f floorArray[] = AListToArray(floorCoords);
        QuadArray floor = new QuadArray(floorArray.length, QuadArray.COORDINATES | QuadArray.COLOR_3);
        
        floor.setCoordinates(0, floorArray);
//        floor.setColor(blue);
//         QuadArray wall1 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall2 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall3 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall4 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         

//         shape.setGeometry(floor);
        ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
        Appearance floorAppear = new Appearance();
        floorAppear.setColoringAttributes(blueFloor);
        // add to objects to branch group
        Shape3D shape = new Shape3D(floor, floorAppear);
        objRoot.addChild(shape);
//         objRoot.addChild(wall1);
//         objRoot.addChild(wall2);
//         objRoot.addChild(wall3);
//         objRoot.addChild(wall4);
        
        
        return objRoot;
    } // end of method

    // convert arraylists to arrays
    private Point3f[] AListToArray(ArrayList in) {
        Point3f[] out = new Point3f[in.size()];
        
        for(int i = 0; i < in.size(); i++) {
            out[i] = (Point3f)in.get(i);
        }
        return out;
    }
    
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3Dv2(), 256, 256);
//         new MyOwn3Dv2();
    }

}

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				170616984
			</iTime>
			<fName>
				MyOwn3Dv2.java
			</fName>
			<fSize>
				6050.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;



public class MyOwn3Dv2 extends Applet {

    public MyOwn3Dv2() {
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
        Point3f a1 = new Point3f(-1.5f, -1.5f, -1.5f);
        Point3f a2 = new Point3f(1.5f, -1.5f, -1.5f);
        Point3f a3 = new Point3f(1.5f, 1.5f, -1.5f);
        Point3f a4 = new Point3f(-1.5f, 1.5f, -1.5f);
        
        QuadArray floorCoord = new QuadArray(4, QuadArray.COORDINATES);
        floorCoord.setCoordinate(0, a1);
        floorCoord.setCoordinate(1, a2);
        floorCoord.setCoordinate(2, a3);
        floorCoord.setCoordinate(3, a4);
        
        Point3f b1 = new Point3f(-1.4f, -1.4f, 1.5f);
        Point3f b2 = new Point3f(1.6f, -1.4f, 1.5f);
        Point3f b3 = new Point3f(1.6f, 1.6f, 1.5f);
        Point3f b4 = new Point3f(-1.4f, 1.6f, 1.5f);
        
        QuadArray floorCoord = new QuadArray(4, QuadArray.COORDINATES);
        floorCoord.setCoordinate(0, a1);
        floorCoord.setCoordinate(1, a2);
        floorCoord.setCoordinate(2, a3);
        floorCoord.setCoordinate(3, a4);
        
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
        ColoringAttributes blueFloor = new ColoringAttributes(green, 1);
        
        Appearance fa = new Appearance();
        fa.setColoringAttributes(blueFloor);
        Shape3D fs3d = new Shape3D(floorCoord, fa);
        
        BranchGroup scene = new BranchGroup();
        scene.addChild(fs3d);
//         scene.compile();
        
        SimpleUniverse su = new SimpleUniverse(c3d);
        su.getViewingPlatform().setNominalViewingTransform();
        su.addBranchGraph(scene);
    } // end of constructor
    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();

        // colours for walls and floor
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
        Color3f medRed = new Color3f(0.8f, 0.4f, 0.3f);
        Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
        Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
         
         // arrays to hold each wall
        ArrayList floorCoords = new ArrayList();
        ArrayList wall1Coords = new ArrayList();
        ArrayList wall2Coords = new ArrayList();
        ArrayList wall3Coords = new ArrayList();
        ArrayList wall4Coords = new ArrayList();
        
        // points for plane dimensions
        Point3f p1 = new Point3f(1.5f, -1.5f, 1.5f);
        Point3f p2 = new Point3f(1.5f, -1.5f, 1.5f);
        Point3f p3 = new Point3f(1.5f, -1.5f, -1.5f);
        Point3f p4 = new Point3f(-1.5f, -1.5f, -1.5f);
        Point3f p5 = new Point3f(-1.5f, 1.5f, 1.5f);
        Point3f p6 = new Point3f(1.5f, 1.5f, 1.5f);
        Point3f p7 = new Point3f(1.5f, 1.5f, -1.5f);
        Point3f p8 = new Point3f(-1.5f, 1.5f, -1.5f);
        
        // create arrays for structures
        
        
        wall1Coords.add(p5);
        wall1Coords.add(p6);
        wall1Coords.add(p2);
        wall1Coords.add(p1);
        
        wall2Coords.add(p6);
        wall2Coords.add(p7);
        wall2Coords.add(p3);
        wall2Coords.add(p2);
        
        wall3Coords.add(p7);
        wall3Coords.add(p8);
        wall3Coords.add(p4);
        wall3Coords.add(p3);
        
        wall4Coords.add(p8);
        wall4Coords.add(p5);
        wall4Coords.add(p1);
        wall4Coords.add(p4);
    
        
        
        // create tiles to represent room
        Point3f floorArray[] = AListToArray(floorCoords);
        QuadArray floor = new QuadArray(floorArray.length, QuadArray.COORDINATES | QuadArray.COLOR_3);
        
        floor.setCoordinates(0, floorArray);
//        floor.setColor(blue);
//         QuadArray wall1 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall2 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall3 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall4 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         

//         shape.setGeometry(floor);
        ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
        Appearance floorAppear = new Appearance();
        floorAppear.setColoringAttributes(blueFloor);
        // add to objects to branch group
        Shape3D shape = new Shape3D(floor, floorAppear);
        objRoot.addChild(shape);
//         objRoot.addChild(wall1);
//         objRoot.addChild(wall2);
//         objRoot.addChild(wall3);
//         objRoot.addChild(wall4);
        
        
        return objRoot;
    } // end of method

    // convert arraylists to arrays
    private Point3f[] AListToArray(ArrayList in) {
        Point3f[] out = new Point3f[in.size()];
        
        for(int i = 0; i < in.size(); i++) {
            out[i] = (Point3f)in.get(i);
        }
        return out;
    }
    
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3Dv2(), 256, 256);
//         new MyOwn3Dv2();
    }

}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				66
			<iErrLine>
			<iErrMessage>
				variable floorCoord is already defined in constructor MyOwn3Dv2()
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				170806187
			</iTime>
			<fName>
				MyOwn3Dv2.java
			</fName>
			<fSize>
				6302.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;



public class MyOwn3Dv2 extends Applet {

    public MyOwn3Dv2() {
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
        Point3f a1 = new Point3f(-1.5f, -1.5f, -1.5f);
        Point3f a2 = new Point3f(1.5f, -1.5f, -1.5f);
        Point3f a3 = new Point3f(1.5f, 1.5f, -1.5f);
        Point3f a4 = new Point3f(-1.5f, 1.5f, -1.5f);
        
        QuadArray floorCoord = new QuadArray(4, QuadArray.COORDINATES);
        floorCoord.setCoordinate(0, a1);
        floorCoord.setCoordinate(1, a2);
        floorCoord.setCoordinate(2, a3);
        floorCoord.setCoordinate(3, a4);
        
        Point3f b1 = new Point3f(-1.4f, -1.4f, 1.5f);
        Point3f b2 = new Point3f(1.6f, -1.4f, 1.5f);
        Point3f b3 = new Point3f(1.6f, 1.6f, 1.5f);
        Point3f b4 = new Point3f(-1.4f, 1.6f, 1.5f);
        
        QuadArray floorCoord2 = new QuadArray(4, QuadArray.COORDINATES);
        floorCoord2.setCoordinate(0, b1);
        floorCoord2.setCoordinate(1, b2);
        floorCoord2.setCoordinate(2, b3);
        floorCoord2.setCoordinate(3, b4);
        
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
        ColoringAttributes greenFloor = new ColoringAttributes(green, 1);
        ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);

        Appearance fa = new Appearance();
        Appearance fb = new Appearance();

        fa.setColoringAttributes(blueFloor);
        fb.setColoringAttributes(greenFloor);
        
        Shape3D fs3d = new Shape3D(floorCoord, fa);
        Shape3d fs3d2 = new Shape3D(floorCoord, fb);
        
        BranchGroup scene = new BranchGroup();
        scene.addChild(fs3d);
        scene.addChile(fs3d2);
//         scene.compile();
        
        SimpleUniverse su = new SimpleUniverse(c3d);
        su.getViewingPlatform().setNominalViewingTransform();
        su.addBranchGraph(scene);
    } // end of constructor
    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();

        // colours for walls and floor
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
        Color3f medRed = new Color3f(0.8f, 0.4f, 0.3f);
        Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
        Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
         
         // arrays to hold each wall
        ArrayList floorCoords = new ArrayList();
        ArrayList wall1Coords = new ArrayList();
        ArrayList wall2Coords = new ArrayList();
        ArrayList wall3Coords = new ArrayList();
        ArrayList wall4Coords = new ArrayList();
        
        // points for plane dimensions
        Point3f p1 = new Point3f(1.5f, -1.5f, 1.5f);
        Point3f p2 = new Point3f(1.5f, -1.5f, 1.5f);
        Point3f p3 = new Point3f(1.5f, -1.5f, -1.5f);
        Point3f p4 = new Point3f(-1.5f, -1.5f, -1.5f);
        Point3f p5 = new Point3f(-1.5f, 1.5f, 1.5f);
        Point3f p6 = new Point3f(1.5f, 1.5f, 1.5f);
        Point3f p7 = new Point3f(1.5f, 1.5f, -1.5f);
        Point3f p8 = new Point3f(-1.5f, 1.5f, -1.5f);
        
        // create arrays for structures
        
        
        wall1Coords.add(p5);
        wall1Coords.add(p6);
        wall1Coords.add(p2);
        wall1Coords.add(p1);
        
        wall2Coords.add(p6);
        wall2Coords.add(p7);
        wall2Coords.add(p3);
        wall2Coords.add(p2);
        
        wall3Coords.add(p7);
        wall3Coords.add(p8);
        wall3Coords.add(p4);
        wall3Coords.add(p3);
        
        wall4Coords.add(p8);
        wall4Coords.add(p5);
        wall4Coords.add(p1);
        wall4Coords.add(p4);
    
        
        
        // create tiles to represent room
        Point3f floorArray[] = AListToArray(floorCoords);
        QuadArray floor = new QuadArray(floorArray.length, QuadArray.COORDINATES | QuadArray.COLOR_3);
        
        floor.setCoordinates(0, floorArray);
//        floor.setColor(blue);
//         QuadArray wall1 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall2 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall3 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall4 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         

//         shape.setGeometry(floor);
        ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
        Appearance floorAppear = new Appearance();
        floorAppear.setColoringAttributes(blueFloor);
        // add to objects to branch group
        Shape3D shape = new Shape3D(floor, floorAppear);
        objRoot.addChild(shape);
//         objRoot.addChild(wall1);
//         objRoot.addChild(wall2);
//         objRoot.addChild(wall3);
//         objRoot.addChild(wall4);
        
        
        return objRoot;
    } // end of method

    // convert arraylists to arrays
    private Point3f[] AListToArray(ArrayList in) {
        Point3f[] out = new Point3f[in.size()];
        
        for(int i = 0; i < in.size(); i++) {
            out[i] = (Point3f)in.get(i);
        }
        return out;
    }
    
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3Dv2(), 256, 256);
//         new MyOwn3Dv2();
    }

}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				84
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class Shape3d
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				170820218
			</iTime>
			<fName>
				MyOwn3Dv2.java
			</fName>
			<fSize>
				6302.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;



public class MyOwn3Dv2 extends Applet {

    public MyOwn3Dv2() {
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
        Point3f a1 = new Point3f(-1.5f, -1.5f, -1.5f);
        Point3f a2 = new Point3f(1.5f, -1.5f, -1.5f);
        Point3f a3 = new Point3f(1.5f, 1.5f, -1.5f);
        Point3f a4 = new Point3f(-1.5f, 1.5f, -1.5f);
        
        QuadArray floorCoord = new QuadArray(4, QuadArray.COORDINATES);
        floorCoord.setCoordinate(0, a1);
        floorCoord.setCoordinate(1, a2);
        floorCoord.setCoordinate(2, a3);
        floorCoord.setCoordinate(3, a4);
        
        Point3f b1 = new Point3f(-1.4f, -1.4f, 1.5f);
        Point3f b2 = new Point3f(1.6f, -1.4f, 1.5f);
        Point3f b3 = new Point3f(1.6f, 1.6f, 1.5f);
        Point3f b4 = new Point3f(-1.4f, 1.6f, 1.5f);
        
        QuadArray floorCoord2 = new QuadArray(4, QuadArray.COORDINATES);
        floorCoord2.setCoordinate(0, b1);
        floorCoord2.setCoordinate(1, b2);
        floorCoord2.setCoordinate(2, b3);
        floorCoord2.setCoordinate(3, b4);
        
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
        ColoringAttributes greenFloor = new ColoringAttributes(green, 1);
        ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);

        Appearance fa = new Appearance();
        Appearance fb = new Appearance();

        fa.setColoringAttributes(blueFloor);
        fb.setColoringAttributes(greenFloor);
        
        Shape3D fs3d = new Shape3D(floorCoord, fa);
        Shape3D fs3d2 = new Shape3D(floorCoord, fb);
        
        BranchGroup scene = new BranchGroup();
        scene.addChild(fs3d);
        scene.addChile(fs3d2);
//         scene.compile();
        
        SimpleUniverse su = new SimpleUniverse(c3d);
        su.getViewingPlatform().setNominalViewingTransform();
        su.addBranchGraph(scene);
    } // end of constructor
    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();

        // colours for walls and floor
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
        Color3f medRed = new Color3f(0.8f, 0.4f, 0.3f);
        Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
        Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
         
         // arrays to hold each wall
        ArrayList floorCoords = new ArrayList();
        ArrayList wall1Coords = new ArrayList();
        ArrayList wall2Coords = new ArrayList();
        ArrayList wall3Coords = new ArrayList();
        ArrayList wall4Coords = new ArrayList();
        
        // points for plane dimensions
        Point3f p1 = new Point3f(1.5f, -1.5f, 1.5f);
        Point3f p2 = new Point3f(1.5f, -1.5f, 1.5f);
        Point3f p3 = new Point3f(1.5f, -1.5f, -1.5f);
        Point3f p4 = new Point3f(-1.5f, -1.5f, -1.5f);
        Point3f p5 = new Point3f(-1.5f, 1.5f, 1.5f);
        Point3f p6 = new Point3f(1.5f, 1.5f, 1.5f);
        Point3f p7 = new Point3f(1.5f, 1.5f, -1.5f);
        Point3f p8 = new Point3f(-1.5f, 1.5f, -1.5f);
        
        // create arrays for structures
        
        
        wall1Coords.add(p5);
        wall1Coords.add(p6);
        wall1Coords.add(p2);
        wall1Coords.add(p1);
        
        wall2Coords.add(p6);
        wall2Coords.add(p7);
        wall2Coords.add(p3);
        wall2Coords.add(p2);
        
        wall3Coords.add(p7);
        wall3Coords.add(p8);
        wall3Coords.add(p4);
        wall3Coords.add(p3);
        
        wall4Coords.add(p8);
        wall4Coords.add(p5);
        wall4Coords.add(p1);
        wall4Coords.add(p4);
    
        
        
        // create tiles to represent room
        Point3f floorArray[] = AListToArray(floorCoords);
        QuadArray floor = new QuadArray(floorArray.length, QuadArray.COORDINATES | QuadArray.COLOR_3);
        
        floor.setCoordinates(0, floorArray);
//        floor.setColor(blue);
//         QuadArray wall1 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall2 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall3 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall4 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         

//         shape.setGeometry(floor);
        ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
        Appearance floorAppear = new Appearance();
        floorAppear.setColoringAttributes(blueFloor);
        // add to objects to branch group
        Shape3D shape = new Shape3D(floor, floorAppear);
        objRoot.addChild(shape);
//         objRoot.addChild(wall1);
//         objRoot.addChild(wall2);
//         objRoot.addChild(wall3);
//         objRoot.addChild(wall4);
        
        
        return objRoot;
    } // end of method

    // convert arraylists to arrays
    private Point3f[] AListToArray(ArrayList in) {
        Point3f[] out = new Point3f[in.size()];
        
        for(int i = 0; i < in.size(); i++) {
            out[i] = (Point3f)in.get(i);
        }
        return out;
    }
    
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3Dv2(), 256, 256);
//         new MyOwn3Dv2();
    }

}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				88
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   method addChile(javax.media.j3d.Shape3D)
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				170831250
			</iTime>
			<fName>
				MyOwn3Dv2.java
			</fName>
			<fSize>
				6302.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;



public class MyOwn3Dv2 extends Applet {

    public MyOwn3Dv2() {
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
        Point3f a1 = new Point3f(-1.5f, -1.5f, -1.5f);
        Point3f a2 = new Point3f(1.5f, -1.5f, -1.5f);
        Point3f a3 = new Point3f(1.5f, 1.5f, -1.5f);
        Point3f a4 = new Point3f(-1.5f, 1.5f, -1.5f);
        
        QuadArray floorCoord = new QuadArray(4, QuadArray.COORDINATES);
        floorCoord.setCoordinate(0, a1);
        floorCoord.setCoordinate(1, a2);
        floorCoord.setCoordinate(2, a3);
        floorCoord.setCoordinate(3, a4);
        
        Point3f b1 = new Point3f(-1.4f, -1.4f, 1.5f);
        Point3f b2 = new Point3f(1.6f, -1.4f, 1.5f);
        Point3f b3 = new Point3f(1.6f, 1.6f, 1.5f);
        Point3f b4 = new Point3f(-1.4f, 1.6f, 1.5f);
        
        QuadArray floorCoord2 = new QuadArray(4, QuadArray.COORDINATES);
        floorCoord2.setCoordinate(0, b1);
        floorCoord2.setCoordinate(1, b2);
        floorCoord2.setCoordinate(2, b3);
        floorCoord2.setCoordinate(3, b4);
        
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
        ColoringAttributes greenFloor = new ColoringAttributes(green, 1);
        ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);

        Appearance fa = new Appearance();
        Appearance fb = new Appearance();

        fa.setColoringAttributes(blueFloor);
        fb.setColoringAttributes(greenFloor);
        
        Shape3D fs3d = new Shape3D(floorCoord, fa);
        Shape3D fs3d2 = new Shape3D(floorCoord, fb);
        
        BranchGroup scene = new BranchGroup();
        scene.addChild(fs3d);
        scene.addChild(fs3d2);
//         scene.compile();
        
        SimpleUniverse su = new SimpleUniverse(c3d);
        su.getViewingPlatform().setNominalViewingTransform();
        su.addBranchGraph(scene);
    } // end of constructor
    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();

        // colours for walls and floor
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
        Color3f medRed = new Color3f(0.8f, 0.4f, 0.3f);
        Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
        Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
         
         // arrays to hold each wall
        ArrayList floorCoords = new ArrayList();
        ArrayList wall1Coords = new ArrayList();
        ArrayList wall2Coords = new ArrayList();
        ArrayList wall3Coords = new ArrayList();
        ArrayList wall4Coords = new ArrayList();
        
        // points for plane dimensions
        Point3f p1 = new Point3f(1.5f, -1.5f, 1.5f);
        Point3f p2 = new Point3f(1.5f, -1.5f, 1.5f);
        Point3f p3 = new Point3f(1.5f, -1.5f, -1.5f);
        Point3f p4 = new Point3f(-1.5f, -1.5f, -1.5f);
        Point3f p5 = new Point3f(-1.5f, 1.5f, 1.5f);
        Point3f p6 = new Point3f(1.5f, 1.5f, 1.5f);
        Point3f p7 = new Point3f(1.5f, 1.5f, -1.5f);
        Point3f p8 = new Point3f(-1.5f, 1.5f, -1.5f);
        
        // create arrays for structures
        
        
        wall1Coords.add(p5);
        wall1Coords.add(p6);
        wall1Coords.add(p2);
        wall1Coords.add(p1);
        
        wall2Coords.add(p6);
        wall2Coords.add(p7);
        wall2Coords.add(p3);
        wall2Coords.add(p2);
        
        wall3Coords.add(p7);
        wall3Coords.add(p8);
        wall3Coords.add(p4);
        wall3Coords.add(p3);
        
        wall4Coords.add(p8);
        wall4Coords.add(p5);
        wall4Coords.add(p1);
        wall4Coords.add(p4);
    
        
        
        // create tiles to represent room
        Point3f floorArray[] = AListToArray(floorCoords);
        QuadArray floor = new QuadArray(floorArray.length, QuadArray.COORDINATES | QuadArray.COLOR_3);
        
        floor.setCoordinates(0, floorArray);
//        floor.setColor(blue);
//         QuadArray wall1 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall2 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall3 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall4 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         

//         shape.setGeometry(floor);
        ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
        Appearance floorAppear = new Appearance();
        floorAppear.setColoringAttributes(blueFloor);
        // add to objects to branch group
        Shape3D shape = new Shape3D(floor, floorAppear);
        objRoot.addChild(shape);
//         objRoot.addChild(wall1);
//         objRoot.addChild(wall2);
//         objRoot.addChild(wall3);
//         objRoot.addChild(wall4);
        
        
        return objRoot;
    } // end of method

    // convert arraylists to arrays
    private Point3f[] AListToArray(ArrayList in) {
        Point3f[] out = new Point3f[in.size()];
        
        for(int i = 0; i < in.size(); i++) {
            out[i] = (Point3f)in.get(i);
        }
        return out;
    }
    
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3Dv2(), 256, 256);
//         new MyOwn3Dv2();
    }

}

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				170892422
			</iTime>
			<fName>
				MyOwn3Dv2.java
			</fName>
			<fSize>
				6305.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;



public class MyOwn3Dv2 extends Applet {

    public MyOwn3Dv2() {
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
        Point3f a1 = new Point3f(-1.5f, -1.5f, -1.5f);
        Point3f a2 = new Point3f(1.5f, -1.5f, -1.5f);
        Point3f a3 = new Point3f(1.5f, 1.5f, -1.5f);
        Point3f a4 = new Point3f(-1.5f, 1.5f, -1.5f);
        
        QuadArray floorCoord = new QuadArray(4, QuadArray.COORDINATES);
        floorCoord.setCoordinate(0, a1);
        floorCoord.setCoordinate(1, a2);
        floorCoord.setCoordinate(2, a3);
        floorCoord.setCoordinate(3, a4);
        
        Point3f b1 = new Point3f(-1.4f, -1.4f, 1.5f);
        Point3f b2 = new Point3f(1.6f, -1.4f, 1.5f);
        Point3f b3 = new Point3f(1.6f, 1.6f, 1.5f);
        Point3f b4 = new Point3f(-1.4f, 1.6f, 1.5f);
        
        QuadArray floorCoord2 = new QuadArray(4, QuadArray.COORDINATES);
        floorCoord2.setCoordinate(0, b1);
        floorCoord2.setCoordinate(1, b2);
        floorCoord2.setCoordinate(2, b3);
        floorCoord2.setCoordinate(3, b4);
        
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
        ColoringAttributes greenFloor = new ColoringAttributes(green, 1);
        ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);

        Appearance fa = new Appearance();
        Appearance fb = new Appearance();

        fa.setColoringAttributes(blueFloor);
        fb.setColoringAttributes(greenFloor);
        
        Shape3D fs3d = new Shape3D(floorCoord, fa);
        Shape3D fs3d2 = new Shape3D(floorCoord, fb);
        
        BranchGroup scene = new BranchGroup();
        scene.addChild(fs3d);
//         scene.addChild(fs3d2);
//         scene.compile();
        
        SimpleUniverse su = new SimpleUniverse(c3d);
        su.getViewingPlatform().setNominalViewingTransform();
        su.addBranchGraph(scene);
    } // end of constructor
    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();

        // colours for walls and floor
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
        Color3f medRed = new Color3f(0.8f, 0.4f, 0.3f);
        Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
        Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
         
         // arrays to hold each wall
        ArrayList floorCoords = new ArrayList();
        ArrayList wall1Coords = new ArrayList();
        ArrayList wall2Coords = new ArrayList();
        ArrayList wall3Coords = new ArrayList();
        ArrayList wall4Coords = new ArrayList();
        
        // points for plane dimensions
        Point3f p1 = new Point3f(1.5f, -1.5f, 1.5f);
        Point3f p2 = new Point3f(1.5f, -1.5f, 1.5f);
        Point3f p3 = new Point3f(1.5f, -1.5f, -1.5f);
        Point3f p4 = new Point3f(-1.5f, -1.5f, -1.5f);
        Point3f p5 = new Point3f(-1.5f, 1.5f, 1.5f);
        Point3f p6 = new Point3f(1.5f, 1.5f, 1.5f);
        Point3f p7 = new Point3f(1.5f, 1.5f, -1.5f);
        Point3f p8 = new Point3f(-1.5f, 1.5f, -1.5f);
        
        // create arrays for structures
        
        
        wall1Coords.add(p5);
        wall1Coords.add(p6);
        wall1Coords.add(p2);
        wall1Coords.add(p1);
        
        wall2Coords.add(p6);
        wall2Coords.add(p7);
        wall2Coords.add(p3);
        wall2Coords.add(p2);
        
        wall3Coords.add(p7);
        wall3Coords.add(p8);
        wall3Coords.add(p4);
        wall3Coords.add(p3);
        
        wall4Coords.add(p8);
        wall4Coords.add(p5);
        wall4Coords.add(p1);
        wall4Coords.add(p4);
    
        
        
        // create tiles to represent room
        Point3f floorArray[] = AListToArray(floorCoords);
        QuadArray floor = new QuadArray(floorArray.length, QuadArray.COORDINATES | QuadArray.COLOR_3);
        
        floor.setCoordinates(0, floorArray);
//        floor.setColor(blue);
//         QuadArray wall1 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall2 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall3 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         QuadArray wall4 = new QuadArray(floorCoords.size(), QuadArray.COORDINATES | QuadArray.COLOR_3);
//         

//         shape.setGeometry(floor);
        ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
        Appearance floorAppear = new Appearance();
        floorAppear.setColoringAttributes(blueFloor);
        // add to objects to branch group
        Shape3D shape = new Shape3D(floor, floorAppear);
        objRoot.addChild(shape);
//         objRoot.addChild(wall1);
//         objRoot.addChild(wall2);
//         objRoot.addChild(wall3);
//         objRoot.addChild(wall4);
        
        
        return objRoot;
    } // end of method

    // convert arraylists to arrays
    private Point3f[] AListToArray(ArrayList in) {
        Point3f[] out = new Point3f[in.size()];
        
        for(int i = 0; i < in.size(); i++) {
            out[i] = (Point3f)in.get(i);
        }
        return out;
    }
    
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3Dv2(), 256, 256);
//         new MyOwn3Dv2();
    }

}

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
</mile>
