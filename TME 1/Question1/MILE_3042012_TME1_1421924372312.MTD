<?xml version="1.0" encoding="UTF-8"?>
<mile>
	<session_info>
		<session_id>
			1421924372312
		</session_id>
		<student_id>
			3042012
		</student_id>
		<assignment>
			TME1
		</assignment>
		<local_path>
			C:\Documents and Settings\Jason Bishop\My Documents\Dropbox\COMP382\TME1\Question1
		</local_path>
	</session_info>
	<session_data>
		<compile_instance>
			<iTime>
				3857641
			</iTime>
			<fName>
				MyOwn3D.java
			</fName>
			<fSize>
				7589.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

// import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;



public class MyOwn3D extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere();   // for environment nodes
    private SimpleUniverse su;
    
    // points for 8 corners of the room
    
    
    public MyOwn3D() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
//         Point3f a1 = new Point3f(-15f, -15f, -15f);
//         Point3f a2 = new Point3f(15f, -15f, -15f);
//         Point3f a3 = new Point3f(15f, 15f, -15f);
//         Point3f a4 = new Point3f(-15f, 15f, -15f);
//         
//         QuadArray floorCoord = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord.setCoordinate(0, a1);
//         floorCoord.setCoordinate(1, a2);
//         floorCoord.setCoordinate(2, a3);
//         floorCoord.setCoordinate(3, a4);
//         
//         Point3f b1 = new Point3f(-15f, -15f, 15f);
//         Point3f b2 = new Point3f(15f, -15f, 15f);
//         Point3f b3 = new Point3f(15f, 15f, 15f);
//         Point3f b4 = new Point3f(-15f, 15f, 15f);
//         
//         QuadArray floorCoord2 = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord2.setCoordinate(0, b1);
//         floorCoord2.setCoordinate(1, b2);
//         floorCoord2.setCoordinate(2, b3);
//         floorCoord2.setCoordinate(3, b4);
//         
//         Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
//         Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
//         ColoringAttributes greenFloor = new ColoringAttributes(green, 1);
//         ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
// 
//         Appearance fa = new Appearance();
//         Appearance fb = new Appearance();
// 
//         fa.setColoringAttributes(blueFloor);
//         fb.setColoringAttributes(greenFloor);
//         
//         Shape3D fs3d = new Shape3D(floorCoord, fa);
//         Shape3D fs3d2 = new Shape3D(floorCoord2, fb);
        
//         BranchGroup scene = new BranchGroup();
        BranchGroup scene = createSceneGraph();
//         scene.addChild(fs3d);
//         scene.addChild(fs3d2);
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        //su.getViewingPlatform().setNominalViewingTransform();
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor

    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();
        
        TransformGroup floor = makeFace("floor", new Color3f(0.0f, 0.1f, 0.4f));    // blue
        TransformGroup ceiling = makeFace("ceiling", new Color3f(0.9f, 0.9f, 0f));  // yellow
        TransformGroup back = makeFace("back", new Color3f(0.0f, 0.5f, 0.1f));      // green
        TransformGroup front = makeFace("front", new Color3f(0.8f, 0.1f, 0.7f));    // purple
        TransformGroup left = makeFace("left", new Color3f(0.8f, 0.3f, 0.2f));      // red
        TransformGroup right = makeFace("right", new Color3f(1.0f, 1.0f, 1.0f));    // white
        
        objRoot.addChild(floor);
        objRoot.addChild(back);
        objRoot.addChild(left);
        objRoot.addChild(right);
        objRoot.addChild(front);
        objRoot.addChild(ceiling);
        
        return objRoot;
    } // end of method

    private TransformGroup makeFace(String face, Color3f faceColor) {
        // create standard Quad
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-15f, 0f, 15f));
        qa.setCoordinate(1, new Point3f(15f, 0f, 15f));
        qa.setCoordinate(2, new Point3f(15f, 0f, -15f));
        qa.setCoordinate(3, new Point3f(-15f, 0f, -15f));
        
        // set color for quad
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        // translate quad to appropriate place for room structure
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.rotX(Math.PI);
                t3d.setTranslation(new Vector3f(0f, 15f, 0f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on x-axis
                break;
            case "left": t3d.rotZ(-Math.PI/2);
                t3d.setTranslation(new Vector3f(-15f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on y-axis
                break;
            case "right": t3d.rotZ(Math.PI/2);
                t3d.setTranslation(new Vector3f(15f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.rotX(-Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, 15f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.rotX(Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, -15f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
        return tg;
    }
    
    
  private void orbitControls(Canvas3D c)
  /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
  {
    OrbitBehavior orbit = 
        new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
    orbit.setSchedulingBounds(bounds);

    ViewingPlatform vp = su.getViewingPlatform();
    vp.setViewPlatformBehavior(orbit);      
  }  // end of orbitControls()



  private void initUserPosition()
  // Set the user's initial viewpoint using lookAt()
  {
    ViewingPlatform vp = su.getViewingPlatform();
    TransformGroup steerTG = vp.getViewPlatformTransform();

    Transform3D t3d = new Transform3D();
    steerTG.getTransform(t3d);

    // args are: viewer posn, where looking, up direction
    t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
    t3d.invert();

    steerTG.setTransform(t3d);
  }  // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3D(), 256, 256);
//         new MyOwn3D();
    }

}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				88
			<iErrLine>
			<iErrMessage>
				')' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				89
			<iErrLine>
			<iErrMessage>
				')' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				90
			<iErrLine>
			<iErrMessage>
				')' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				91
			<iErrLine>
			<iErrMessage>
				')' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				94
			<iErrLine>
			<iErrMessage>
				')' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				95
			<iErrLine>
			<iErrMessage>
				')' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				96
			<iErrLine>
			<iErrMessage>
				')' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				97
			<iErrLine>
			<iErrMessage>
				')' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				100
			<iErrLine>
			<iErrMessage>
				')' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				101
			<iErrLine>
			<iErrMessage>
				')' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				102
			<iErrLine>
			<iErrMessage>
				')' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				103
			<iErrLine>
			<iErrMessage>
				')' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				106
			<iErrLine>
			<iErrMessage>
				')' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				107
			<iErrLine>
			<iErrMessage>
				')' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				108
			<iErrLine>
			<iErrMessage>
				')' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				109
			<iErrLine>
			<iErrMessage>
				')' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				3903328
			</iTime>
			<fName>
				MyOwn3D.java
			</fName>
			<fSize>
				7589.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

// import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;



public class MyOwn3D extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere();   // for environment nodes
    private SimpleUniverse su;
    
    // points for 8 corners of the room
    
    
    public MyOwn3D() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
//         Point3f a1 = new Point3f(-15f, -15f, -15f);
//         Point3f a2 = new Point3f(15f, -15f, -15f);
//         Point3f a3 = new Point3f(15f, 15f, -15f);
//         Point3f a4 = new Point3f(-15f, 15f, -15f);
//         
//         QuadArray floorCoord = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord.setCoordinate(0, a1);
//         floorCoord.setCoordinate(1, a2);
//         floorCoord.setCoordinate(2, a3);
//         floorCoord.setCoordinate(3, a4);
//         
//         Point3f b1 = new Point3f(-15f, -15f, 15f);
//         Point3f b2 = new Point3f(15f, -15f, 15f);
//         Point3f b3 = new Point3f(15f, 15f, 15f);
//         Point3f b4 = new Point3f(-15f, 15f, 15f);
//         
//         QuadArray floorCoord2 = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord2.setCoordinate(0, b1);
//         floorCoord2.setCoordinate(1, b2);
//         floorCoord2.setCoordinate(2, b3);
//         floorCoord2.setCoordinate(3, b4);
//         
//         Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
//         Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
//         ColoringAttributes greenFloor = new ColoringAttributes(green, 1);
//         ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
// 
//         Appearance fa = new Appearance();
//         Appearance fb = new Appearance();
// 
//         fa.setColoringAttributes(blueFloor);
//         fb.setColoringAttributes(greenFloor);
//         
//         Shape3D fs3d = new Shape3D(floorCoord, fa);
//         Shape3D fs3d2 = new Shape3D(floorCoord2, fb);
        
//         BranchGroup scene = new BranchGroup();
        BranchGroup scene = createSceneGraph();
//         scene.addChild(fs3d);
//         scene.addChild(fs3d2);
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        //su.getViewingPlatform().setNominalViewingTransform();
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor

    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();
        
        TransformGroup floor = makeFace("floor", new Color3f(0.0f, 0.1f, 0.4f));    // blue
        TransformGroup ceiling = makeFace("ceiling", new Color3f(0.9f, 0.9f, 0f));  // yellow
        TransformGroup back = makeFace("back", new Color3f(0.0f, 0.5f, 0.1f));      // green
        TransformGroup front = makeFace("front", new Color3f(0.8f, 0.1f, 0.7f));    // purple
        TransformGroup left = makeFace("left", new Color3f(0.8f, 0.3f, 0.2f));      // red
        TransformGroup right = makeFace("right", new Color3f(1.0f, 1.0f, 1.0f));    // white
        
        objRoot.addChild(floor);
        objRoot.addChild(back);
        objRoot.addChild(left);
        objRoot.addChild(right);
        objRoot.addChild(front);
        objRoot.addChild(ceiling);
        
        return objRoot;
    } // end of method

    private TransformGroup makeFace(String face, Color3f faceColor) {
        // create standard Quad
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-15f, 0f, 15f));
        qa.setCoordinate(1, new Point3f(15f, 0f, 15f));
        qa.setCoordinate(2, new Point3f(15f, 0f, -15f));
        qa.setCoordinate(3, new Point3f(-15f, 0f, -15f));
        
        // set color for quad
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        // translate quad to appropriate place for room structure
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.rotX(Math.PI);
                t3d.setTranslation(new Vector3f(0f, 15f, 0f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on x-axis
                break;
            case "left": t3d.rotZ(-Math.PI/2);
                t3d.setTranslation(new Vector3f(-15f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on y-axis
                break;
            case "right": t3d.rotZ(Math.PI/2);
                t3d.setTranslation(new Vector3f(15f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.rotX(-Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, 15f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.rotX(Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, -15f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
        return tg;
    }
    
    
  private void orbitControls(Canvas3D c)
  /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
  {
    OrbitBehavior orbit = 
        new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
    orbit.setSchedulingBounds(bounds);

    ViewingPlatform vp = su.getViewingPlatform();
    vp.setViewPlatformBehavior(orbit);      
  }  // end of orbitControls()



  private void initUserPosition()
  // Set the user's initial viewpoint using lookAt()
  {
    ViewingPlatform vp = su.getViewingPlatform();
    TransformGroup steerTG = vp.getViewPlatformTransform();

    Transform3D t3d = new Transform3D();
    steerTG.getTransform(t3d);

    // args are: viewer posn, where looking, up direction
    t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
    t3d.invert();

    steerTG.setTransform(t3d);
  }  // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3D(), 256, 256);
//         new MyOwn3D();
    }

}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				88
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   method newPoint3f()
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				89
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   method newPoint3f()
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				90
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   method newPoint3f()
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				91
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   method newPoint3f()
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				94
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   method newPoint3f()
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				95
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   method newPoint3f()
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				96
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   method newPoint3f()
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				97
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   method newPoint3f()
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				100
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   method newPoint3f()
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				101
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   method newPoint3f()
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				102
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   method newPoint3f()
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				103
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   method newPoint3f()
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				106
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   method newPoint3f()
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				107
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   method newPoint3f()
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				108
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   method newPoint3f()
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				109
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   method newPoint3f()
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				111
			<iErrLine>
			<iErrMessage>
				method addChild in class javax.media.j3d.Group cannot be applied to given types;
  required: javax.media.j3d.Node
  found: javax.media.j3d.QuadArray
  reason: actual argument javax.media.j3d.QuadArray cannot be converted to javax.media.j3d.Node by method invocation conversion
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				3924984
			</iTime>
			<fName>
				MyOwn3D.java
			</fName>
			<fSize>
				7589.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

// import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;



public class MyOwn3D extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere();   // for environment nodes
    private SimpleUniverse su;
    
    // points for 8 corners of the room
    
    
    public MyOwn3D() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
//         Point3f a1 = new Point3f(-15f, -15f, -15f);
//         Point3f a2 = new Point3f(15f, -15f, -15f);
//         Point3f a3 = new Point3f(15f, 15f, -15f);
//         Point3f a4 = new Point3f(-15f, 15f, -15f);
//         
//         QuadArray floorCoord = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord.setCoordinate(0, a1);
//         floorCoord.setCoordinate(1, a2);
//         floorCoord.setCoordinate(2, a3);
//         floorCoord.setCoordinate(3, a4);
//         
//         Point3f b1 = new Point3f(-15f, -15f, 15f);
//         Point3f b2 = new Point3f(15f, -15f, 15f);
//         Point3f b3 = new Point3f(15f, 15f, 15f);
//         Point3f b4 = new Point3f(-15f, 15f, 15f);
//         
//         QuadArray floorCoord2 = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord2.setCoordinate(0, b1);
//         floorCoord2.setCoordinate(1, b2);
//         floorCoord2.setCoordinate(2, b3);
//         floorCoord2.setCoordinate(3, b4);
//         
//         Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
//         Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
//         ColoringAttributes greenFloor = new ColoringAttributes(green, 1);
//         ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
// 
//         Appearance fa = new Appearance();
//         Appearance fb = new Appearance();
// 
//         fa.setColoringAttributes(blueFloor);
//         fb.setColoringAttributes(greenFloor);
//         
//         Shape3D fs3d = new Shape3D(floorCoord, fa);
//         Shape3D fs3d2 = new Shape3D(floorCoord2, fb);
        
//         BranchGroup scene = new BranchGroup();
        BranchGroup scene = createSceneGraph();
//         scene.addChild(fs3d);
//         scene.addChild(fs3d2);
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        //su.getViewingPlatform().setNominalViewingTransform();
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor

    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();
        
        TransformGroup floor = makeFace("floor", new Color3f(0.0f, 0.1f, 0.4f));    // blue
        TransformGroup ceiling = makeFace("ceiling", new Color3f(0.9f, 0.9f, 0f));  // yellow
        TransformGroup back = makeFace("back", new Color3f(0.0f, 0.5f, 0.1f));      // green
        TransformGroup front = makeFace("front", new Color3f(0.8f, 0.1f, 0.7f));    // purple
        TransformGroup left = makeFace("left", new Color3f(0.8f, 0.3f, 0.2f));      // red
        TransformGroup right = makeFace("right", new Color3f(1.0f, 1.0f, 1.0f));    // white
        
        objRoot.addChild(floor);
        objRoot.addChild(back);
        objRoot.addChild(left);
        objRoot.addChild(right);
        objRoot.addChild(front);
        objRoot.addChild(ceiling);
        
        return objRoot;
    } // end of method

    private TransformGroup makeFace(String face, Color3f faceColor) {
        // create standard Quad
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-15f, 0f, 15f));
        qa.setCoordinate(1, new Point3f(15f, 0f, 15f));
        qa.setCoordinate(2, new Point3f(15f, 0f, -15f));
        qa.setCoordinate(3, new Point3f(-15f, 0f, -15f));
        
        // set color for quad
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        // translate quad to appropriate place for room structure
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.rotX(Math.PI);
                t3d.setTranslation(new Vector3f(0f, 15f, 0f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on x-axis
                break;
            case "left": t3d.rotZ(-Math.PI/2);
                t3d.setTranslation(new Vector3f(-15f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on y-axis
                break;
            case "right": t3d.rotZ(Math.PI/2);
                t3d.setTranslation(new Vector3f(15f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.rotX(-Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, 15f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.rotX(Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, -15f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
        return tg;
    }
    
    
  private void orbitControls(Canvas3D c)
  /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
  {
    OrbitBehavior orbit = 
        new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
    orbit.setSchedulingBounds(bounds);

    ViewingPlatform vp = su.getViewingPlatform();
    vp.setViewPlatformBehavior(orbit);      
  }  // end of orbitControls()



  private void initUserPosition()
  // Set the user's initial viewpoint using lookAt()
  {
    ViewingPlatform vp = su.getViewingPlatform();
    TransformGroup steerTG = vp.getViewPlatformTransform();

    Transform3D t3d = new Transform3D();
    steerTG.getTransform(t3d);

    // args are: viewer posn, where looking, up direction
    t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
    t3d.invert();

    steerTG.setTransform(t3d);
  }  // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3D(), 256, 256);
//         new MyOwn3D();
    }

}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				88
			<iErrLine>
			<iErrMessage>
				'void' type not allowed here
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				89
			<iErrLine>
			<iErrMessage>
				'void' type not allowed here
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				90
			<iErrLine>
			<iErrMessage>
				'void' type not allowed here
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				91
			<iErrLine>
			<iErrMessage>
				'void' type not allowed here
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				94
			<iErrLine>
			<iErrMessage>
				'void' type not allowed here
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				95
			<iErrLine>
			<iErrMessage>
				'void' type not allowed here
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				96
			<iErrLine>
			<iErrMessage>
				'void' type not allowed here
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				97
			<iErrLine>
			<iErrMessage>
				'void' type not allowed here
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				100
			<iErrLine>
			<iErrMessage>
				'void' type not allowed here
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				101
			<iErrLine>
			<iErrMessage>
				'void' type not allowed here
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				102
			<iErrLine>
			<iErrMessage>
				'void' type not allowed here
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				103
			<iErrLine>
			<iErrMessage>
				'void' type not allowed here
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				106
			<iErrLine>
			<iErrMessage>
				'void' type not allowed here
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				107
			<iErrLine>
			<iErrMessage>
				'void' type not allowed here
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				108
			<iErrLine>
			<iErrMessage>
				'void' type not allowed here
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				109
			<iErrLine>
			<iErrMessage>
				'void' type not allowed here
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				111
			<iErrLine>
			<iErrMessage>
				method addChild in class javax.media.j3d.Group cannot be applied to given types;
  required: javax.media.j3d.Node
  found: javax.media.j3d.QuadArray
  reason: actual argument javax.media.j3d.QuadArray cannot be converted to javax.media.j3d.Node by method invocation conversion
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				4018875
			</iTime>
			<fName>
				MyOwn3D.java
			</fName>
			<fSize>
				7589.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

// import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;



public class MyOwn3D extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere();   // for environment nodes
    private SimpleUniverse su;
    
    // points for 8 corners of the room
    
    
    public MyOwn3D() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
//         Point3f a1 = new Point3f(-15f, -15f, -15f);
//         Point3f a2 = new Point3f(15f, -15f, -15f);
//         Point3f a3 = new Point3f(15f, 15f, -15f);
//         Point3f a4 = new Point3f(-15f, 15f, -15f);
//         
//         QuadArray floorCoord = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord.setCoordinate(0, a1);
//         floorCoord.setCoordinate(1, a2);
//         floorCoord.setCoordinate(2, a3);
//         floorCoord.setCoordinate(3, a4);
//         
//         Point3f b1 = new Point3f(-15f, -15f, 15f);
//         Point3f b2 = new Point3f(15f, -15f, 15f);
//         Point3f b3 = new Point3f(15f, 15f, 15f);
//         Point3f b4 = new Point3f(-15f, 15f, 15f);
//         
//         QuadArray floorCoord2 = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord2.setCoordinate(0, b1);
//         floorCoord2.setCoordinate(1, b2);
//         floorCoord2.setCoordinate(2, b3);
//         floorCoord2.setCoordinate(3, b4);
//         
//         Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
//         Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
//         ColoringAttributes greenFloor = new ColoringAttributes(green, 1);
//         ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
// 
//         Appearance fa = new Appearance();
//         Appearance fb = new Appearance();
// 
//         fa.setColoringAttributes(blueFloor);
//         fb.setColoringAttributes(greenFloor);
//         
//         Shape3D fs3d = new Shape3D(floorCoord, fa);
//         Shape3D fs3d2 = new Shape3D(floorCoord2, fb);
        
//         BranchGroup scene = new BranchGroup();
        BranchGroup scene = createSceneGraph();
//         scene.addChild(fs3d);
//         scene.addChild(fs3d2);
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        //su.getViewingPlatform().setNominalViewingTransform();
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor

    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();
        
        TransformGroup floor = makeFace("floor", new Color3f(0.0f, 0.1f, 0.4f));    // blue
        TransformGroup ceiling = makeFace("ceiling", new Color3f(0.9f, 0.9f, 0f));  // yellow
        TransformGroup back = makeFace("back", new Color3f(0.0f, 0.5f, 0.1f));      // green
        TransformGroup front = makeFace("front", new Color3f(0.8f, 0.1f, 0.7f));    // purple
        TransformGroup left = makeFace("left", new Color3f(0.8f, 0.3f, 0.2f));      // red
        TransformGroup right = makeFace("right", new Color3f(1.0f, 1.0f, 1.0f));    // white
        
        objRoot.addChild(floor);
        objRoot.addChild(back);
        objRoot.addChild(left);
        objRoot.addChild(right);
        objRoot.addChild(front);
        objRoot.addChild(ceiling);
        
        return objRoot;
    } // end of method

    private TransformGroup makeFace(String face, Color3f faceColor) {
        // create standard Quad
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-15f, 0f, 15f));
        qa.setCoordinate(1, new Point3f(15f, 0f, 15f));
        qa.setCoordinate(2, new Point3f(15f, 0f, -15f));
        qa.setCoordinate(3, new Point3f(-15f, 0f, -15f));
        
        // set color for quad
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        // translate quad to appropriate place for room structure
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.rotX(Math.PI);
                t3d.setTranslation(new Vector3f(0f, 15f, 0f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on x-axis
                break;
            case "left": t3d.rotZ(-Math.PI/2);
                t3d.setTranslation(new Vector3f(-15f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on y-axis
                break;
            case "right": t3d.rotZ(Math.PI/2);
                t3d.setTranslation(new Vector3f(15f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.rotX(-Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, 15f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.rotX(Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, -15f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
        return tg;
    }
    
    
  private void orbitControls(Canvas3D c)
  /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
  {
    OrbitBehavior orbit = 
        new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
    orbit.setSchedulingBounds(bounds);

    ViewingPlatform vp = su.getViewingPlatform();
    vp.setViewPlatformBehavior(orbit);      
  }  // end of orbitControls()



  private void initUserPosition()
  // Set the user's initial viewpoint using lookAt()
  {
    ViewingPlatform vp = su.getViewingPlatform();
    TransformGroup steerTG = vp.getViewPlatformTransform();

    Transform3D t3d = new Transform3D();
    steerTG.getTransform(t3d);

    // args are: viewer posn, where looking, up direction
    t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
    t3d.invert();

    steerTG.setTransform(t3d);
  }  // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3D(), 256, 256);
//         new MyOwn3D();
    }

}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				88
			<iErrLine>
			<iErrMessage>
				')' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				4029469
			</iTime>
			<fName>
				MyOwn3D.java
			</fName>
			<fSize>
				7589.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

// import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;



public class MyOwn3D extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere();   // for environment nodes
    private SimpleUniverse su;
    
    // points for 8 corners of the room
    
    
    public MyOwn3D() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
//         Point3f a1 = new Point3f(-15f, -15f, -15f);
//         Point3f a2 = new Point3f(15f, -15f, -15f);
//         Point3f a3 = new Point3f(15f, 15f, -15f);
//         Point3f a4 = new Point3f(-15f, 15f, -15f);
//         
//         QuadArray floorCoord = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord.setCoordinate(0, a1);
//         floorCoord.setCoordinate(1, a2);
//         floorCoord.setCoordinate(2, a3);
//         floorCoord.setCoordinate(3, a4);
//         
//         Point3f b1 = new Point3f(-15f, -15f, 15f);
//         Point3f b2 = new Point3f(15f, -15f, 15f);
//         Point3f b3 = new Point3f(15f, 15f, 15f);
//         Point3f b4 = new Point3f(-15f, 15f, 15f);
//         
//         QuadArray floorCoord2 = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord2.setCoordinate(0, b1);
//         floorCoord2.setCoordinate(1, b2);
//         floorCoord2.setCoordinate(2, b3);
//         floorCoord2.setCoordinate(3, b4);
//         
//         Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
//         Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
//         ColoringAttributes greenFloor = new ColoringAttributes(green, 1);
//         ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
// 
//         Appearance fa = new Appearance();
//         Appearance fb = new Appearance();
// 
//         fa.setColoringAttributes(blueFloor);
//         fb.setColoringAttributes(greenFloor);
//         
//         Shape3D fs3d = new Shape3D(floorCoord, fa);
//         Shape3D fs3d2 = new Shape3D(floorCoord2, fb);
        
//         BranchGroup scene = new BranchGroup();
        BranchGroup scene = createSceneGraph();
//         scene.addChild(fs3d);
//         scene.addChild(fs3d2);
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        //su.getViewingPlatform().setNominalViewingTransform();
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor

    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();
        
        TransformGroup floor = makeFace("floor", new Color3f(0.0f, 0.1f, 0.4f));    // blue
        TransformGroup ceiling = makeFace("ceiling", new Color3f(0.9f, 0.9f, 0f));  // yellow
        TransformGroup back = makeFace("back", new Color3f(0.0f, 0.5f, 0.1f));      // green
        TransformGroup front = makeFace("front", new Color3f(0.8f, 0.1f, 0.7f));    // purple
        TransformGroup left = makeFace("left", new Color3f(0.8f, 0.3f, 0.2f));      // red
        TransformGroup right = makeFace("right", new Color3f(1.0f, 1.0f, 1.0f));    // white
        
        objRoot.addChild(floor);
        objRoot.addChild(back);
        objRoot.addChild(left);
        objRoot.addChild(right);
        objRoot.addChild(front);
        objRoot.addChild(ceiling);
        
        return objRoot;
    } // end of method

    private TransformGroup makeFace(String face, Color3f faceColor) {
        // create standard Quad
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-15f, 0f, 15f));
        qa.setCoordinate(1, new Point3f(15f, 0f, 15f));
        qa.setCoordinate(2, new Point3f(15f, 0f, -15f));
        qa.setCoordinate(3, new Point3f(-15f, 0f, -15f));
        
        // set color for quad
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        // translate quad to appropriate place for room structure
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.rotX(Math.PI);
                t3d.setTranslation(new Vector3f(0f, 15f, 0f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on x-axis
                break;
            case "left": t3d.rotZ(-Math.PI/2);
                t3d.setTranslation(new Vector3f(-15f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on y-axis
                break;
            case "right": t3d.rotZ(Math.PI/2);
                t3d.setTranslation(new Vector3f(15f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.rotX(-Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, 15f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.rotX(Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, -15f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
        return tg;
    }
    
    
  private void orbitControls(Canvas3D c)
  /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
  {
    OrbitBehavior orbit = 
        new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
    orbit.setSchedulingBounds(bounds);

    ViewingPlatform vp = su.getViewingPlatform();
    vp.setViewPlatformBehavior(orbit);      
  }  // end of orbitControls()



  private void initUserPosition()
  // Set the user's initial viewpoint using lookAt()
  {
    ViewingPlatform vp = su.getViewingPlatform();
    TransformGroup steerTG = vp.getViewPlatformTransform();

    Transform3D t3d = new Transform3D();
    steerTG.getTransform(t3d);

    // args are: viewer posn, where looking, up direction
    t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
    t3d.invert();

    steerTG.setTransform(t3d);
  }  // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3D(), 256, 256);
//         new MyOwn3D();
    }

}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				88
			<iErrLine>
			<iErrMessage>
				no suitable method found for getCoordinate(int,int,javax.vecmath.Point3f)
    method javax.media.j3d.GeometryArray.getCoordinate(int,javax.vecmath.Point3d) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.GeometryArray.getCoordinate(int,javax.vecmath.Point3f) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.GeometryArray.getCoordinate(int,double[]) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.GeometryArray.getCoordinate(int,float[]) is not applicable
      (actual and formal argument lists differ in length)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				89
			<iErrLine>
			<iErrMessage>
				'void' type not allowed here
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				90
			<iErrLine>
			<iErrMessage>
				'void' type not allowed here
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				91
			<iErrLine>
			<iErrMessage>
				'void' type not allowed here
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				94
			<iErrLine>
			<iErrMessage>
				'void' type not allowed here
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				95
			<iErrLine>
			<iErrMessage>
				'void' type not allowed here
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				96
			<iErrLine>
			<iErrMessage>
				'void' type not allowed here
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				97
			<iErrLine>
			<iErrMessage>
				'void' type not allowed here
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				100
			<iErrLine>
			<iErrMessage>
				'void' type not allowed here
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				101
			<iErrLine>
			<iErrMessage>
				'void' type not allowed here
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				102
			<iErrLine>
			<iErrMessage>
				'void' type not allowed here
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				103
			<iErrLine>
			<iErrMessage>
				'void' type not allowed here
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				106
			<iErrLine>
			<iErrMessage>
				'void' type not allowed here
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				107
			<iErrLine>
			<iErrMessage>
				'void' type not allowed here
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				108
			<iErrLine>
			<iErrMessage>
				'void' type not allowed here
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				109
			<iErrLine>
			<iErrMessage>
				'void' type not allowed here
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				111
			<iErrLine>
			<iErrMessage>
				method addChild in class javax.media.j3d.Group cannot be applied to given types;
  required: javax.media.j3d.Node
  found: javax.media.j3d.QuadArray
  reason: actual argument javax.media.j3d.QuadArray cannot be converted to javax.media.j3d.Node by method invocation conversion
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				4044156
			</iTime>
			<fName>
				MyOwn3D.java
			</fName>
			<fSize>
				7589.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

// import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;



public class MyOwn3D extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere();   // for environment nodes
    private SimpleUniverse su;
    
    // points for 8 corners of the room
    
    
    public MyOwn3D() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
//         Point3f a1 = new Point3f(-15f, -15f, -15f);
//         Point3f a2 = new Point3f(15f, -15f, -15f);
//         Point3f a3 = new Point3f(15f, 15f, -15f);
//         Point3f a4 = new Point3f(-15f, 15f, -15f);
//         
//         QuadArray floorCoord = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord.setCoordinate(0, a1);
//         floorCoord.setCoordinate(1, a2);
//         floorCoord.setCoordinate(2, a3);
//         floorCoord.setCoordinate(3, a4);
//         
//         Point3f b1 = new Point3f(-15f, -15f, 15f);
//         Point3f b2 = new Point3f(15f, -15f, 15f);
//         Point3f b3 = new Point3f(15f, 15f, 15f);
//         Point3f b4 = new Point3f(-15f, 15f, 15f);
//         
//         QuadArray floorCoord2 = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord2.setCoordinate(0, b1);
//         floorCoord2.setCoordinate(1, b2);
//         floorCoord2.setCoordinate(2, b3);
//         floorCoord2.setCoordinate(3, b4);
//         
//         Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
//         Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
//         ColoringAttributes greenFloor = new ColoringAttributes(green, 1);
//         ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
// 
//         Appearance fa = new Appearance();
//         Appearance fb = new Appearance();
// 
//         fa.setColoringAttributes(blueFloor);
//         fb.setColoringAttributes(greenFloor);
//         
//         Shape3D fs3d = new Shape3D(floorCoord, fa);
//         Shape3D fs3d2 = new Shape3D(floorCoord2, fb);
        
//         BranchGroup scene = new BranchGroup();
        BranchGroup scene = createSceneGraph();
//         scene.addChild(fs3d);
//         scene.addChild(fs3d2);
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        //su.getViewingPlatform().setNominalViewingTransform();
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor

    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();
        
        TransformGroup floor = makeFace("floor", new Color3f(0.0f, 0.1f, 0.4f));    // blue
        TransformGroup ceiling = makeFace("ceiling", new Color3f(0.9f, 0.9f, 0f));  // yellow
        TransformGroup back = makeFace("back", new Color3f(0.0f, 0.5f, 0.1f));      // green
        TransformGroup front = makeFace("front", new Color3f(0.8f, 0.1f, 0.7f));    // purple
        TransformGroup left = makeFace("left", new Color3f(0.8f, 0.3f, 0.2f));      // red
        TransformGroup right = makeFace("right", new Color3f(1.0f, 1.0f, 1.0f));    // white
        
        objRoot.addChild(floor);
        objRoot.addChild(back);
        objRoot.addChild(left);
        objRoot.addChild(right);
        objRoot.addChild(front);
        objRoot.addChild(ceiling);
        
        return objRoot;
    } // end of method

    private TransformGroup makeFace(String face, Color3f faceColor) {
        // create standard Quad
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-15f, 0f, 15f));
        qa.setCoordinate(1, new Point3f(15f, 0f, 15f));
        qa.setCoordinate(2, new Point3f(15f, 0f, -15f));
        qa.setCoordinate(3, new Point3f(-15f, 0f, -15f));
        
        // set color for quad
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        // translate quad to appropriate place for room structure
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.rotX(Math.PI);
                t3d.setTranslation(new Vector3f(0f, 15f, 0f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on x-axis
                break;
            case "left": t3d.rotZ(-Math.PI/2);
                t3d.setTranslation(new Vector3f(-15f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on y-axis
                break;
            case "right": t3d.rotZ(Math.PI/2);
                t3d.setTranslation(new Vector3f(15f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.rotX(-Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, 15f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.rotX(Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, -15f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
        return tg;
    }
    
    
  private void orbitControls(Canvas3D c)
  /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
  {
    OrbitBehavior orbit = 
        new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
    orbit.setSchedulingBounds(bounds);

    ViewingPlatform vp = su.getViewingPlatform();
    vp.setViewPlatformBehavior(orbit);      
  }  // end of orbitControls()



  private void initUserPosition()
  // Set the user's initial viewpoint using lookAt()
  {
    ViewingPlatform vp = su.getViewingPlatform();
    TransformGroup steerTG = vp.getViewPlatformTransform();

    Transform3D t3d = new Transform3D();
    steerTG.getTransform(t3d);

    // args are: viewer posn, where looking, up direction
    t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
    t3d.invert();

    steerTG.setTransform(t3d);
  }  // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3D(), 256, 256);
//         new MyOwn3D();
    }

}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				88
			<iErrLine>
			<iErrMessage>
				'void' type not allowed here
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				89
			<iErrLine>
			<iErrMessage>
				'void' type not allowed here
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				90
			<iErrLine>
			<iErrMessage>
				'void' type not allowed here
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				91
			<iErrLine>
			<iErrMessage>
				'void' type not allowed here
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				94
			<iErrLine>
			<iErrMessage>
				'void' type not allowed here
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				95
			<iErrLine>
			<iErrMessage>
				'void' type not allowed here
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				96
			<iErrLine>
			<iErrMessage>
				'void' type not allowed here
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				97
			<iErrLine>
			<iErrMessage>
				'void' type not allowed here
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				100
			<iErrLine>
			<iErrMessage>
				'void' type not allowed here
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				101
			<iErrLine>
			<iErrMessage>
				'void' type not allowed here
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				102
			<iErrLine>
			<iErrMessage>
				'void' type not allowed here
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				103
			<iErrLine>
			<iErrMessage>
				'void' type not allowed here
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				106
			<iErrLine>
			<iErrMessage>
				'void' type not allowed here
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				107
			<iErrLine>
			<iErrMessage>
				'void' type not allowed here
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				108
			<iErrLine>
			<iErrMessage>
				'void' type not allowed here
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				109
			<iErrLine>
			<iErrMessage>
				'void' type not allowed here
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				111
			<iErrLine>
			<iErrMessage>
				method addChild in class javax.media.j3d.Group cannot be applied to given types;
  required: javax.media.j3d.Node
  found: javax.media.j3d.QuadArray
  reason: actual argument javax.media.j3d.QuadArray cannot be converted to javax.media.j3d.Node by method invocation conversion
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				6919766
			</iTime>
			<fName>
				MyOwn3D.java
			</fName>
			<fSize>
				8864.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

// import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;



public class MyOwn3D extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere();   // for environment nodes
    private SimpleUniverse su;
    
    // points for 8 corners of the room
    
    
    public MyOwn3D() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
//         Point3f a1 = new Point3f(-15f, -15f, -15f);
//         Point3f a2 = new Point3f(15f, -15f, -15f);
//         Point3f a3 = new Point3f(15f, 15f, -15f);
//         Point3f a4 = new Point3f(-15f, 15f, -15f);
//         
//         QuadArray floorCoord = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord.setCoordinate(0, a1);
//         floorCoord.setCoordinate(1, a2);
//         floorCoord.setCoordinate(2, a3);
//         floorCoord.setCoordinate(3, a4);
//         
//         Point3f b1 = new Point3f(-15f, -15f, 15f);
//         Point3f b2 = new Point3f(15f, -15f, 15f);
//         Point3f b3 = new Point3f(15f, 15f, 15f);
//         Point3f b4 = new Point3f(-15f, 15f, 15f);
//         
//         QuadArray floorCoord2 = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord2.setCoordinate(0, b1);
//         floorCoord2.setCoordinate(1, b2);
//         floorCoord2.setCoordinate(2, b3);
//         floorCoord2.setCoordinate(3, b4);
//         
//         Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
//         Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
//         ColoringAttributes greenFloor = new ColoringAttributes(green, 1);
//         ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
// 
//         Appearance fa = new Appearance();
//         Appearance fb = new Appearance();
// 
//         fa.setColoringAttributes(blueFloor);
//         fb.setColoringAttributes(greenFloor);
//         
//         Shape3D fs3d = new Shape3D(floorCoord, fa);
//         Shape3D fs3d2 = new Shape3D(floorCoord2, fb);
        
//         BranchGroup scene = new BranchGroup();
        BranchGroup scene = createSceneGraph();
//         scene.addChild(fs3d);
//         scene.addChild(fs3d2);
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        //su.getViewingPlatform().setNominalViewingTransform();
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor

    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();
        
        TransformGroup floor = makeFace("floor", new Color3f(0.0f, 0.1f, 0.4f));    // blue
        TransformGroup ceiling = makeFace("ceiling", new Color3f(0.9f, 0.9f, 0f));  // yellow
        TransformGroup back = makeFace("back", new Color3f(0.0f, 0.5f, 0.1f));      // green
        TransformGroup front = makeFace("front", new Color3f(0.8f, 0.1f, 0.7f));    // purple
        TransformGroup left = makeFace("left", new Color3f(0.8f, 0.3f, 0.2f));      // red
        TransformGroup right = makeFace("right", new Color3f(1.0f, 1.0f, 1.0f));    // white
        
        Shape3d grid = makeGrid();
        
        objRoot.addChild(floor);
        objRoot.addChild(back);
        objRoot.addChild(left);
        objRoot.addChild(right);
        objRoot.addChild(front);
        objRoot.addChild(ceiling);
        objRoot.addChild(grid);
        
        return objRoot;
    } // end of method

    private TransformGroup makeFace(String face, Color3f faceColor) {
        // create standard Quad
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-15f, 0f, 15f));
        qa.setCoordinate(1, new Point3f(15f, 0f, 15f));
        qa.setCoordinate(2, new Point3f(15f, 0f, -15f));
        qa.setCoordinate(3, new Point3f(-15f, 0f, -15f));
        
        // set color for quad
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        // translate quad to appropriate place for room structure
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.rotX(Math.PI);
                t3d.setTranslation(new Vector3f(0f, 15f, 0f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on x-axis
                break;
            case "left": t3d.rotZ(-Math.PI/2);
                t3d.setTranslation(new Vector3f(-15f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on y-axis
                break;
            case "right": t3d.rotZ(Math.PI/2);
                t3d.setTranslation(new Vector3f(15f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.rotX(-Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, 15f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.rotX(Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, -15f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
        return tg;
    }
    
    // makes lines to divide constructed area into 3x3 grid for each side
    private Shape3D makeGrid() {
        
        // set up coords
        Point3f gridCoords = new Point3f[32];
        gridCoords[0] = (-15f, 15f, 15f);
        gridCoords[1] = (15f, 15f, 15f);
        gridCoords[2] = (15f, -15f, 15f);
        gridCoords[3] = (-15f, -15f, 15f);
        
        Point3f adjust = new Point3f(0, 0, -15);
        for (int i = 4; i < gridCoords.size() / 2; i++) {
            gridCoords[i] = (gridCoords[i - 4] + adjust);
        }
        
        gridCoords[16] = (gridCoords[1]);
        gridCoords[17] = (gridCoords[13]);
        gridCoords[18] = (gridCoords[14]);
        gridCoords[19] = (gridCoords[2]);
        
        adjust = new Point3f(-15, 0, 0);
        for (int i = 20; i < gridCoords.size(); i++) {
            gridCoords[i] = (gridCoords[i - 4] + adjust);
        }
        
        // create line array object
        LineArray grid = new LineArray(32, LineArray.COORDINATES);
        for (int i = 0; i < gridCoords.size(); i++) {
            grid.setCoordinate(i, gridCoords[i]);
        }
        
        return new Shape3D(LineArray);
        // return shape 3d

    }
    
  private void orbitControls(Canvas3D c)
  /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
  {
    OrbitBehavior orbit = 
        new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
    orbit.setSchedulingBounds(bounds);

    ViewingPlatform vp = su.getViewingPlatform();
    vp.setViewPlatformBehavior(orbit);      
  }  // end of orbitControls()



  private void initUserPosition()
  // Set the user's initial viewpoint using lookAt()
  {
    ViewingPlatform vp = su.getViewingPlatform();
    TransformGroup steerTG = vp.getViewPlatformTransform();

    Transform3D t3d = new Transform3D();
    steerTG.getTransform(t3d);

    // args are: viewer posn, where looking, up direction
    t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
    t3d.invert();

    steerTG.setTransform(t3d);
  }  // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3D(), 256, 256);
//         new MyOwn3D();
    }

}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				193
			<iErrLine>
			<iErrMessage>
				')' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				193
			<iErrLine>
			<iErrMessage>
				not a statement
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				193
			<iErrLine>
			<iErrMessage>
				';' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				194
			<iErrLine>
			<iErrMessage>
				')' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				194
			<iErrLine>
			<iErrMessage>
				not a statement
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				194
			<iErrLine>
			<iErrMessage>
				';' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				195
			<iErrLine>
			<iErrMessage>
				')' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				195
			<iErrLine>
			<iErrMessage>
				not a statement
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				195
			<iErrLine>
			<iErrMessage>
				';' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				196
			<iErrLine>
			<iErrMessage>
				')' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				196
			<iErrLine>
			<iErrMessage>
				not a statement
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				196
			<iErrLine>
			<iErrMessage>
				';' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				7035422
			</iTime>
			<fName>
				MyOwn3D.java
			</fName>
			<fSize>
				8974.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

// import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;



public class MyOwn3D extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere();   // for environment nodes
    private SimpleUniverse su;
    
    // points for 8 corners of the room
    
    
    public MyOwn3D() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
//         Point3f a1 = new Point3f(-15f, -15f, -15f);
//         Point3f a2 = new Point3f(15f, -15f, -15f);
//         Point3f a3 = new Point3f(15f, 15f, -15f);
//         Point3f a4 = new Point3f(-15f, 15f, -15f);
//         
//         QuadArray floorCoord = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord.setCoordinate(0, a1);
//         floorCoord.setCoordinate(1, a2);
//         floorCoord.setCoordinate(2, a3);
//         floorCoord.setCoordinate(3, a4);
//         
//         Point3f b1 = new Point3f(-15f, -15f, 15f);
//         Point3f b2 = new Point3f(15f, -15f, 15f);
//         Point3f b3 = new Point3f(15f, 15f, 15f);
//         Point3f b4 = new Point3f(-15f, 15f, 15f);
//         
//         QuadArray floorCoord2 = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord2.setCoordinate(0, b1);
//         floorCoord2.setCoordinate(1, b2);
//         floorCoord2.setCoordinate(2, b3);
//         floorCoord2.setCoordinate(3, b4);
//         
//         Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
//         Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
//         ColoringAttributes greenFloor = new ColoringAttributes(green, 1);
//         ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
// 
//         Appearance fa = new Appearance();
//         Appearance fb = new Appearance();
// 
//         fa.setColoringAttributes(blueFloor);
//         fb.setColoringAttributes(greenFloor);
//         
//         Shape3D fs3d = new Shape3D(floorCoord, fa);
//         Shape3D fs3d2 = new Shape3D(floorCoord2, fb);
        
//         BranchGroup scene = new BranchGroup();
        BranchGroup scene = createSceneGraph();
//         scene.addChild(fs3d);
//         scene.addChild(fs3d2);
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        //su.getViewingPlatform().setNominalViewingTransform();
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor

    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();
        
        TransformGroup floor = makeFace("floor", new Color3f(0.0f, 0.1f, 0.4f));    // blue
        TransformGroup ceiling = makeFace("ceiling", new Color3f(0.9f, 0.9f, 0f));  // yellow
        TransformGroup back = makeFace("back", new Color3f(0.0f, 0.5f, 0.1f));      // green
        TransformGroup front = makeFace("front", new Color3f(0.8f, 0.1f, 0.7f));    // purple
        TransformGroup left = makeFace("left", new Color3f(0.8f, 0.3f, 0.2f));      // red
        TransformGroup right = makeFace("right", new Color3f(1.0f, 1.0f, 1.0f));    // white
        
        Shape3d grid = makeGrid();
        
        objRoot.addChild(floor);
        objRoot.addChild(back);
        objRoot.addChild(left);
        objRoot.addChild(right);
        objRoot.addChild(front);
        objRoot.addChild(ceiling);
        objRoot.addChild(grid);
        
        return objRoot;
    } // end of method

    private TransformGroup makeFace(String face, Color3f faceColor) {
        // create standard Quad
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-15f, 0f, 15f));
        qa.setCoordinate(1, new Point3f(15f, 0f, 15f));
        qa.setCoordinate(2, new Point3f(15f, 0f, -15f));
        qa.setCoordinate(3, new Point3f(-15f, 0f, -15f));
        
        // set color for quad
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        // translate quad to appropriate place for room structure
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.rotX(Math.PI);
                t3d.setTranslation(new Vector3f(0f, 15f, 0f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on x-axis
                break;
            case "left": t3d.rotZ(-Math.PI/2);
                t3d.setTranslation(new Vector3f(-15f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on y-axis
                break;
            case "right": t3d.rotZ(Math.PI/2);
                t3d.setTranslation(new Vector3f(15f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.rotX(-Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, 15f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.rotX(Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, -15f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
        return tg;
    }
    
    // makes lines to divide constructed area into 3x3 grid for each side
    private Shape3D makeGrid() {
        
        // set up coords
        Point3f gridCoords = new Point3f[32];
        gridCoords[0] = new Point3f(-15f, 15f, 15f);
        gridCoords[1] = new Point3f(15f, 15f, 15f);
        gridCoords[2] = new Point3f(15f, -15f, 15f);
        gridCoords[3] = new Point3f(-15f, -15f, 15f);
        
        Point3f adjust = new Point3f(0, 0, -15);
        for (int i = 4; i < gridCoords.size() / 2; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4] + adjust);
        }
        
        gridCoords[16] = new Point3f(gridCoords[1]);
        gridCoords[17] = new Point3f(gridCoords[13]);
        gridCoords[18] = new Point3f(gridCoords[14]);
        gridCoords[19] = new Point3f(gridCoords[2]);
        
        adjust = new Point3f(-15, 0, 0);
        for (int i = 20; i < gridCoords.size(); i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4] + adjust);
        }
        
        // create line array object
        LineArray grid = new LineArray(32, LineArray.COORDINATES);
        for (int i = 0; i < gridCoords.size(); i++) {
            grid.setCoordinate(i, gridCoords[i]);
        }
        
        return new Shape3D(LineArray);
        // return shape 3d

    }
    
  private void orbitControls(Canvas3D c)
  /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
  {
    OrbitBehavior orbit = 
        new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
    orbit.setSchedulingBounds(bounds);

    ViewingPlatform vp = su.getViewingPlatform();
    vp.setViewPlatformBehavior(orbit);      
  }  // end of orbitControls()



  private void initUserPosition()
  // Set the user's initial viewpoint using lookAt()
  {
    ViewingPlatform vp = su.getViewingPlatform();
    TransformGroup steerTG = vp.getViewPlatformTransform();

    Transform3D t3d = new Transform3D();
    steerTG.getTransform(t3d);

    // args are: viewer posn, where looking, up direction
    t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
    t3d.invert();

    steerTG.setTransform(t3d);
  }  // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3D(), 256, 256);
//         new MyOwn3D();
    }

}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				119
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class Shape3d
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				192
			<iErrLine>
			<iErrMessage>
				incompatible types
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				193
			<iErrLine>
			<iErrMessage>
				array required, but javax.vecmath.Point3f found
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				194
			<iErrLine>
			<iErrMessage>
				array required, but javax.vecmath.Point3f found
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				195
			<iErrLine>
			<iErrMessage>
				array required, but javax.vecmath.Point3f found
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				196
			<iErrLine>
			<iErrMessage>
				array required, but javax.vecmath.Point3f found
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				199
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   method size()
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				200
			<iErrLine>
			<iErrMessage>
				array required, but javax.vecmath.Point3f found
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				200
			<iErrLine>
			<iErrMessage>
				array required, but javax.vecmath.Point3f found
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				203
			<iErrLine>
			<iErrMessage>
				array required, but javax.vecmath.Point3f found
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				203
			<iErrLine>
			<iErrMessage>
				array required, but javax.vecmath.Point3f found
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				204
			<iErrLine>
			<iErrMessage>
				array required, but javax.vecmath.Point3f found
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				204
			<iErrLine>
			<iErrMessage>
				array required, but javax.vecmath.Point3f found
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				205
			<iErrLine>
			<iErrMessage>
				array required, but javax.vecmath.Point3f found
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				205
			<iErrLine>
			<iErrMessage>
				array required, but javax.vecmath.Point3f found
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				206
			<iErrLine>
			<iErrMessage>
				array required, but javax.vecmath.Point3f found
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				206
			<iErrLine>
			<iErrMessage>
				array required, but javax.vecmath.Point3f found
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				209
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   method size()
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				210
			<iErrLine>
			<iErrMessage>
				array required, but javax.vecmath.Point3f found
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				210
			<iErrLine>
			<iErrMessage>
				array required, but javax.vecmath.Point3f found
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				215
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   method size()
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				216
			<iErrLine>
			<iErrMessage>
				array required, but javax.vecmath.Point3f found
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				219
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable LineArray
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				7049281
			</iTime>
			<fName>
				MyOwn3D.java
			</fName>
			<fSize>
				8974.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

// import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;



public class MyOwn3D extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere();   // for environment nodes
    private SimpleUniverse su;
    
    // points for 8 corners of the room
    
    
    public MyOwn3D() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
//         Point3f a1 = new Point3f(-15f, -15f, -15f);
//         Point3f a2 = new Point3f(15f, -15f, -15f);
//         Point3f a3 = new Point3f(15f, 15f, -15f);
//         Point3f a4 = new Point3f(-15f, 15f, -15f);
//         
//         QuadArray floorCoord = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord.setCoordinate(0, a1);
//         floorCoord.setCoordinate(1, a2);
//         floorCoord.setCoordinate(2, a3);
//         floorCoord.setCoordinate(3, a4);
//         
//         Point3f b1 = new Point3f(-15f, -15f, 15f);
//         Point3f b2 = new Point3f(15f, -15f, 15f);
//         Point3f b3 = new Point3f(15f, 15f, 15f);
//         Point3f b4 = new Point3f(-15f, 15f, 15f);
//         
//         QuadArray floorCoord2 = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord2.setCoordinate(0, b1);
//         floorCoord2.setCoordinate(1, b2);
//         floorCoord2.setCoordinate(2, b3);
//         floorCoord2.setCoordinate(3, b4);
//         
//         Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
//         Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
//         ColoringAttributes greenFloor = new ColoringAttributes(green, 1);
//         ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
// 
//         Appearance fa = new Appearance();
//         Appearance fb = new Appearance();
// 
//         fa.setColoringAttributes(blueFloor);
//         fb.setColoringAttributes(greenFloor);
//         
//         Shape3D fs3d = new Shape3D(floorCoord, fa);
//         Shape3D fs3d2 = new Shape3D(floorCoord2, fb);
        
//         BranchGroup scene = new BranchGroup();
        BranchGroup scene = createSceneGraph();
//         scene.addChild(fs3d);
//         scene.addChild(fs3d2);
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        //su.getViewingPlatform().setNominalViewingTransform();
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor

    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();
        
        TransformGroup floor = makeFace("floor", new Color3f(0.0f, 0.1f, 0.4f));    // blue
        TransformGroup ceiling = makeFace("ceiling", new Color3f(0.9f, 0.9f, 0f));  // yellow
        TransformGroup back = makeFace("back", new Color3f(0.0f, 0.5f, 0.1f));      // green
        TransformGroup front = makeFace("front", new Color3f(0.8f, 0.1f, 0.7f));    // purple
        TransformGroup left = makeFace("left", new Color3f(0.8f, 0.3f, 0.2f));      // red
        TransformGroup right = makeFace("right", new Color3f(1.0f, 1.0f, 1.0f));    // white
        
        Shape3D grid = makeGrid();
        
        objRoot.addChild(floor);
        objRoot.addChild(back);
        objRoot.addChild(left);
        objRoot.addChild(right);
        objRoot.addChild(front);
        objRoot.addChild(ceiling);
        objRoot.addChild(grid);
        
        return objRoot;
    } // end of method

    private TransformGroup makeFace(String face, Color3f faceColor) {
        // create standard Quad
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-15f, 0f, 15f));
        qa.setCoordinate(1, new Point3f(15f, 0f, 15f));
        qa.setCoordinate(2, new Point3f(15f, 0f, -15f));
        qa.setCoordinate(3, new Point3f(-15f, 0f, -15f));
        
        // set color for quad
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        // translate quad to appropriate place for room structure
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.rotX(Math.PI);
                t3d.setTranslation(new Vector3f(0f, 15f, 0f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on x-axis
                break;
            case "left": t3d.rotZ(-Math.PI/2);
                t3d.setTranslation(new Vector3f(-15f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on y-axis
                break;
            case "right": t3d.rotZ(Math.PI/2);
                t3d.setTranslation(new Vector3f(15f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.rotX(-Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, 15f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.rotX(Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, -15f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
        return tg;
    }
    
    // makes lines to divide constructed area into 3x3 grid for each side
    private Shape3D makeGrid() {
        
        // set up coords
        Point3f gridCoords = new Point3f[32];
        gridCoords[0] = new Point3f(-15f, 15f, 15f);
        gridCoords[1] = new Point3f(15f, 15f, 15f);
        gridCoords[2] = new Point3f(15f, -15f, 15f);
        gridCoords[3] = new Point3f(-15f, -15f, 15f);
        
        Point3f adjust = new Point3f(0, 0, -15);
        for (int i = 4; i < gridCoords.size() / 2; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4] + adjust);
        }
        
        gridCoords[16] = new Point3f(gridCoords[1]);
        gridCoords[17] = new Point3f(gridCoords[13]);
        gridCoords[18] = new Point3f(gridCoords[14]);
        gridCoords[19] = new Point3f(gridCoords[2]);
        
        adjust = new Point3f(-15, 0, 0);
        for (int i = 20; i < gridCoords.size(); i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4] + adjust);
        }
        
        // create line array object
        LineArray grid = new LineArray(32, LineArray.COORDINATES);
        for (int i = 0; i < gridCoords.size(); i++) {
            grid.setCoordinate(i, gridCoords[i]);
        }
        
        return new Shape3D(LineArray);
        // return shape 3d

    }
    
  private void orbitControls(Canvas3D c)
  /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
  {
    OrbitBehavior orbit = 
        new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
    orbit.setSchedulingBounds(bounds);

    ViewingPlatform vp = su.getViewingPlatform();
    vp.setViewPlatformBehavior(orbit);      
  }  // end of orbitControls()



  private void initUserPosition()
  // Set the user's initial viewpoint using lookAt()
  {
    ViewingPlatform vp = su.getViewingPlatform();
    TransformGroup steerTG = vp.getViewPlatformTransform();

    Transform3D t3d = new Transform3D();
    steerTG.getTransform(t3d);

    // args are: viewer posn, where looking, up direction
    t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
    t3d.invert();

    steerTG.setTransform(t3d);
  }  // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3D(), 256, 256);
//         new MyOwn3D();
    }

}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				192
			<iErrLine>
			<iErrMessage>
				incompatible types
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				193
			<iErrLine>
			<iErrMessage>
				array required, but javax.vecmath.Point3f found
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				194
			<iErrLine>
			<iErrMessage>
				array required, but javax.vecmath.Point3f found
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				195
			<iErrLine>
			<iErrMessage>
				array required, but javax.vecmath.Point3f found
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				196
			<iErrLine>
			<iErrMessage>
				array required, but javax.vecmath.Point3f found
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				199
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   method size()
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				200
			<iErrLine>
			<iErrMessage>
				array required, but javax.vecmath.Point3f found
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				200
			<iErrLine>
			<iErrMessage>
				array required, but javax.vecmath.Point3f found
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				203
			<iErrLine>
			<iErrMessage>
				array required, but javax.vecmath.Point3f found
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				203
			<iErrLine>
			<iErrMessage>
				array required, but javax.vecmath.Point3f found
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				204
			<iErrLine>
			<iErrMessage>
				array required, but javax.vecmath.Point3f found
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				204
			<iErrLine>
			<iErrMessage>
				array required, but javax.vecmath.Point3f found
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				205
			<iErrLine>
			<iErrMessage>
				array required, but javax.vecmath.Point3f found
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				205
			<iErrLine>
			<iErrMessage>
				array required, but javax.vecmath.Point3f found
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				206
			<iErrLine>
			<iErrMessage>
				array required, but javax.vecmath.Point3f found
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				206
			<iErrLine>
			<iErrMessage>
				array required, but javax.vecmath.Point3f found
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				209
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   method size()
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				210
			<iErrLine>
			<iErrMessage>
				array required, but javax.vecmath.Point3f found
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				210
			<iErrLine>
			<iErrMessage>
				array required, but javax.vecmath.Point3f found
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				215
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   method size()
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				216
			<iErrLine>
			<iErrMessage>
				array required, but javax.vecmath.Point3f found
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				219
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable LineArray
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				7077625
			</iTime>
			<fName>
				MyOwn3D.java
			</fName>
			<fSize>
				8976.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

// import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;



public class MyOwn3D extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere();   // for environment nodes
    private SimpleUniverse su;
    
    // points for 8 corners of the room
    
    
    public MyOwn3D() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
//         Point3f a1 = new Point3f(-15f, -15f, -15f);
//         Point3f a2 = new Point3f(15f, -15f, -15f);
//         Point3f a3 = new Point3f(15f, 15f, -15f);
//         Point3f a4 = new Point3f(-15f, 15f, -15f);
//         
//         QuadArray floorCoord = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord.setCoordinate(0, a1);
//         floorCoord.setCoordinate(1, a2);
//         floorCoord.setCoordinate(2, a3);
//         floorCoord.setCoordinate(3, a4);
//         
//         Point3f b1 = new Point3f(-15f, -15f, 15f);
//         Point3f b2 = new Point3f(15f, -15f, 15f);
//         Point3f b3 = new Point3f(15f, 15f, 15f);
//         Point3f b4 = new Point3f(-15f, 15f, 15f);
//         
//         QuadArray floorCoord2 = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord2.setCoordinate(0, b1);
//         floorCoord2.setCoordinate(1, b2);
//         floorCoord2.setCoordinate(2, b3);
//         floorCoord2.setCoordinate(3, b4);
//         
//         Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
//         Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
//         ColoringAttributes greenFloor = new ColoringAttributes(green, 1);
//         ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
// 
//         Appearance fa = new Appearance();
//         Appearance fb = new Appearance();
// 
//         fa.setColoringAttributes(blueFloor);
//         fb.setColoringAttributes(greenFloor);
//         
//         Shape3D fs3d = new Shape3D(floorCoord, fa);
//         Shape3D fs3d2 = new Shape3D(floorCoord2, fb);
        
//         BranchGroup scene = new BranchGroup();
        BranchGroup scene = createSceneGraph();
//         scene.addChild(fs3d);
//         scene.addChild(fs3d2);
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        //su.getViewingPlatform().setNominalViewingTransform();
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor

    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();
        
        TransformGroup floor = makeFace("floor", new Color3f(0.0f, 0.1f, 0.4f));    // blue
        TransformGroup ceiling = makeFace("ceiling", new Color3f(0.9f, 0.9f, 0f));  // yellow
        TransformGroup back = makeFace("back", new Color3f(0.0f, 0.5f, 0.1f));      // green
        TransformGroup front = makeFace("front", new Color3f(0.8f, 0.1f, 0.7f));    // purple
        TransformGroup left = makeFace("left", new Color3f(0.8f, 0.3f, 0.2f));      // red
        TransformGroup right = makeFace("right", new Color3f(1.0f, 1.0f, 1.0f));    // white
        
        Shape3D grid = makeGrid();
        
        objRoot.addChild(floor);
        objRoot.addChild(back);
        objRoot.addChild(left);
        objRoot.addChild(right);
        objRoot.addChild(front);
        objRoot.addChild(ceiling);
        objRoot.addChild(grid);
        
        return objRoot;
    } // end of method

    private TransformGroup makeFace(String face, Color3f faceColor) {
        // create standard Quad
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-15f, 0f, 15f));
        qa.setCoordinate(1, new Point3f(15f, 0f, 15f));
        qa.setCoordinate(2, new Point3f(15f, 0f, -15f));
        qa.setCoordinate(3, new Point3f(-15f, 0f, -15f));
        
        // set color for quad
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        // translate quad to appropriate place for room structure
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.rotX(Math.PI);
                t3d.setTranslation(new Vector3f(0f, 15f, 0f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on x-axis
                break;
            case "left": t3d.rotZ(-Math.PI/2);
                t3d.setTranslation(new Vector3f(-15f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on y-axis
                break;
            case "right": t3d.rotZ(Math.PI/2);
                t3d.setTranslation(new Vector3f(15f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.rotX(-Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, 15f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.rotX(Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, -15f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
        return tg;
    }
    
    // makes lines to divide constructed area into 3x3 grid for each side
    private Shape3D makeGrid() {
        
        // set up coords
        Point3f[] gridCoords = new Point3f[32];
        gridCoords[0] = new Point3f(-15f, 15f, 15f);
        gridCoords[1] = new Point3f(15f, 15f, 15f);
        gridCoords[2] = new Point3f(15f, -15f, 15f);
        gridCoords[3] = new Point3f(-15f, -15f, 15f);
        
        Point3f adjust = new Point3f(0, 0, -15);
        for (int i = 4; i < gridCoords.size() / 2; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4] + adjust);
        }
        
        gridCoords[16] = new Point3f(gridCoords[1]);
        gridCoords[17] = new Point3f(gridCoords[13]);
        gridCoords[18] = new Point3f(gridCoords[14]);
        gridCoords[19] = new Point3f(gridCoords[2]);
        
        adjust = new Point3f(-15, 0, 0);
        for (int i = 20; i < gridCoords.size(); i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4] + adjust);
        }
        
        // create line array object
        LineArray grid = new LineArray(32, LineArray.COORDINATES);
        for (int i = 0; i < gridCoords.size(); i++) {
            grid.setCoordinate(i, gridCoords[i]);
        }
        
        return new Shape3D(LineArray);
        // return shape 3d

    }
    
  private void orbitControls(Canvas3D c)
  /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
  {
    OrbitBehavior orbit = 
        new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
    orbit.setSchedulingBounds(bounds);

    ViewingPlatform vp = su.getViewingPlatform();
    vp.setViewPlatformBehavior(orbit);      
  }  // end of orbitControls()



  private void initUserPosition()
  // Set the user's initial viewpoint using lookAt()
  {
    ViewingPlatform vp = su.getViewingPlatform();
    TransformGroup steerTG = vp.getViewPlatformTransform();

    Transform3D t3d = new Transform3D();
    steerTG.getTransform(t3d);

    // args are: viewer posn, where looking, up direction
    t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
    t3d.invert();

    steerTG.setTransform(t3d);
  }  // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3D(), 256, 256);
//         new MyOwn3D();
    }

}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				199
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   method size()
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				200
			<iErrLine>
			<iErrMessage>
				bad operand types for binary operator '+'
  first type:  javax.vecmath.Point3f
  second type: javax.vecmath.Point3f
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				209
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   method size()
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				210
			<iErrLine>
			<iErrMessage>
				bad operand types for binary operator '+'
  first type:  javax.vecmath.Point3f
  second type: javax.vecmath.Point3f
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				215
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   method size()
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				219
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable LineArray
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				7244375
			</iTime>
			<fName>
				MyOwn3D.java
			</fName>
			<fSize>
				8976.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

// import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;



public class MyOwn3D extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere();   // for environment nodes
    private SimpleUniverse su;
    
    // points for 8 corners of the room
    
    
    public MyOwn3D() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
//         Point3f a1 = new Point3f(-15f, -15f, -15f);
//         Point3f a2 = new Point3f(15f, -15f, -15f);
//         Point3f a3 = new Point3f(15f, 15f, -15f);
//         Point3f a4 = new Point3f(-15f, 15f, -15f);
//         
//         QuadArray floorCoord = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord.setCoordinate(0, a1);
//         floorCoord.setCoordinate(1, a2);
//         floorCoord.setCoordinate(2, a3);
//         floorCoord.setCoordinate(3, a4);
//         
//         Point3f b1 = new Point3f(-15f, -15f, 15f);
//         Point3f b2 = new Point3f(15f, -15f, 15f);
//         Point3f b3 = new Point3f(15f, 15f, 15f);
//         Point3f b4 = new Point3f(-15f, 15f, 15f);
//         
//         QuadArray floorCoord2 = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord2.setCoordinate(0, b1);
//         floorCoord2.setCoordinate(1, b2);
//         floorCoord2.setCoordinate(2, b3);
//         floorCoord2.setCoordinate(3, b4);
//         
//         Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
//         Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
//         ColoringAttributes greenFloor = new ColoringAttributes(green, 1);
//         ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
// 
//         Appearance fa = new Appearance();
//         Appearance fb = new Appearance();
// 
//         fa.setColoringAttributes(blueFloor);
//         fb.setColoringAttributes(greenFloor);
//         
//         Shape3D fs3d = new Shape3D(floorCoord, fa);
//         Shape3D fs3d2 = new Shape3D(floorCoord2, fb);
        
//         BranchGroup scene = new BranchGroup();
        BranchGroup scene = createSceneGraph();
//         scene.addChild(fs3d);
//         scene.addChild(fs3d2);
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        //su.getViewingPlatform().setNominalViewingTransform();
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor

    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();
        
        TransformGroup floor = makeFace("floor", new Color3f(0.0f, 0.1f, 0.4f));    // blue
        TransformGroup ceiling = makeFace("ceiling", new Color3f(0.9f, 0.9f, 0f));  // yellow
        TransformGroup back = makeFace("back", new Color3f(0.0f, 0.5f, 0.1f));      // green
        TransformGroup front = makeFace("front", new Color3f(0.8f, 0.1f, 0.7f));    // purple
        TransformGroup left = makeFace("left", new Color3f(0.8f, 0.3f, 0.2f));      // red
        TransformGroup right = makeFace("right", new Color3f(1.0f, 1.0f, 1.0f));    // white
        
        Shape3D grid = makeGrid();
        
        objRoot.addChild(floor);
        objRoot.addChild(back);
        objRoot.addChild(left);
        objRoot.addChild(right);
        objRoot.addChild(front);
        objRoot.addChild(ceiling);
        objRoot.addChild(grid);
        
        return objRoot;
    } // end of method

    private TransformGroup makeFace(String face, Color3f faceColor) {
        // create standard Quad
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-15f, 0f, 15f));
        qa.setCoordinate(1, new Point3f(15f, 0f, 15f));
        qa.setCoordinate(2, new Point3f(15f, 0f, -15f));
        qa.setCoordinate(3, new Point3f(-15f, 0f, -15f));
        
        // set color for quad
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        // translate quad to appropriate place for room structure
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.rotX(Math.PI);
                t3d.setTranslation(new Vector3f(0f, 15f, 0f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on x-axis
                break;
            case "left": t3d.rotZ(-Math.PI/2);
                t3d.setTranslation(new Vector3f(-15f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on y-axis
                break;
            case "right": t3d.rotZ(Math.PI/2);
                t3d.setTranslation(new Vector3f(15f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.rotX(-Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, 15f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.rotX(Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, -15f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
        return tg;
    }
    
    // makes lines to divide constructed area into 3x3 grid for each side
    private Shape3D makeGrid() {
        
        // set up coords
        Point3f[] gridCoords = new Point3f[32];
        gridCoords[0] = new Point3f(-15f, 15f, 15f);
        gridCoords[1] = new Point3f(15f, 15f, 15f);
        gridCoords[2] = new Point3f(15f, -15f, 15f);
        gridCoords[3] = new Point3f(-15f, -15f, 15f);
        
        Point3f adjust = new Point3f(0, 0, -15);
        for (int i = 4; i < gridCoords.length / 2; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4] + adjust);
        }
        
        gridCoords[16] = new Point3f(gridCoords[1]);
        gridCoords[17] = new Point3f(gridCoords[13]);
        gridCoords[18] = new Point3f(gridCoords[14]);
        gridCoords[19] = new Point3f(gridCoords[2]);
        
        adjust = new Point3f(-15, 0, 0);
        for (int i = 20; i < gridCoords.length; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4] + adjust);
        }
        
        // create line array object
        LineArray grid = new LineArray(32, LineArray.COORDINATES);
        for (int i = 0; i < gridCoords.size(); i++) {
            grid.setCoordinate(i, gridCoords[i]);
        }
        
        return new Shape3D(LineArray);
        // return shape 3d

    }
    
  private void orbitControls(Canvas3D c)
  /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
  {
    OrbitBehavior orbit = 
        new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
    orbit.setSchedulingBounds(bounds);

    ViewingPlatform vp = su.getViewingPlatform();
    vp.setViewPlatformBehavior(orbit);      
  }  // end of orbitControls()



  private void initUserPosition()
  // Set the user's initial viewpoint using lookAt()
  {
    ViewingPlatform vp = su.getViewingPlatform();
    TransformGroup steerTG = vp.getViewPlatformTransform();

    Transform3D t3d = new Transform3D();
    steerTG.getTransform(t3d);

    // args are: viewer posn, where looking, up direction
    t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
    t3d.invert();

    steerTG.setTransform(t3d);
  }  // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3D(), 256, 256);
//         new MyOwn3D();
    }

}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				200
			<iErrLine>
			<iErrMessage>
				bad operand types for binary operator '+'
  first type:  javax.vecmath.Point3f
  second type: javax.vecmath.Point3f
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				210
			<iErrLine>
			<iErrMessage>
				bad operand types for binary operator '+'
  first type:  javax.vecmath.Point3f
  second type: javax.vecmath.Point3f
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				215
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   method size()
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				219
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable LineArray
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				7358797
			</iTime>
			<fName>
				MyOwn3D.java
			</fName>
			<fSize>
				8982.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

// import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;



public class MyOwn3D extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere();   // for environment nodes
    private SimpleUniverse su;
    
    // points for 8 corners of the room
    
    
    public MyOwn3D() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
//         Point3f a1 = new Point3f(-15f, -15f, -15f);
//         Point3f a2 = new Point3f(15f, -15f, -15f);
//         Point3f a3 = new Point3f(15f, 15f, -15f);
//         Point3f a4 = new Point3f(-15f, 15f, -15f);
//         
//         QuadArray floorCoord = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord.setCoordinate(0, a1);
//         floorCoord.setCoordinate(1, a2);
//         floorCoord.setCoordinate(2, a3);
//         floorCoord.setCoordinate(3, a4);
//         
//         Point3f b1 = new Point3f(-15f, -15f, 15f);
//         Point3f b2 = new Point3f(15f, -15f, 15f);
//         Point3f b3 = new Point3f(15f, 15f, 15f);
//         Point3f b4 = new Point3f(-15f, 15f, 15f);
//         
//         QuadArray floorCoord2 = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord2.setCoordinate(0, b1);
//         floorCoord2.setCoordinate(1, b2);
//         floorCoord2.setCoordinate(2, b3);
//         floorCoord2.setCoordinate(3, b4);
//         
//         Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
//         Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
//         ColoringAttributes greenFloor = new ColoringAttributes(green, 1);
//         ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
// 
//         Appearance fa = new Appearance();
//         Appearance fb = new Appearance();
// 
//         fa.setColoringAttributes(blueFloor);
//         fb.setColoringAttributes(greenFloor);
//         
//         Shape3D fs3d = new Shape3D(floorCoord, fa);
//         Shape3D fs3d2 = new Shape3D(floorCoord2, fb);
        
//         BranchGroup scene = new BranchGroup();
        BranchGroup scene = createSceneGraph();
//         scene.addChild(fs3d);
//         scene.addChild(fs3d2);
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        //su.getViewingPlatform().setNominalViewingTransform();
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor

    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();
        
        TransformGroup floor = makeFace("floor", new Color3f(0.0f, 0.1f, 0.4f));    // blue
        TransformGroup ceiling = makeFace("ceiling", new Color3f(0.9f, 0.9f, 0f));  // yellow
        TransformGroup back = makeFace("back", new Color3f(0.0f, 0.5f, 0.1f));      // green
        TransformGroup front = makeFace("front", new Color3f(0.8f, 0.1f, 0.7f));    // purple
        TransformGroup left = makeFace("left", new Color3f(0.8f, 0.3f, 0.2f));      // red
        TransformGroup right = makeFace("right", new Color3f(1.0f, 1.0f, 1.0f));    // white
        
        Shape3D grid = makeGrid();
        
        objRoot.addChild(floor);
        objRoot.addChild(back);
        objRoot.addChild(left);
        objRoot.addChild(right);
        objRoot.addChild(front);
        objRoot.addChild(ceiling);
        objRoot.addChild(grid);
        
        return objRoot;
    } // end of method

    private TransformGroup makeFace(String face, Color3f faceColor) {
        // create standard Quad
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-15f, 0f, 15f));
        qa.setCoordinate(1, new Point3f(15f, 0f, 15f));
        qa.setCoordinate(2, new Point3f(15f, 0f, -15f));
        qa.setCoordinate(3, new Point3f(-15f, 0f, -15f));
        
        // set color for quad
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        // translate quad to appropriate place for room structure
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.rotX(Math.PI);
                t3d.setTranslation(new Vector3f(0f, 15f, 0f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on x-axis
                break;
            case "left": t3d.rotZ(-Math.PI/2);
                t3d.setTranslation(new Vector3f(-15f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on y-axis
                break;
            case "right": t3d.rotZ(Math.PI/2);
                t3d.setTranslation(new Vector3f(15f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.rotX(-Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, 15f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.rotX(Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, -15f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
        return tg;
    }
    
    // makes lines to divide constructed area into 3x3 grid for each side
    private Shape3D makeGrid() {
        
        // set up coords
        Point3f[] gridCoords = new Point3f[32];
        gridCoords[0] = new Point3f(-15f, 15f, 15f);
        gridCoords[1] = new Point3f(15f, 15f, 15f);
        gridCoords[2] = new Point3f(15f, -15f, 15f);
        gridCoords[3] = new Point3f(-15f, -15f, 15f);
        
        Point3f adjust = new Point3f(0, 0, -15);
        for (int i = 4; i < gridCoords.length / 2; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4].add(adjust));
        }
        
        gridCoords[16] = new Point3f(gridCoords[1]);
        gridCoords[17] = new Point3f(gridCoords[13]);
        gridCoords[18] = new Point3f(gridCoords[14]);
        gridCoords[19] = new Point3f(gridCoords[2]);
        
        adjust = new Point3f(-15, 0, 0);
        for (int i = 20; i < gridCoords.length; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4].add(adjust));
        }
        
        // create line array object
        LineArray grid = new LineArray(32, LineArray.COORDINATES);
        for (int i = 0; i < gridCoords.size(); i++) {
            grid.setCoordinate(i, gridCoords[i]);
        }
        
        return new Shape3D(LineArray);
        // return shape 3d

    }
    
  private void orbitControls(Canvas3D c)
  /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
  {
    OrbitBehavior orbit = 
        new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
    orbit.setSchedulingBounds(bounds);

    ViewingPlatform vp = su.getViewingPlatform();
    vp.setViewPlatformBehavior(orbit);      
  }  // end of orbitControls()



  private void initUserPosition()
  // Set the user's initial viewpoint using lookAt()
  {
    ViewingPlatform vp = su.getViewingPlatform();
    TransformGroup steerTG = vp.getViewPlatformTransform();

    Transform3D t3d = new Transform3D();
    steerTG.getTransform(t3d);

    // args are: viewer posn, where looking, up direction
    t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
    t3d.invert();

    steerTG.setTransform(t3d);
  }  // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3D(), 256, 256);
//         new MyOwn3D();
    }

}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				200
			<iErrLine>
			<iErrMessage>
				'void' type not allowed here
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				210
			<iErrLine>
			<iErrMessage>
				'void' type not allowed here
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				215
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   method size()
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				219
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable LineArray
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				7438469
			</iTime>
			<fName>
				MyOwn3D.java
			</fName>
			<fSize>
				9038.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

// import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;



public class MyOwn3D extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere();   // for environment nodes
    private SimpleUniverse su;
    
    // points for 8 corners of the room
    
    
    public MyOwn3D() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
//         Point3f a1 = new Point3f(-15f, -15f, -15f);
//         Point3f a2 = new Point3f(15f, -15f, -15f);
//         Point3f a3 = new Point3f(15f, 15f, -15f);
//         Point3f a4 = new Point3f(-15f, 15f, -15f);
//         
//         QuadArray floorCoord = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord.setCoordinate(0, a1);
//         floorCoord.setCoordinate(1, a2);
//         floorCoord.setCoordinate(2, a3);
//         floorCoord.setCoordinate(3, a4);
//         
//         Point3f b1 = new Point3f(-15f, -15f, 15f);
//         Point3f b2 = new Point3f(15f, -15f, 15f);
//         Point3f b3 = new Point3f(15f, 15f, 15f);
//         Point3f b4 = new Point3f(-15f, 15f, 15f);
//         
//         QuadArray floorCoord2 = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord2.setCoordinate(0, b1);
//         floorCoord2.setCoordinate(1, b2);
//         floorCoord2.setCoordinate(2, b3);
//         floorCoord2.setCoordinate(3, b4);
//         
//         Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
//         Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
//         ColoringAttributes greenFloor = new ColoringAttributes(green, 1);
//         ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
// 
//         Appearance fa = new Appearance();
//         Appearance fb = new Appearance();
// 
//         fa.setColoringAttributes(blueFloor);
//         fb.setColoringAttributes(greenFloor);
//         
//         Shape3D fs3d = new Shape3D(floorCoord, fa);
//         Shape3D fs3d2 = new Shape3D(floorCoord2, fb);
        
//         BranchGroup scene = new BranchGroup();
        BranchGroup scene = createSceneGraph();
//         scene.addChild(fs3d);
//         scene.addChild(fs3d2);
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        //su.getViewingPlatform().setNominalViewingTransform();
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor

    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();
        
        TransformGroup floor = makeFace("floor", new Color3f(0.0f, 0.1f, 0.4f));    // blue
        TransformGroup ceiling = makeFace("ceiling", new Color3f(0.9f, 0.9f, 0f));  // yellow
        TransformGroup back = makeFace("back", new Color3f(0.0f, 0.5f, 0.1f));      // green
        TransformGroup front = makeFace("front", new Color3f(0.8f, 0.1f, 0.7f));    // purple
        TransformGroup left = makeFace("left", new Color3f(0.8f, 0.3f, 0.2f));      // red
        TransformGroup right = makeFace("right", new Color3f(1.0f, 1.0f, 1.0f));    // white
        
        Shape3D grid = makeGrid();
        
        objRoot.addChild(floor);
        objRoot.addChild(back);
        objRoot.addChild(left);
        objRoot.addChild(right);
        objRoot.addChild(front);
        objRoot.addChild(ceiling);
        objRoot.addChild(grid);
        
        return objRoot;
    } // end of method

    private TransformGroup makeFace(String face, Color3f faceColor) {
        // create standard Quad
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-15f, 0f, 15f));
        qa.setCoordinate(1, new Point3f(15f, 0f, 15f));
        qa.setCoordinate(2, new Point3f(15f, 0f, -15f));
        qa.setCoordinate(3, new Point3f(-15f, 0f, -15f));
        
        // set color for quad
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        // translate quad to appropriate place for room structure
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.rotX(Math.PI);
                t3d.setTranslation(new Vector3f(0f, 15f, 0f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on x-axis
                break;
            case "left": t3d.rotZ(-Math.PI/2);
                t3d.setTranslation(new Vector3f(-15f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on y-axis
                break;
            case "right": t3d.rotZ(Math.PI/2);
                t3d.setTranslation(new Vector3f(15f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.rotX(-Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, 15f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.rotX(Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, -15f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
        return tg;
    }
    
    // makes lines to divide constructed area into 3x3 grid for each side
    private Shape3D makeGrid() {
        
        // set up coords
        Point3f[] gridCoords = new Point3f[32];
        gridCoords[0] = new Point3f(-15f, 15f, 15f);
        gridCoords[1] = new Point3f(15f, 15f, 15f);
        gridCoords[2] = new Point3f(15f, -15f, 15f);
        gridCoords[3] = new Point3f(-15f, -15f, 15f);
        
        Point3f adjust = new Point3f(0, 0, -15);
        for (int i = 4; i < gridCoords.length / 2; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust));
        }
        
        gridCoords[16] = new Point3f(gridCoords[1]);
        gridCoords[17] = new Point3f(gridCoords[13]);
        gridCoords[18] = new Point3f(gridCoords[14]);
        gridCoords[19] = new Point3f(gridCoords[2]);
        
        adjust = new Point3f(-15, 0, 0);
        for (int i = 20; i < gridCoords.length; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust));
        }
        
        // create line array object
        LineArray grid = new LineArray(32, LineArray.COORDINATES);
        for (int i = 0; i < gridCoords.size(); i++) {
            grid.setCoordinate(i, gridCoords[i]);
        }
        
        return new Shape3D(LineArray);
        // return shape 3d

    }
    
  private void orbitControls(Canvas3D c)
  /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
  {
    OrbitBehavior orbit = 
        new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
    orbit.setSchedulingBounds(bounds);

    ViewingPlatform vp = su.getViewingPlatform();
    vp.setViewPlatformBehavior(orbit);      
  }  // end of orbitControls()



  private void initUserPosition()
  // Set the user's initial viewpoint using lookAt()
  {
    ViewingPlatform vp = su.getViewingPlatform();
    TransformGroup steerTG = vp.getViewPlatformTransform();

    Transform3D t3d = new Transform3D();
    steerTG.getTransform(t3d);

    // args are: viewer posn, where looking, up direction
    t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
    t3d.invert();

    steerTG.setTransform(t3d);
  }  // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3D(), 256, 256);
//         new MyOwn3D();
    }

}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				201
			<iErrLine>
			<iErrMessage>
				';' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				212
			<iErrLine>
			<iErrMessage>
				';' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				7458281
			</iTime>
			<fName>
				MyOwn3D.java
			</fName>
			<fSize>
				9036.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

// import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;



public class MyOwn3D extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere();   // for environment nodes
    private SimpleUniverse su;
    
    // points for 8 corners of the room
    
    
    public MyOwn3D() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
//         Point3f a1 = new Point3f(-15f, -15f, -15f);
//         Point3f a2 = new Point3f(15f, -15f, -15f);
//         Point3f a3 = new Point3f(15f, 15f, -15f);
//         Point3f a4 = new Point3f(-15f, 15f, -15f);
//         
//         QuadArray floorCoord = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord.setCoordinate(0, a1);
//         floorCoord.setCoordinate(1, a2);
//         floorCoord.setCoordinate(2, a3);
//         floorCoord.setCoordinate(3, a4);
//         
//         Point3f b1 = new Point3f(-15f, -15f, 15f);
//         Point3f b2 = new Point3f(15f, -15f, 15f);
//         Point3f b3 = new Point3f(15f, 15f, 15f);
//         Point3f b4 = new Point3f(-15f, 15f, 15f);
//         
//         QuadArray floorCoord2 = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord2.setCoordinate(0, b1);
//         floorCoord2.setCoordinate(1, b2);
//         floorCoord2.setCoordinate(2, b3);
//         floorCoord2.setCoordinate(3, b4);
//         
//         Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
//         Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
//         ColoringAttributes greenFloor = new ColoringAttributes(green, 1);
//         ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
// 
//         Appearance fa = new Appearance();
//         Appearance fb = new Appearance();
// 
//         fa.setColoringAttributes(blueFloor);
//         fb.setColoringAttributes(greenFloor);
//         
//         Shape3D fs3d = new Shape3D(floorCoord, fa);
//         Shape3D fs3d2 = new Shape3D(floorCoord2, fb);
        
//         BranchGroup scene = new BranchGroup();
        BranchGroup scene = createSceneGraph();
//         scene.addChild(fs3d);
//         scene.addChild(fs3d2);
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        //su.getViewingPlatform().setNominalViewingTransform();
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor

    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();
        
        TransformGroup floor = makeFace("floor", new Color3f(0.0f, 0.1f, 0.4f));    // blue
        TransformGroup ceiling = makeFace("ceiling", new Color3f(0.9f, 0.9f, 0f));  // yellow
        TransformGroup back = makeFace("back", new Color3f(0.0f, 0.5f, 0.1f));      // green
        TransformGroup front = makeFace("front", new Color3f(0.8f, 0.1f, 0.7f));    // purple
        TransformGroup left = makeFace("left", new Color3f(0.8f, 0.3f, 0.2f));      // red
        TransformGroup right = makeFace("right", new Color3f(1.0f, 1.0f, 1.0f));    // white
        
        Shape3D grid = makeGrid();
        
        objRoot.addChild(floor);
        objRoot.addChild(back);
        objRoot.addChild(left);
        objRoot.addChild(right);
        objRoot.addChild(front);
        objRoot.addChild(ceiling);
        objRoot.addChild(grid);
        
        return objRoot;
    } // end of method

    private TransformGroup makeFace(String face, Color3f faceColor) {
        // create standard Quad
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-15f, 0f, 15f));
        qa.setCoordinate(1, new Point3f(15f, 0f, 15f));
        qa.setCoordinate(2, new Point3f(15f, 0f, -15f));
        qa.setCoordinate(3, new Point3f(-15f, 0f, -15f));
        
        // set color for quad
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        // translate quad to appropriate place for room structure
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.rotX(Math.PI);
                t3d.setTranslation(new Vector3f(0f, 15f, 0f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on x-axis
                break;
            case "left": t3d.rotZ(-Math.PI/2);
                t3d.setTranslation(new Vector3f(-15f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on y-axis
                break;
            case "right": t3d.rotZ(Math.PI/2);
                t3d.setTranslation(new Vector3f(15f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.rotX(-Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, 15f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.rotX(Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, -15f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
        return tg;
    }
    
    // makes lines to divide constructed area into 3x3 grid for each side
    private Shape3D makeGrid() {
        
        // set up coords
        Point3f[] gridCoords = new Point3f[32];
        gridCoords[0] = new Point3f(-15f, 15f, 15f);
        gridCoords[1] = new Point3f(15f, 15f, 15f);
        gridCoords[2] = new Point3f(15f, -15f, 15f);
        gridCoords[3] = new Point3f(-15f, -15f, 15f);
        
        Point3f adjust = new Point3f(0, 0, -15);
        for (int i = 4; i < gridCoords.length / 2; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        gridCoords[16] = new Point3f(gridCoords[1]);
        gridCoords[17] = new Point3f(gridCoords[13]);
        gridCoords[18] = new Point3f(gridCoords[14]);
        gridCoords[19] = new Point3f(gridCoords[2]);
        
        adjust = new Point3f(-15, 0, 0);
        for (int i = 20; i < gridCoords.length; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        // create line array object
        LineArray grid = new LineArray(32, LineArray.COORDINATES);
        for (int i = 0; i < gridCoords.size(); i++) {
            grid.setCoordinate(i, gridCoords[i]);
        }
        
        return new Shape3D(LineArray);
        // return shape 3d

    }
    
  private void orbitControls(Canvas3D c)
  /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
  {
    OrbitBehavior orbit = 
        new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
    orbit.setSchedulingBounds(bounds);

    ViewingPlatform vp = su.getViewingPlatform();
    vp.setViewPlatformBehavior(orbit);      
  }  // end of orbitControls()



  private void initUserPosition()
  // Set the user's initial viewpoint using lookAt()
  {
    ViewingPlatform vp = su.getViewingPlatform();
    TransformGroup steerTG = vp.getViewPlatformTransform();

    Transform3D t3d = new Transform3D();
    steerTG.getTransform(t3d);

    // args are: viewer posn, where looking, up direction
    t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
    t3d.invert();

    steerTG.setTransform(t3d);
  }  // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3D(), 256, 256);
//         new MyOwn3D();
    }

}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				217
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   method size()
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				221
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable LineArray
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				7468438
			</iTime>
			<fName>
				MyOwn3D.java
			</fName>
			<fSize>
				9036.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

// import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;



public class MyOwn3D extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere();   // for environment nodes
    private SimpleUniverse su;
    
    // points for 8 corners of the room
    
    
    public MyOwn3D() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
//         Point3f a1 = new Point3f(-15f, -15f, -15f);
//         Point3f a2 = new Point3f(15f, -15f, -15f);
//         Point3f a3 = new Point3f(15f, 15f, -15f);
//         Point3f a4 = new Point3f(-15f, 15f, -15f);
//         
//         QuadArray floorCoord = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord.setCoordinate(0, a1);
//         floorCoord.setCoordinate(1, a2);
//         floorCoord.setCoordinate(2, a3);
//         floorCoord.setCoordinate(3, a4);
//         
//         Point3f b1 = new Point3f(-15f, -15f, 15f);
//         Point3f b2 = new Point3f(15f, -15f, 15f);
//         Point3f b3 = new Point3f(15f, 15f, 15f);
//         Point3f b4 = new Point3f(-15f, 15f, 15f);
//         
//         QuadArray floorCoord2 = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord2.setCoordinate(0, b1);
//         floorCoord2.setCoordinate(1, b2);
//         floorCoord2.setCoordinate(2, b3);
//         floorCoord2.setCoordinate(3, b4);
//         
//         Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
//         Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
//         ColoringAttributes greenFloor = new ColoringAttributes(green, 1);
//         ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
// 
//         Appearance fa = new Appearance();
//         Appearance fb = new Appearance();
// 
//         fa.setColoringAttributes(blueFloor);
//         fb.setColoringAttributes(greenFloor);
//         
//         Shape3D fs3d = new Shape3D(floorCoord, fa);
//         Shape3D fs3d2 = new Shape3D(floorCoord2, fb);
        
//         BranchGroup scene = new BranchGroup();
        BranchGroup scene = createSceneGraph();
//         scene.addChild(fs3d);
//         scene.addChild(fs3d2);
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        //su.getViewingPlatform().setNominalViewingTransform();
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor

    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();
        
        TransformGroup floor = makeFace("floor", new Color3f(0.0f, 0.1f, 0.4f));    // blue
        TransformGroup ceiling = makeFace("ceiling", new Color3f(0.9f, 0.9f, 0f));  // yellow
        TransformGroup back = makeFace("back", new Color3f(0.0f, 0.5f, 0.1f));      // green
        TransformGroup front = makeFace("front", new Color3f(0.8f, 0.1f, 0.7f));    // purple
        TransformGroup left = makeFace("left", new Color3f(0.8f, 0.3f, 0.2f));      // red
        TransformGroup right = makeFace("right", new Color3f(1.0f, 1.0f, 1.0f));    // white
        
        Shape3D grid = makeGrid();
        
        objRoot.addChild(floor);
        objRoot.addChild(back);
        objRoot.addChild(left);
        objRoot.addChild(right);
        objRoot.addChild(front);
        objRoot.addChild(ceiling);
        objRoot.addChild(grid);
        
        return objRoot;
    } // end of method

    private TransformGroup makeFace(String face, Color3f faceColor) {
        // create standard Quad
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-15f, 0f, 15f));
        qa.setCoordinate(1, new Point3f(15f, 0f, 15f));
        qa.setCoordinate(2, new Point3f(15f, 0f, -15f));
        qa.setCoordinate(3, new Point3f(-15f, 0f, -15f));
        
        // set color for quad
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        // translate quad to appropriate place for room structure
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.rotX(Math.PI);
                t3d.setTranslation(new Vector3f(0f, 15f, 0f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on x-axis
                break;
            case "left": t3d.rotZ(-Math.PI/2);
                t3d.setTranslation(new Vector3f(-15f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on y-axis
                break;
            case "right": t3d.rotZ(Math.PI/2);
                t3d.setTranslation(new Vector3f(15f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.rotX(-Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, 15f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.rotX(Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, -15f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
        return tg;
    }
    
    // makes lines to divide constructed area into 3x3 grid for each side
    private Shape3D makeGrid() {
        
        // set up coords
        Point3f[] gridCoords = new Point3f[32];
        gridCoords[0] = new Point3f(-15f, 15f, 15f);
        gridCoords[1] = new Point3f(15f, 15f, 15f);
        gridCoords[2] = new Point3f(15f, -15f, 15f);
        gridCoords[3] = new Point3f(-15f, -15f, 15f);
        
        Point3f adjust = new Point3f(0, 0, -15);
        for (int i = 4; i < gridCoords.length / 2; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        gridCoords[16] = new Point3f(gridCoords[1]);
        gridCoords[17] = new Point3f(gridCoords[13]);
        gridCoords[18] = new Point3f(gridCoords[14]);
        gridCoords[19] = new Point3f(gridCoords[2]);
        
        adjust = new Point3f(-15, 0, 0);
        for (int i = 20; i < gridCoords.length; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        // create line array object
        LineArray grid = new LineArray(32, LineArray.COORDINATES);
        for (int i = 0; i < gridCoords.length; i++) {
            grid.setCoordinate(i, gridCoords[i]);
        }
        
        return new Shape3D(LineArray);
        // return shape 3d

    }
    
  private void orbitControls(Canvas3D c)
  /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
  {
    OrbitBehavior orbit = 
        new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
    orbit.setSchedulingBounds(bounds);

    ViewingPlatform vp = su.getViewingPlatform();
    vp.setViewPlatformBehavior(orbit);      
  }  // end of orbitControls()



  private void initUserPosition()
  // Set the user's initial viewpoint using lookAt()
  {
    ViewingPlatform vp = su.getViewingPlatform();
    TransformGroup steerTG = vp.getViewPlatformTransform();

    Transform3D t3d = new Transform3D();
    steerTG.getTransform(t3d);

    // args are: viewer posn, where looking, up direction
    t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
    t3d.invert();

    steerTG.setTransform(t3d);
  }  // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3D(), 256, 256);
//         new MyOwn3D();
    }

}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				221
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable LineArray
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				7477156
			</iTime>
			<fName>
				MyOwn3D.java
			</fName>
			<fSize>
				9031.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

// import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;



public class MyOwn3D extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere();   // for environment nodes
    private SimpleUniverse su;
    
    // points for 8 corners of the room
    
    
    public MyOwn3D() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
//         Point3f a1 = new Point3f(-15f, -15f, -15f);
//         Point3f a2 = new Point3f(15f, -15f, -15f);
//         Point3f a3 = new Point3f(15f, 15f, -15f);
//         Point3f a4 = new Point3f(-15f, 15f, -15f);
//         
//         QuadArray floorCoord = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord.setCoordinate(0, a1);
//         floorCoord.setCoordinate(1, a2);
//         floorCoord.setCoordinate(2, a3);
//         floorCoord.setCoordinate(3, a4);
//         
//         Point3f b1 = new Point3f(-15f, -15f, 15f);
//         Point3f b2 = new Point3f(15f, -15f, 15f);
//         Point3f b3 = new Point3f(15f, 15f, 15f);
//         Point3f b4 = new Point3f(-15f, 15f, 15f);
//         
//         QuadArray floorCoord2 = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord2.setCoordinate(0, b1);
//         floorCoord2.setCoordinate(1, b2);
//         floorCoord2.setCoordinate(2, b3);
//         floorCoord2.setCoordinate(3, b4);
//         
//         Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
//         Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
//         ColoringAttributes greenFloor = new ColoringAttributes(green, 1);
//         ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
// 
//         Appearance fa = new Appearance();
//         Appearance fb = new Appearance();
// 
//         fa.setColoringAttributes(blueFloor);
//         fb.setColoringAttributes(greenFloor);
//         
//         Shape3D fs3d = new Shape3D(floorCoord, fa);
//         Shape3D fs3d2 = new Shape3D(floorCoord2, fb);
        
//         BranchGroup scene = new BranchGroup();
        BranchGroup scene = createSceneGraph();
//         scene.addChild(fs3d);
//         scene.addChild(fs3d2);
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        //su.getViewingPlatform().setNominalViewingTransform();
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor

    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();
        
        TransformGroup floor = makeFace("floor", new Color3f(0.0f, 0.1f, 0.4f));    // blue
        TransformGroup ceiling = makeFace("ceiling", new Color3f(0.9f, 0.9f, 0f));  // yellow
        TransformGroup back = makeFace("back", new Color3f(0.0f, 0.5f, 0.1f));      // green
        TransformGroup front = makeFace("front", new Color3f(0.8f, 0.1f, 0.7f));    // purple
        TransformGroup left = makeFace("left", new Color3f(0.8f, 0.3f, 0.2f));      // red
        TransformGroup right = makeFace("right", new Color3f(1.0f, 1.0f, 1.0f));    // white
        
        Shape3D grid = makeGrid();
        
        objRoot.addChild(floor);
        objRoot.addChild(back);
        objRoot.addChild(left);
        objRoot.addChild(right);
        objRoot.addChild(front);
        objRoot.addChild(ceiling);
        objRoot.addChild(grid);
        
        return objRoot;
    } // end of method

    private TransformGroup makeFace(String face, Color3f faceColor) {
        // create standard Quad
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-15f, 0f, 15f));
        qa.setCoordinate(1, new Point3f(15f, 0f, 15f));
        qa.setCoordinate(2, new Point3f(15f, 0f, -15f));
        qa.setCoordinate(3, new Point3f(-15f, 0f, -15f));
        
        // set color for quad
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        // translate quad to appropriate place for room structure
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.rotX(Math.PI);
                t3d.setTranslation(new Vector3f(0f, 15f, 0f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on x-axis
                break;
            case "left": t3d.rotZ(-Math.PI/2);
                t3d.setTranslation(new Vector3f(-15f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on y-axis
                break;
            case "right": t3d.rotZ(Math.PI/2);
                t3d.setTranslation(new Vector3f(15f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.rotX(-Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, 15f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.rotX(Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, -15f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
        return tg;
    }
    
    // makes lines to divide constructed area into 3x3 grid for each side
    private Shape3D makeGrid() {
        
        // set up coords
        Point3f[] gridCoords = new Point3f[32];
        gridCoords[0] = new Point3f(-15f, 15f, 15f);
        gridCoords[1] = new Point3f(15f, 15f, 15f);
        gridCoords[2] = new Point3f(15f, -15f, 15f);
        gridCoords[3] = new Point3f(-15f, -15f, 15f);
        
        Point3f adjust = new Point3f(0, 0, -15);
        for (int i = 4; i < gridCoords.length / 2; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        gridCoords[16] = new Point3f(gridCoords[1]);
        gridCoords[17] = new Point3f(gridCoords[13]);
        gridCoords[18] = new Point3f(gridCoords[14]);
        gridCoords[19] = new Point3f(gridCoords[2]);
        
        adjust = new Point3f(-15, 0, 0);
        for (int i = 20; i < gridCoords.length; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        // create line array object
        LineArray grid = new LineArray(32, LineArray.COORDINATES);
        for (int i = 0; i < gridCoords.length; i++) {
            grid.setCoordinate(i, gridCoords[i]);
        }
        
        return new Shape3D(grid);
        // return shape 3d

    }
    
  private void orbitControls(Canvas3D c)
  /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
  {
    OrbitBehavior orbit = 
        new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
    orbit.setSchedulingBounds(bounds);

    ViewingPlatform vp = su.getViewingPlatform();
    vp.setViewPlatformBehavior(orbit);      
  }  // end of orbitControls()



  private void initUserPosition()
  // Set the user's initial viewpoint using lookAt()
  {
    ViewingPlatform vp = su.getViewingPlatform();
    TransformGroup steerTG = vp.getViewPlatformTransform();

    Transform3D t3d = new Transform3D();
    steerTG.getTransform(t3d);

    // args are: viewer posn, where looking, up direction
    t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
    t3d.invert();

    steerTG.setTransform(t3d);
  }  // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3D(), 256, 256);
//         new MyOwn3D();
    }

}

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				7770813
			</iTime>
			<fName>
				MyOwn3D.java
			</fName>
			<fSize>
				9031.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

// import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;



public class MyOwn3D extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere();   // for environment nodes
    private SimpleUniverse su;
    
    // points for 8 corners of the room
    
    
    public MyOwn3D() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
//         Point3f a1 = new Point3f(-15f, -15f, -15f);
//         Point3f a2 = new Point3f(15f, -15f, -15f);
//         Point3f a3 = new Point3f(15f, 15f, -15f);
//         Point3f a4 = new Point3f(-15f, 15f, -15f);
//         
//         QuadArray floorCoord = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord.setCoordinate(0, a1);
//         floorCoord.setCoordinate(1, a2);
//         floorCoord.setCoordinate(2, a3);
//         floorCoord.setCoordinate(3, a4);
//         
//         Point3f b1 = new Point3f(-15f, -15f, 15f);
//         Point3f b2 = new Point3f(15f, -15f, 15f);
//         Point3f b3 = new Point3f(15f, 15f, 15f);
//         Point3f b4 = new Point3f(-15f, 15f, 15f);
//         
//         QuadArray floorCoord2 = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord2.setCoordinate(0, b1);
//         floorCoord2.setCoordinate(1, b2);
//         floorCoord2.setCoordinate(2, b3);
//         floorCoord2.setCoordinate(3, b4);
//         
//         Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
//         Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
//         ColoringAttributes greenFloor = new ColoringAttributes(green, 1);
//         ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
// 
//         Appearance fa = new Appearance();
//         Appearance fb = new Appearance();
// 
//         fa.setColoringAttributes(blueFloor);
//         fb.setColoringAttributes(greenFloor);
//         
//         Shape3D fs3d = new Shape3D(floorCoord, fa);
//         Shape3D fs3d2 = new Shape3D(floorCoord2, fb);
        
//         BranchGroup scene = new BranchGroup();
        BranchGroup scene = createSceneGraph();
//         scene.addChild(fs3d);
//         scene.addChild(fs3d2);
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        //su.getViewingPlatform().setNominalViewingTransform();
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor

    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();
        
        TransformGroup floor = makeFace("floor", new Color3f(0.0f, 0.1f, 0.4f));    // blue
        TransformGroup ceiling = makeFace("ceiling", new Color3f(0.9f, 0.9f, 0f));  // yellow
        TransformGroup back = makeFace("back", new Color3f(0.0f, 0.5f, 0.1f));      // green
        TransformGroup front = makeFace("front", new Color3f(0.8f, 0.1f, 0.7f));    // purple
        TransformGroup left = makeFace("left", new Color3f(0.8f, 0.3f, 0.2f));      // red
        TransformGroup right = makeFace("right", new Color3f(1.0f, 1.0f, 1.0f));    // white
        
        Shape3D grid = makeGrid();
        
        objRoot.addChild(floor);
        objRoot.addChild(back);
        objRoot.addChild(left);
        objRoot.addChild(right);
        objRoot.addChild(front);
        objRoot.addChild(ceiling);
        objRoot.addChild(grid);
        
        return objRoot;
    } // end of method

    private TransformGroup makeFace(String face, Color3f faceColor) {
        // create standard Quad
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-15f, 0f, 15f));
        qa.setCoordinate(1, new Point3f(15f, 0f, 15f));
        qa.setCoordinate(2, new Point3f(15f, 0f, -15f));
        qa.setCoordinate(3, new Point3f(-15f, 0f, -15f));
        
        // set color for quad
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        // translate quad to appropriate place for room structure
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.rotX(Math.PI);
                t3d.setTranslation(new Vector3f(0f, 15f, 0f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on x-axis
                break;
            case "left": t3d.rotZ(-Math.PI/2);
                t3d.setTranslation(new Vector3f(-15f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on y-axis
                break;
            case "right": t3d.rotZ(Math.PI/2);
                t3d.setTranslation(new Vector3f(15f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.rotX(-Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, 15f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.rotX(Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, -15f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
        return tg;
    }
    
    // makes lines to divide constructed area into 3x3 grid for each side
    private Shape3D makeGrid() {
        
        // set up coords
        Point3f[] gridCoords = new Point3f[32];
        gridCoords[0] = new Point3f(-15f, 15f, 15f);
        gridCoords[1] = new Point3f(15f, 15f, 15f);
        gridCoords[2] = new Point3f(15f, -15f, 15f);
        gridCoords[3] = new Point3f(-15f, -15f, 15f);
        
        Point3f adjust = new Point3f(0, 0, -10);
        for (int i = 4; i < gridCoords.length / 2; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        gridCoords[16] = new Point3f(gridCoords[1]);
        gridCoords[17] = new Point3f(gridCoords[13]);
        gridCoords[18] = new Point3f(gridCoords[14]);
        gridCoords[19] = new Point3f(gridCoords[2]);
        
        adjust = new Point3f(-10, 0, 0);
        for (int i = 20; i < gridCoords.length; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        // create line array object
        LineArray grid = new LineArray(32, LineArray.COORDINATES);
        for (int i = 0; i < gridCoords.length; i++) {
            grid.setCoordinate(i, gridCoords[i]);
        }
        
        return new Shape3D(grid);
        // return shape 3d

    }
    
  private void orbitControls(Canvas3D c)
  /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
  {
    OrbitBehavior orbit = 
        new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
    orbit.setSchedulingBounds(bounds);

    ViewingPlatform vp = su.getViewingPlatform();
    vp.setViewPlatformBehavior(orbit);      
  }  // end of orbitControls()



  private void initUserPosition()
  // Set the user's initial viewpoint using lookAt()
  {
    ViewingPlatform vp = su.getViewingPlatform();
    TransformGroup steerTG = vp.getViewPlatformTransform();

    Transform3D t3d = new Transform3D();
    steerTG.getTransform(t3d);

    // args are: viewer posn, where looking, up direction
    t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
    t3d.invert();

    steerTG.setTransform(t3d);
  }  // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3D(), 256, 256);
//         new MyOwn3D();
    }

}

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				7866547
			</iTime>
			<fName>
				MyOwn3D.java
			</fName>
			<fSize>
				9049.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

// import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;



public class MyOwn3D extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere();   // for environment nodes
    private SimpleUniverse su;
    
    // points for 8 corners of the room
    
    
    public MyOwn3D() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
//         Point3f a1 = new Point3f(-15f, -15f, -15f);
//         Point3f a2 = new Point3f(15f, -15f, -15f);
//         Point3f a3 = new Point3f(15f, 15f, -15f);
//         Point3f a4 = new Point3f(-15f, 15f, -15f);
//         
//         QuadArray floorCoord = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord.setCoordinate(0, a1);
//         floorCoord.setCoordinate(1, a2);
//         floorCoord.setCoordinate(2, a3);
//         floorCoord.setCoordinate(3, a4);
//         
//         Point3f b1 = new Point3f(-15f, -15f, 15f);
//         Point3f b2 = new Point3f(15f, -15f, 15f);
//         Point3f b3 = new Point3f(15f, 15f, 15f);
//         Point3f b4 = new Point3f(-15f, 15f, 15f);
//         
//         QuadArray floorCoord2 = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord2.setCoordinate(0, b1);
//         floorCoord2.setCoordinate(1, b2);
//         floorCoord2.setCoordinate(2, b3);
//         floorCoord2.setCoordinate(3, b4);
//         
//         Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
//         Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
//         ColoringAttributes greenFloor = new ColoringAttributes(green, 1);
//         ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
// 
//         Appearance fa = new Appearance();
//         Appearance fb = new Appearance();
// 
//         fa.setColoringAttributes(blueFloor);
//         fb.setColoringAttributes(greenFloor);
//         
//         Shape3D fs3d = new Shape3D(floorCoord, fa);
//         Shape3D fs3d2 = new Shape3D(floorCoord2, fb);
        
//         BranchGroup scene = new BranchGroup();
        BranchGroup scene = createSceneGraph();
//         scene.addChild(fs3d);
//         scene.addChild(fs3d2);
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        //su.getViewingPlatform().setNominalViewingTransform();
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor

    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();
        
//         TransformGroup floor = makeFace("floor", new Color3f(0.0f, 0.1f, 0.4f));    // blue
//         TransformGroup ceiling = makeFace("ceiling", new Color3f(0.9f, 0.9f, 0f));  // yellow
//         TransformGroup back = makeFace("back", new Color3f(0.0f, 0.5f, 0.1f));      // green
//         TransformGroup front = makeFace("front", new Color3f(0.8f, 0.1f, 0.7f));    // purple
//         TransformGroup left = makeFace("left", new Color3f(0.8f, 0.3f, 0.2f));      // red
//         TransformGroup right = makeFace("right", new Color3f(1.0f, 1.0f, 1.0f));    // white
        
        Shape3D grid = makeGrid();
        
        objRoot.addChild(floor);
        objRoot.addChild(back);
        objRoot.addChild(left);
        objRoot.addChild(right);
        objRoot.addChild(front);
        objRoot.addChild(ceiling);
        objRoot.addChild(grid);
        
        return objRoot;
    } // end of method

    private TransformGroup makeFace(String face, Color3f faceColor) {
        // create standard Quad
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-15f, 0f, 15f));
        qa.setCoordinate(1, new Point3f(15f, 0f, 15f));
        qa.setCoordinate(2, new Point3f(15f, 0f, -15f));
        qa.setCoordinate(3, new Point3f(-15f, 0f, -15f));
        
        // set color for quad
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        // translate quad to appropriate place for room structure
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.rotX(Math.PI);
                t3d.setTranslation(new Vector3f(0f, 15f, 0f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on x-axis
                break;
            case "left": t3d.rotZ(-Math.PI/2);
                t3d.setTranslation(new Vector3f(-15f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on y-axis
                break;
            case "right": t3d.rotZ(Math.PI/2);
                t3d.setTranslation(new Vector3f(15f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.rotX(-Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, 15f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.rotX(Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, -15f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
        return tg;
    }
    
    // makes lines to divide constructed area into 3x3 grid for each side
    private Shape3D makeGrid() {
        
        // set up coords
        Point3f[] gridCoords = new Point3f[32];
        gridCoords[0] = new Point3f(-15f, 15f, 15f);
        gridCoords[1] = new Point3f(15f, 15f, 15f);
        gridCoords[2] = new Point3f(15f, -15f, 15f);
        gridCoords[3] = new Point3f(-15f, -15f, 15f);
        
        Point3f adjust = new Point3f(0, 0, -10);
        for (int i = 4; i < gridCoords.length / 2; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        gridCoords[16] = new Point3f(gridCoords[1]);
        gridCoords[17] = new Point3f(gridCoords[13]);
        gridCoords[18] = new Point3f(gridCoords[14]);
        gridCoords[19] = new Point3f(gridCoords[2]);
        
        adjust = new Point3f(-10, 0, 0);
        for (int i = 20; i < gridCoords.length; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        // create line array object
        LineArray grid = new LineArray(32, LineArray.COORDINATES);
        for (int i = 0; i < gridCoords.length; i++) {
            grid.setCoordinate(i, gridCoords[i]);
        }
        
        return new Shape3D(grid);
        // return shape 3d

    }
    
  private void orbitControls(Canvas3D c)
  /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
  {
    OrbitBehavior orbit = 
        new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
    orbit.setSchedulingBounds(bounds);

    ViewingPlatform vp = su.getViewingPlatform();
    vp.setViewPlatformBehavior(orbit);      
  }  // end of orbitControls()



  private void initUserPosition()
  // Set the user's initial viewpoint using lookAt()
  {
    ViewingPlatform vp = su.getViewingPlatform();
    TransformGroup steerTG = vp.getViewPlatformTransform();

    Transform3D t3d = new Transform3D();
    steerTG.getTransform(t3d);

    // args are: viewer posn, where looking, up direction
    t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
    t3d.invert();

    steerTG.setTransform(t3d);
  }  // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3D(), 256, 256);
//         new MyOwn3D();
    }

}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				121
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable floor
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				122
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable back
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				123
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable left
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				124
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable right
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				125
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable front
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				126
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable ceiling
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				7882688
			</iTime>
			<fName>
				MyOwn3D.java
			</fName>
			<fSize>
				9067.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

// import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;



public class MyOwn3D extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere();   // for environment nodes
    private SimpleUniverse su;
    
    // points for 8 corners of the room
    
    
    public MyOwn3D() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
//         Point3f a1 = new Point3f(-15f, -15f, -15f);
//         Point3f a2 = new Point3f(15f, -15f, -15f);
//         Point3f a3 = new Point3f(15f, 15f, -15f);
//         Point3f a4 = new Point3f(-15f, 15f, -15f);
//         
//         QuadArray floorCoord = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord.setCoordinate(0, a1);
//         floorCoord.setCoordinate(1, a2);
//         floorCoord.setCoordinate(2, a3);
//         floorCoord.setCoordinate(3, a4);
//         
//         Point3f b1 = new Point3f(-15f, -15f, 15f);
//         Point3f b2 = new Point3f(15f, -15f, 15f);
//         Point3f b3 = new Point3f(15f, 15f, 15f);
//         Point3f b4 = new Point3f(-15f, 15f, 15f);
//         
//         QuadArray floorCoord2 = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord2.setCoordinate(0, b1);
//         floorCoord2.setCoordinate(1, b2);
//         floorCoord2.setCoordinate(2, b3);
//         floorCoord2.setCoordinate(3, b4);
//         
//         Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
//         Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
//         ColoringAttributes greenFloor = new ColoringAttributes(green, 1);
//         ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
// 
//         Appearance fa = new Appearance();
//         Appearance fb = new Appearance();
// 
//         fa.setColoringAttributes(blueFloor);
//         fb.setColoringAttributes(greenFloor);
//         
//         Shape3D fs3d = new Shape3D(floorCoord, fa);
//         Shape3D fs3d2 = new Shape3D(floorCoord2, fb);
        
//         BranchGroup scene = new BranchGroup();
        BranchGroup scene = createSceneGraph();
//         scene.addChild(fs3d);
//         scene.addChild(fs3d2);
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        //su.getViewingPlatform().setNominalViewingTransform();
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor

    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();
        
//         TransformGroup floor = makeFace("floor", new Color3f(0.0f, 0.1f, 0.4f));    // blue
//         TransformGroup ceiling = makeFace("ceiling", new Color3f(0.9f, 0.9f, 0f));  // yellow
//         TransformGroup back = makeFace("back", new Color3f(0.0f, 0.5f, 0.1f));      // green
//         TransformGroup front = makeFace("front", new Color3f(0.8f, 0.1f, 0.7f));    // purple
//         TransformGroup left = makeFace("left", new Color3f(0.8f, 0.3f, 0.2f));      // red
//         TransformGroup right = makeFace("right", new Color3f(1.0f, 1.0f, 1.0f));    // white
        
        Shape3D grid = makeGrid();
        
//         objRoot.addChild(floor);
//         objRoot.addChild(back);
//         objRoot.addChild(left);
//         objRoot.addChild(right);
//         objRoot.addChild(front);
//         objRoot.addChild(ceiling);
        objRoot.addChild(grid);
        
        return objRoot;
    } // end of method

    private TransformGroup makeFace(String face, Color3f faceColor) {
        // create standard Quad
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-15f, 0f, 15f));
        qa.setCoordinate(1, new Point3f(15f, 0f, 15f));
        qa.setCoordinate(2, new Point3f(15f, 0f, -15f));
        qa.setCoordinate(3, new Point3f(-15f, 0f, -15f));
        
        // set color for quad
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        // translate quad to appropriate place for room structure
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.rotX(Math.PI);
                t3d.setTranslation(new Vector3f(0f, 15f, 0f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on x-axis
                break;
            case "left": t3d.rotZ(-Math.PI/2);
                t3d.setTranslation(new Vector3f(-15f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on y-axis
                break;
            case "right": t3d.rotZ(Math.PI/2);
                t3d.setTranslation(new Vector3f(15f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.rotX(-Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, 15f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.rotX(Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, -15f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
        return tg;
    }
    
    // makes lines to divide constructed area into 3x3 grid for each side
    private Shape3D makeGrid() {
        
        // set up coords
        Point3f[] gridCoords = new Point3f[32];
        gridCoords[0] = new Point3f(-15f, 15f, 15f);
        gridCoords[1] = new Point3f(15f, 15f, 15f);
        gridCoords[2] = new Point3f(15f, -15f, 15f);
        gridCoords[3] = new Point3f(-15f, -15f, 15f);
        
        Point3f adjust = new Point3f(0, 0, -10);
        for (int i = 4; i < gridCoords.length / 2; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        gridCoords[16] = new Point3f(gridCoords[1]);
        gridCoords[17] = new Point3f(gridCoords[13]);
        gridCoords[18] = new Point3f(gridCoords[14]);
        gridCoords[19] = new Point3f(gridCoords[2]);
        
        adjust = new Point3f(-10, 0, 0);
        for (int i = 20; i < gridCoords.length; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        // create line array object
        LineArray grid = new LineArray(32, LineArray.COORDINATES);
        for (int i = 0; i < gridCoords.length; i++) {
            grid.setCoordinate(i, gridCoords[i]);
        }
        
        return new Shape3D(grid);
        // return shape 3d

    }
    
  private void orbitControls(Canvas3D c)
  /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
  {
    OrbitBehavior orbit = 
        new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
    orbit.setSchedulingBounds(bounds);

    ViewingPlatform vp = su.getViewingPlatform();
    vp.setViewPlatformBehavior(orbit);      
  }  // end of orbitControls()



  private void initUserPosition()
  // Set the user's initial viewpoint using lookAt()
  {
    ViewingPlatform vp = su.getViewingPlatform();
    TransformGroup steerTG = vp.getViewPlatformTransform();

    Transform3D t3d = new Transform3D();
    steerTG.getTransform(t3d);

    // args are: viewer posn, where looking, up direction
    t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
    t3d.invert();

    steerTG.setTransform(t3d);
  }  // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3D(), 256, 256);
//         new MyOwn3D();
    }

}

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				8537359
			</iTime>
			<fName>
				MyOwn3D.java
			</fName>
			<fSize>
				9097.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

// import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;



public class MyOwn3D extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere();   // for environment nodes
    private SimpleUniverse su;
    
    // points for 8 corners of the room
    
    
    public MyOwn3D() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
//         Point3f a1 = new Point3f(-15f, -15f, -15f);
//         Point3f a2 = new Point3f(15f, -15f, -15f);
//         Point3f a3 = new Point3f(15f, 15f, -15f);
//         Point3f a4 = new Point3f(-15f, 15f, -15f);
//         
//         QuadArray floorCoord = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord.setCoordinate(0, a1);
//         floorCoord.setCoordinate(1, a2);
//         floorCoord.setCoordinate(2, a3);
//         floorCoord.setCoordinate(3, a4);
//         
//         Point3f b1 = new Point3f(-15f, -15f, 15f);
//         Point3f b2 = new Point3f(15f, -15f, 15f);
//         Point3f b3 = new Point3f(15f, 15f, 15f);
//         Point3f b4 = new Point3f(-15f, 15f, 15f);
//         
//         QuadArray floorCoord2 = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord2.setCoordinate(0, b1);
//         floorCoord2.setCoordinate(1, b2);
//         floorCoord2.setCoordinate(2, b3);
//         floorCoord2.setCoordinate(3, b4);
//         
//         Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
//         Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
//         ColoringAttributes greenFloor = new ColoringAttributes(green, 1);
//         ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
// 
//         Appearance fa = new Appearance();
//         Appearance fb = new Appearance();
// 
//         fa.setColoringAttributes(blueFloor);
//         fb.setColoringAttributes(greenFloor);
//         
//         Shape3D fs3d = new Shape3D(floorCoord, fa);
//         Shape3D fs3d2 = new Shape3D(floorCoord2, fb);
        
//         BranchGroup scene = new BranchGroup();
        BranchGroup scene = createSceneGraph();
//         scene.addChild(fs3d);
//         scene.addChild(fs3d2);
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        //su.getViewingPlatform().setNominalViewingTransform();
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor

    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();
        
//         TransformGroup floor = makeFace("floor", new Color3f(0.0f, 0.1f, 0.4f));    // blue
//         TransformGroup ceiling = makeFace("ceiling", new Color3f(0.9f, 0.9f, 0f));  // yellow
//         TransformGroup back = makeFace("back", new Color3f(0.0f, 0.5f, 0.1f));      // green
//         TransformGroup front = makeFace("front", new Color3f(0.8f, 0.1f, 0.7f));    // purple
//         TransformGroup left = makeFace("left", new Color3f(0.8f, 0.3f, 0.2f));      // red
//         TransformGroup right = makeFace("right", new Color3f(1.0f, 1.0f, 1.0f));    // white
        
        Shape3D grid = makeGrid();
        
//         objRoot.addChild(floor);
//         objRoot.addChild(back);
//         objRoot.addChild(left);
//         objRoot.addChild(right);
//         objRoot.addChild(front);
//         objRoot.addChild(ceiling);
        objRoot.addChild(grid);
        
        return objRoot;
    } // end of method

    private TransformGroup makeFace(String face, Color3f faceColor) {
        // create standard Quad
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-15f, 0f, 15f));
        qa.setCoordinate(1, new Point3f(15f, 0f, 15f));
        qa.setCoordinate(2, new Point3f(15f, 0f, -15f));
        qa.setCoordinate(3, new Point3f(-15f, 0f, -15f));
        
        // set color for quad
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        // translate quad to appropriate place for room structure
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.rotX(Math.PI);
                t3d.setTranslation(new Vector3f(0f, 15f, 0f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on x-axis
                break;
            case "left": t3d.rotZ(-Math.PI/2);
                t3d.setTranslation(new Vector3f(-15f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on y-axis
                break;
            case "right": t3d.rotZ(Math.PI/2);
                t3d.setTranslation(new Vector3f(15f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.rotX(-Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, 15f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.rotX(Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, -15f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
        return tg;
    }
    
    // makes lines to divide constructed area into 3x3 grid for each side
    private Shape3D makeGrid() {
        
        // set up coords
        Point3f[] gridCoords = new Point3f[32];
        gridCoords[0] = new Point3f(-15f, 15f, 15f);
        gridCoords[1] = new Point3f(15f, 15f, 15f);
        gridCoords[2] = new Point3f(15f, -15f, 15f);
        gridCoords[3] = new Point3f(-15f, -15f, 15f);
        
        Point3f adjust = new Point3f(0, 0, -10);
        for (int i = 4; i < gridCoords.length / 2; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
//         gridCoords[16] = new Point3f(gridCoords[1]);
//         gridCoords[17] = new Point3f(gridCoords[13]);
//         gridCoords[18] = new Point3f(gridCoords[14]);
//         gridCoords[19] = new Point3f(gridCoords[2]);
//         
//         adjust = new Point3f(-10, 0, 0);
//         for (int i = 20; i < gridCoords.length; i++) {
//             gridCoords[i] = new Point3f(gridCoords[i - 4]);
//             gridCoords[i].add(adjust);
//         }
        
        // create line array object
        LineArray grid = new LineArray(32, LineArray.COORDINATES);
        for (int i = 0; i < gridCoords.length; i++) {
            grid.setCoordinate(i, gridCoords[i]);
        }
        
        return new Shape3D(grid);
        // return shape 3d

    }
    
  private void orbitControls(Canvas3D c)
  /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
  {
    OrbitBehavior orbit = 
        new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
    orbit.setSchedulingBounds(bounds);

    ViewingPlatform vp = su.getViewingPlatform();
    vp.setViewPlatformBehavior(orbit);      
  }  // end of orbitControls()



  private void initUserPosition()
  // Set the user's initial viewpoint using lookAt()
  {
    ViewingPlatform vp = su.getViewingPlatform();
    TransformGroup steerTG = vp.getViewPlatformTransform();

    Transform3D t3d = new Transform3D();
    steerTG.getTransform(t3d);

    // args are: viewer posn, where looking, up direction
    t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
    t3d.invert();

    steerTG.setTransform(t3d);
  }  // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3D(), 256, 256);
//         new MyOwn3D();
    }

}

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				8608750
			</iTime>
			<fName>
				MyOwn3D.java
			</fName>
			<fSize>
				9101.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

// import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;



public class MyOwn3D extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere();   // for environment nodes
    private SimpleUniverse su;
    
    // points for 8 corners of the room
    
    
    public MyOwn3D() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
//         Point3f a1 = new Point3f(-15f, -15f, -15f);
//         Point3f a2 = new Point3f(15f, -15f, -15f);
//         Point3f a3 = new Point3f(15f, 15f, -15f);
//         Point3f a4 = new Point3f(-15f, 15f, -15f);
//         
//         QuadArray floorCoord = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord.setCoordinate(0, a1);
//         floorCoord.setCoordinate(1, a2);
//         floorCoord.setCoordinate(2, a3);
//         floorCoord.setCoordinate(3, a4);
//         
//         Point3f b1 = new Point3f(-15f, -15f, 15f);
//         Point3f b2 = new Point3f(15f, -15f, 15f);
//         Point3f b3 = new Point3f(15f, 15f, 15f);
//         Point3f b4 = new Point3f(-15f, 15f, 15f);
//         
//         QuadArray floorCoord2 = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord2.setCoordinate(0, b1);
//         floorCoord2.setCoordinate(1, b2);
//         floorCoord2.setCoordinate(2, b3);
//         floorCoord2.setCoordinate(3, b4);
//         
//         Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
//         Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
//         ColoringAttributes greenFloor = new ColoringAttributes(green, 1);
//         ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
// 
//         Appearance fa = new Appearance();
//         Appearance fb = new Appearance();
// 
//         fa.setColoringAttributes(blueFloor);
//         fb.setColoringAttributes(greenFloor);
//         
//         Shape3D fs3d = new Shape3D(floorCoord, fa);
//         Shape3D fs3d2 = new Shape3D(floorCoord2, fb);
        
//         BranchGroup scene = new BranchGroup();
        BranchGroup scene = createSceneGraph();
//         scene.addChild(fs3d);
//         scene.addChild(fs3d2);
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        //su.getViewingPlatform().setNominalViewingTransform();
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor

    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();
        
//         TransformGroup floor = makeFace("floor", new Color3f(0.0f, 0.1f, 0.4f));    // blue
//         TransformGroup ceiling = makeFace("ceiling", new Color3f(0.9f, 0.9f, 0f));  // yellow
//         TransformGroup back = makeFace("back", new Color3f(0.0f, 0.5f, 0.1f));      // green
//         TransformGroup front = makeFace("front", new Color3f(0.8f, 0.1f, 0.7f));    // purple
//         TransformGroup left = makeFace("left", new Color3f(0.8f, 0.3f, 0.2f));      // red
//         TransformGroup right = makeFace("right", new Color3f(1.0f, 1.0f, 1.0f));    // white
        
        Shape3D grid = makeGrid();
        
//         objRoot.addChild(floor);
//         objRoot.addChild(back);
//         objRoot.addChild(left);
//         objRoot.addChild(right);
//         objRoot.addChild(front);
//         objRoot.addChild(ceiling);
        objRoot.addChild(grid);
        
        return objRoot;
    } // end of method

    private TransformGroup makeFace(String face, Color3f faceColor) {
        // create standard Quad
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-15f, 0f, 15f));
        qa.setCoordinate(1, new Point3f(15f, 0f, 15f));
        qa.setCoordinate(2, new Point3f(15f, 0f, -15f));
        qa.setCoordinate(3, new Point3f(-15f, 0f, -15f));
        
        // set color for quad
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        // translate quad to appropriate place for room structure
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.rotX(Math.PI);
                t3d.setTranslation(new Vector3f(0f, 15f, 0f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on x-axis
                break;
            case "left": t3d.rotZ(-Math.PI/2);
                t3d.setTranslation(new Vector3f(-15f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on y-axis
                break;
            case "right": t3d.rotZ(Math.PI/2);
                t3d.setTranslation(new Vector3f(15f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.rotX(-Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, 15f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.rotX(Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, -15f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
        return tg;
    }
    
    // makes lines to divide constructed area into 3x3 grid for each side
    private Shape3D makeGrid() {
        
        // set up coords
        Point3f[] gridCoords = new Point3f[32];
        gridCoords[0] = new Point3f(-15f, 15f, 15f);
        gridCoords[1] = new Point3f(15f, 15f, 15f);
        gridCoords[2] = new Point3f(15f, -15f, 15f);
        gridCoords[3] = new Point3f(-15f, -15f, 15f);
        
        Point3f adjust = new Point3f(0, 0, -10);
        for (int i = 4; i < gridCoords.length / 2; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
//         gridCoords[16] = new Point3f(gridCoords[1]);
//         gridCoords[17] = new Point3f(gridCoords[13]);
//         gridCoords[18] = new Point3f(gridCoords[14]);
//         gridCoords[19] = new Point3f(gridCoords[2]);
//         
//         adjust = new Point3f(-10, 0, 0);
//         for (int i = 20; i < gridCoords.length; i++) {
//             gridCoords[i] = new Point3f(gridCoords[i - 4]);
//             gridCoords[i].add(adjust);
//         }
        
        // create line array object
        LineArray grid = new LineArray(32, LineArray.COORDINATES);
        for (int i = 0; i < gridCoords.length / 2; i++) {
            grid.setCoordinate(i, gridCoords[i]);
        }
        
        return new Shape3D(grid);
        // return shape 3d

    }
    
  private void orbitControls(Canvas3D c)
  /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
  {
    OrbitBehavior orbit = 
        new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
    orbit.setSchedulingBounds(bounds);

    ViewingPlatform vp = su.getViewingPlatform();
    vp.setViewPlatformBehavior(orbit);      
  }  // end of orbitControls()



  private void initUserPosition()
  // Set the user's initial viewpoint using lookAt()
  {
    ViewingPlatform vp = su.getViewingPlatform();
    TransformGroup steerTG = vp.getViewPlatformTransform();

    Transform3D t3d = new Transform3D();
    steerTG.getTransform(t3d);

    // args are: viewer posn, where looking, up direction
    t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
    t3d.invert();

    steerTG.setTransform(t3d);
  }  // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3D(), 256, 256);
//         new MyOwn3D();
    }

}

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				8707531
			</iTime>
			<fName>
				MyOwn3D.java
			</fName>
			<fSize>
				9116.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

// import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;



public class MyOwn3D extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere();   // for environment nodes
    private SimpleUniverse su;
    
    // points for 8 corners of the room
    
    
    public MyOwn3D() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
//         Point3f a1 = new Point3f(-15f, -15f, -15f);
//         Point3f a2 = new Point3f(15f, -15f, -15f);
//         Point3f a3 = new Point3f(15f, 15f, -15f);
//         Point3f a4 = new Point3f(-15f, 15f, -15f);
//         
//         QuadArray floorCoord = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord.setCoordinate(0, a1);
//         floorCoord.setCoordinate(1, a2);
//         floorCoord.setCoordinate(2, a3);
//         floorCoord.setCoordinate(3, a4);
//         
//         Point3f b1 = new Point3f(-15f, -15f, 15f);
//         Point3f b2 = new Point3f(15f, -15f, 15f);
//         Point3f b3 = new Point3f(15f, 15f, 15f);
//         Point3f b4 = new Point3f(-15f, 15f, 15f);
//         
//         QuadArray floorCoord2 = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord2.setCoordinate(0, b1);
//         floorCoord2.setCoordinate(1, b2);
//         floorCoord2.setCoordinate(2, b3);
//         floorCoord2.setCoordinate(3, b4);
//         
//         Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
//         Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
//         ColoringAttributes greenFloor = new ColoringAttributes(green, 1);
//         ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
// 
//         Appearance fa = new Appearance();
//         Appearance fb = new Appearance();
// 
//         fa.setColoringAttributes(blueFloor);
//         fb.setColoringAttributes(greenFloor);
//         
//         Shape3D fs3d = new Shape3D(floorCoord, fa);
//         Shape3D fs3d2 = new Shape3D(floorCoord2, fb);
        
//         BranchGroup scene = new BranchGroup();
        BranchGroup scene = createSceneGraph();
//         scene.addChild(fs3d);
//         scene.addChild(fs3d2);
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        //su.getViewingPlatform().setNominalViewingTransform();
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor

    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();
        
//         TransformGroup floor = makeFace("floor", new Color3f(0.0f, 0.1f, 0.4f));    // blue
//         TransformGroup ceiling = makeFace("ceiling", new Color3f(0.9f, 0.9f, 0f));  // yellow
//         TransformGroup back = makeFace("back", new Color3f(0.0f, 0.5f, 0.1f));      // green
//         TransformGroup front = makeFace("front", new Color3f(0.8f, 0.1f, 0.7f));    // purple
//         TransformGroup left = makeFace("left", new Color3f(0.8f, 0.3f, 0.2f));      // red
//         TransformGroup right = makeFace("right", new Color3f(1.0f, 1.0f, 1.0f));    // white
        
        Shape3D grid = makeGrid();
        
//         objRoot.addChild(floor);
//         objRoot.addChild(back);
//         objRoot.addChild(left);
//         objRoot.addChild(right);
//         objRoot.addChild(front);
//         objRoot.addChild(ceiling);
        objRoot.addChild(grid);
        
        return objRoot;
    } // end of method

    private TransformGroup makeFace(String face, Color3f faceColor) {
        // create standard Quad
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-15f, 0f, 15f));
        qa.setCoordinate(1, new Point3f(15f, 0f, 15f));
        qa.setCoordinate(2, new Point3f(15f, 0f, -15f));
        qa.setCoordinate(3, new Point3f(-15f, 0f, -15f));
        
        // set color for quad
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        // translate quad to appropriate place for room structure
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.rotX(Math.PI);
                t3d.setTranslation(new Vector3f(0f, 15f, 0f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on x-axis
                break;
            case "left": t3d.rotZ(-Math.PI/2);
                t3d.setTranslation(new Vector3f(-15f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on y-axis
                break;
            case "right": t3d.rotZ(Math.PI/2);
                t3d.setTranslation(new Vector3f(15f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.rotX(-Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, 15f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.rotX(Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, -15f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
        return tg;
    }
    
    // makes lines to divide constructed area into 3x3 grid for each side
    private Shape3D makeGrid() {
        
        // set up coords
        Point3f[] gridCoords = new Point3f[32];
        gridCoords[0] = new Point3f(-15f, 15f, 15f);
        gridCoords[1] = new Point3f(15f, 15f, 15f);
        gridCoords[2] = new Point3f(15f, -15f, 15f);
        gridCoords[3] = new Point3f(-15f, -15f, 15f);
        
        Point3f adjust = new Point3f(0, 0, -10);
        for (int i = 4; i < gridCoords.length / 2; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
//         gridCoords[16] = new Point3f(gridCoords[1]);
//         gridCoords[17] = new Point3f(gridCoords[13]);
//         gridCoords[18] = new Point3f(gridCoords[14]);
//         gridCoords[19] = new Point3f(gridCoords[2]);
//         
//         adjust = new Point3f(-10, 0, 0);
//         for (int i = 20; i < gridCoords.length; i++) {
//             gridCoords[i] = new Point3f(gridCoords[i - 4]);
//             gridCoords[i].add(adjust);
//         }
        
        // create line array object
        LineStripArray grid = new LineStripArray(32, LineStripArray.COORDINATES);
        for (int i = 0; i < gridCoords.length / 2; i++) {
            grid.setCoordinate(i, gridCoords[i]);
        }
        
        return new Shape3D(grid);
        // return shape 3d

    }
    
  private void orbitControls(Canvas3D c)
  /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
  {
    OrbitBehavior orbit = 
        new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
    orbit.setSchedulingBounds(bounds);

    ViewingPlatform vp = su.getViewingPlatform();
    vp.setViewPlatformBehavior(orbit);      
  }  // end of orbitControls()



  private void initUserPosition()
  // Set the user's initial viewpoint using lookAt()
  {
    ViewingPlatform vp = su.getViewingPlatform();
    TransformGroup steerTG = vp.getViewPlatformTransform();

    Transform3D t3d = new Transform3D();
    steerTG.getTransform(t3d);

    // args are: viewer posn, where looking, up direction
    t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
    t3d.invert();

    steerTG.setTransform(t3d);
  }  // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3D(), 256, 256);
//         new MyOwn3D();
    }

}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				216
			<iErrLine>
			<iErrMessage>
				no suitable constructor found for LineStripArray(int,int)
    constructor javax.media.j3d.LineStripArray.LineStripArray(int,int,int,int[],int,int[],int[]) is not applicable
      (actual and formal argument lists differ in length)
    constructor javax.media.j3d.LineStripArray.LineStripArray(int,int,int,int[],int[]) is not applicable
      (actual and formal argument lists differ in length)
    constructor javax.media.j3d.LineStripArray.LineStripArray(int,int,int[]) is not applicable
      (actual and formal argument lists differ in length)
    constructor javax.media.j3d.LineStripArray.LineStripArray() is not applicable
      (actual and formal argument lists differ in length)
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				8714078
			</iTime>
			<fName>
				MyOwn3D.java
			</fName>
			<fSize>
				9116.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

// import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;



public class MyOwn3D extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere();   // for environment nodes
    private SimpleUniverse su;
    
    // points for 8 corners of the room
    
    
    public MyOwn3D() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
//         Point3f a1 = new Point3f(-15f, -15f, -15f);
//         Point3f a2 = new Point3f(15f, -15f, -15f);
//         Point3f a3 = new Point3f(15f, 15f, -15f);
//         Point3f a4 = new Point3f(-15f, 15f, -15f);
//         
//         QuadArray floorCoord = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord.setCoordinate(0, a1);
//         floorCoord.setCoordinate(1, a2);
//         floorCoord.setCoordinate(2, a3);
//         floorCoord.setCoordinate(3, a4);
//         
//         Point3f b1 = new Point3f(-15f, -15f, 15f);
//         Point3f b2 = new Point3f(15f, -15f, 15f);
//         Point3f b3 = new Point3f(15f, 15f, 15f);
//         Point3f b4 = new Point3f(-15f, 15f, 15f);
//         
//         QuadArray floorCoord2 = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord2.setCoordinate(0, b1);
//         floorCoord2.setCoordinate(1, b2);
//         floorCoord2.setCoordinate(2, b3);
//         floorCoord2.setCoordinate(3, b4);
//         
//         Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
//         Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
//         ColoringAttributes greenFloor = new ColoringAttributes(green, 1);
//         ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
// 
//         Appearance fa = new Appearance();
//         Appearance fb = new Appearance();
// 
//         fa.setColoringAttributes(blueFloor);
//         fb.setColoringAttributes(greenFloor);
//         
//         Shape3D fs3d = new Shape3D(floorCoord, fa);
//         Shape3D fs3d2 = new Shape3D(floorCoord2, fb);
        
//         BranchGroup scene = new BranchGroup();
        BranchGroup scene = createSceneGraph();
//         scene.addChild(fs3d);
//         scene.addChild(fs3d2);
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        //su.getViewingPlatform().setNominalViewingTransform();
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor

    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();
        
//         TransformGroup floor = makeFace("floor", new Color3f(0.0f, 0.1f, 0.4f));    // blue
//         TransformGroup ceiling = makeFace("ceiling", new Color3f(0.9f, 0.9f, 0f));  // yellow
//         TransformGroup back = makeFace("back", new Color3f(0.0f, 0.5f, 0.1f));      // green
//         TransformGroup front = makeFace("front", new Color3f(0.8f, 0.1f, 0.7f));    // purple
//         TransformGroup left = makeFace("left", new Color3f(0.8f, 0.3f, 0.2f));      // red
//         TransformGroup right = makeFace("right", new Color3f(1.0f, 1.0f, 1.0f));    // white
        
        Shape3D grid = makeGrid();
        
//         objRoot.addChild(floor);
//         objRoot.addChild(back);
//         objRoot.addChild(left);
//         objRoot.addChild(right);
//         objRoot.addChild(front);
//         objRoot.addChild(ceiling);
        objRoot.addChild(grid);
        
        return objRoot;
    } // end of method

    private TransformGroup makeFace(String face, Color3f faceColor) {
        // create standard Quad
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-15f, 0f, 15f));
        qa.setCoordinate(1, new Point3f(15f, 0f, 15f));
        qa.setCoordinate(2, new Point3f(15f, 0f, -15f));
        qa.setCoordinate(3, new Point3f(-15f, 0f, -15f));
        
        // set color for quad
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        // translate quad to appropriate place for room structure
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.rotX(Math.PI);
                t3d.setTranslation(new Vector3f(0f, 15f, 0f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on x-axis
                break;
            case "left": t3d.rotZ(-Math.PI/2);
                t3d.setTranslation(new Vector3f(-15f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on y-axis
                break;
            case "right": t3d.rotZ(Math.PI/2);
                t3d.setTranslation(new Vector3f(15f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.rotX(-Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, 15f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.rotX(Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, -15f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
        return tg;
    }
    
    // makes lines to divide constructed area into 3x3 grid for each side
    private Shape3D makeGrid() {
        
        // set up coords
        Point3f[] gridCoords = new Point3f[32];
        gridCoords[0] = new Point3f(-15f, 15f, 15f);
        gridCoords[1] = new Point3f(15f, 15f, 15f);
        gridCoords[2] = new Point3f(15f, -15f, 15f);
        gridCoords[3] = new Point3f(-15f, -15f, 15f);
        
        Point3f adjust = new Point3f(0, 0, -10);
        for (int i = 4; i < gridCoords.length / 2; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
//         gridCoords[16] = new Point3f(gridCoords[1]);
//         gridCoords[17] = new Point3f(gridCoords[13]);
//         gridCoords[18] = new Point3f(gridCoords[14]);
//         gridCoords[19] = new Point3f(gridCoords[2]);
//         
//         adjust = new Point3f(-10, 0, 0);
//         for (int i = 20; i < gridCoords.length; i++) {
//             gridCoords[i] = new Point3f(gridCoords[i - 4]);
//             gridCoords[i].add(adjust);
//         }
        
        // create line array object
        LineStripArray grid = new LineStripArray(32, LineStripArray.COORDINATES);
        for (int i = 0; i < gridCoords.length / 2; i++) {
            grid.setCoordinate(i, gridCoords[i]);
        }
        
        return new Shape3D(grid);
        // return shape 3d

    }
    
  private void orbitControls(Canvas3D c)
  /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
  {
    OrbitBehavior orbit = 
        new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
    orbit.setSchedulingBounds(bounds);

    ViewingPlatform vp = su.getViewingPlatform();
    vp.setViewPlatformBehavior(orbit);      
  }  // end of orbitControls()



  private void initUserPosition()
  // Set the user's initial viewpoint using lookAt()
  {
    ViewingPlatform vp = su.getViewingPlatform();
    TransformGroup steerTG = vp.getViewPlatformTransform();

    Transform3D t3d = new Transform3D();
    steerTG.getTransform(t3d);

    // args are: viewer posn, where looking, up direction
    t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
    t3d.invert();

    steerTG.setTransform(t3d);
  }  // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3D(), 256, 256);
//         new MyOwn3D();
    }

}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				216
			<iErrLine>
			<iErrMessage>
				no suitable constructor found for LineStripArray(int,int)
    constructor javax.media.j3d.LineStripArray.LineStripArray(int,int,int,int[],int,int[],int[]) is not applicable
      (actual and formal argument lists differ in length)
    constructor javax.media.j3d.LineStripArray.LineStripArray(int,int,int,int[],int[]) is not applicable
      (actual and formal argument lists differ in length)
    constructor javax.media.j3d.LineStripArray.LineStripArray(int,int,int[]) is not applicable
      (actual and formal argument lists differ in length)
    constructor javax.media.j3d.LineStripArray.LineStripArray() is not applicable
      (actual and formal argument lists differ in length)
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				9021250
			</iTime>
			<fName>
				MyOwn3D.java
			</fName>
			<fSize>
				9214.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

// import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;



public class MyOwn3D extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere();   // for environment nodes
    private SimpleUniverse su;
    
    // points for 8 corners of the room
    
    
    public MyOwn3D() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
//         Point3f a1 = new Point3f(-15f, -15f, -15f);
//         Point3f a2 = new Point3f(15f, -15f, -15f);
//         Point3f a3 = new Point3f(15f, 15f, -15f);
//         Point3f a4 = new Point3f(-15f, 15f, -15f);
//         
//         QuadArray floorCoord = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord.setCoordinate(0, a1);
//         floorCoord.setCoordinate(1, a2);
//         floorCoord.setCoordinate(2, a3);
//         floorCoord.setCoordinate(3, a4);
//         
//         Point3f b1 = new Point3f(-15f, -15f, 15f);
//         Point3f b2 = new Point3f(15f, -15f, 15f);
//         Point3f b3 = new Point3f(15f, 15f, 15f);
//         Point3f b4 = new Point3f(-15f, 15f, 15f);
//         
//         QuadArray floorCoord2 = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord2.setCoordinate(0, b1);
//         floorCoord2.setCoordinate(1, b2);
//         floorCoord2.setCoordinate(2, b3);
//         floorCoord2.setCoordinate(3, b4);
//         
//         Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
//         Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
//         ColoringAttributes greenFloor = new ColoringAttributes(green, 1);
//         ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
// 
//         Appearance fa = new Appearance();
//         Appearance fb = new Appearance();
// 
//         fa.setColoringAttributes(blueFloor);
//         fb.setColoringAttributes(greenFloor);
//         
//         Shape3D fs3d = new Shape3D(floorCoord, fa);
//         Shape3D fs3d2 = new Shape3D(floorCoord2, fb);
        
//         BranchGroup scene = new BranchGroup();
        BranchGroup scene = createSceneGraph();
//         scene.addChild(fs3d);
//         scene.addChild(fs3d2);
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        //su.getViewingPlatform().setNominalViewingTransform();
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor

    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();
        
//         TransformGroup floor = makeFace("floor", new Color3f(0.0f, 0.1f, 0.4f));    // blue
//         TransformGroup ceiling = makeFace("ceiling", new Color3f(0.9f, 0.9f, 0f));  // yellow
//         TransformGroup back = makeFace("back", new Color3f(0.0f, 0.5f, 0.1f));      // green
//         TransformGroup front = makeFace("front", new Color3f(0.8f, 0.1f, 0.7f));    // purple
//         TransformGroup left = makeFace("left", new Color3f(0.8f, 0.3f, 0.2f));      // red
//         TransformGroup right = makeFace("right", new Color3f(1.0f, 1.0f, 1.0f));    // white
        
        Shape3D grid = makeGrid();
        
//         objRoot.addChild(floor);
//         objRoot.addChild(back);
//         objRoot.addChild(left);
//         objRoot.addChild(right);
//         objRoot.addChild(front);
//         objRoot.addChild(ceiling);
        objRoot.addChild(grid);
        
        return objRoot;
    } // end of method

    private TransformGroup makeFace(String face, Color3f faceColor) {
        // create standard Quad
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-15f, 0f, 15f));
        qa.setCoordinate(1, new Point3f(15f, 0f, 15f));
        qa.setCoordinate(2, new Point3f(15f, 0f, -15f));
        qa.setCoordinate(3, new Point3f(-15f, 0f, -15f));
        
        // set color for quad
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        // translate quad to appropriate place for room structure
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.rotX(Math.PI);
                t3d.setTranslation(new Vector3f(0f, 15f, 0f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on x-axis
                break;
            case "left": t3d.rotZ(-Math.PI/2);
                t3d.setTranslation(new Vector3f(-15f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on y-axis
                break;
            case "right": t3d.rotZ(Math.PI/2);
                t3d.setTranslation(new Vector3f(15f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.rotX(-Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, 15f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.rotX(Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, -15f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
        return tg;
    }
    
    // makes lines to divide constructed area into 3x3 grid for each side
    private Shape3D makeGrid() {
        
        // set up coords
        Point3f[] gridCoords = new Point3f[32];
        gridCoords[0] = new Point3f(-15f, 15f, 15f);
        gridCoords[1] = new Point3f(15f, 15f, 15f);
        gridCoords[2] = new Point3f(15f, -15f, 15f);
        gridCoords[3] = new Point3f(-15f, -15f, 15f);
        
        Point3f adjust = new Point3f(0, 0, -10);
        for (int i = 4; i < gridCoords.length / 2; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
//         gridCoords[16] = new Point3f(gridCoords[1]);
//         gridCoords[17] = new Point3f(gridCoords[13]);
//         gridCoords[18] = new Point3f(gridCoords[14]);
//         gridCoords[19] = new Point3f(gridCoords[2]);
//         
//         adjust = new Point3f(-10, 0, 0);
//         for (int i = 20; i < gridCoords.length; i++) {
//             gridCoords[i] = new Point3f(gridCoords[i - 4]);
//             gridCoords[i].add(adjust);
//         }
        int[] lineCounts = new int[4];
        for (int i = 0; i < 4; i++) {lineCounts[i] = 4}
        // create line array object
        LineStripArray grid = new LineStripArray(32, LineStripArray.COORDINATES, lineCounts);
        for (int i = 0; i < gridCoords.length / 2; i++) {
            grid.setCoordinate(i, gridCoords[i]);
        }
        
        return new Shape3D(grid);
        // return shape 3d

    }
    
  private void orbitControls(Canvas3D c)
  /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
  {
    OrbitBehavior orbit = 
        new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
    orbit.setSchedulingBounds(bounds);

    ViewingPlatform vp = su.getViewingPlatform();
    vp.setViewPlatformBehavior(orbit);      
  }  // end of orbitControls()



  private void initUserPosition()
  // Set the user's initial viewpoint using lookAt()
  {
    ViewingPlatform vp = su.getViewingPlatform();
    TransformGroup steerTG = vp.getViewPlatformTransform();

    Transform3D t3d = new Transform3D();
    steerTG.getTransform(t3d);

    // args are: viewer posn, where looking, up direction
    t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
    t3d.invert();

    steerTG.setTransform(t3d);
  }  // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3D(), 256, 256);
//         new MyOwn3D();
    }

}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				215
			<iErrLine>
			<iErrMessage>
				';' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				9033313
			</iTime>
			<fName>
				MyOwn3D.java
			</fName>
			<fSize>
				9215.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

// import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;



public class MyOwn3D extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere();   // for environment nodes
    private SimpleUniverse su;
    
    // points for 8 corners of the room
    
    
    public MyOwn3D() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
//         Point3f a1 = new Point3f(-15f, -15f, -15f);
//         Point3f a2 = new Point3f(15f, -15f, -15f);
//         Point3f a3 = new Point3f(15f, 15f, -15f);
//         Point3f a4 = new Point3f(-15f, 15f, -15f);
//         
//         QuadArray floorCoord = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord.setCoordinate(0, a1);
//         floorCoord.setCoordinate(1, a2);
//         floorCoord.setCoordinate(2, a3);
//         floorCoord.setCoordinate(3, a4);
//         
//         Point3f b1 = new Point3f(-15f, -15f, 15f);
//         Point3f b2 = new Point3f(15f, -15f, 15f);
//         Point3f b3 = new Point3f(15f, 15f, 15f);
//         Point3f b4 = new Point3f(-15f, 15f, 15f);
//         
//         QuadArray floorCoord2 = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord2.setCoordinate(0, b1);
//         floorCoord2.setCoordinate(1, b2);
//         floorCoord2.setCoordinate(2, b3);
//         floorCoord2.setCoordinate(3, b4);
//         
//         Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
//         Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
//         ColoringAttributes greenFloor = new ColoringAttributes(green, 1);
//         ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
// 
//         Appearance fa = new Appearance();
//         Appearance fb = new Appearance();
// 
//         fa.setColoringAttributes(blueFloor);
//         fb.setColoringAttributes(greenFloor);
//         
//         Shape3D fs3d = new Shape3D(floorCoord, fa);
//         Shape3D fs3d2 = new Shape3D(floorCoord2, fb);
        
//         BranchGroup scene = new BranchGroup();
        BranchGroup scene = createSceneGraph();
//         scene.addChild(fs3d);
//         scene.addChild(fs3d2);
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        //su.getViewingPlatform().setNominalViewingTransform();
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor

    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();
        
//         TransformGroup floor = makeFace("floor", new Color3f(0.0f, 0.1f, 0.4f));    // blue
//         TransformGroup ceiling = makeFace("ceiling", new Color3f(0.9f, 0.9f, 0f));  // yellow
//         TransformGroup back = makeFace("back", new Color3f(0.0f, 0.5f, 0.1f));      // green
//         TransformGroup front = makeFace("front", new Color3f(0.8f, 0.1f, 0.7f));    // purple
//         TransformGroup left = makeFace("left", new Color3f(0.8f, 0.3f, 0.2f));      // red
//         TransformGroup right = makeFace("right", new Color3f(1.0f, 1.0f, 1.0f));    // white
        
        Shape3D grid = makeGrid();
        
//         objRoot.addChild(floor);
//         objRoot.addChild(back);
//         objRoot.addChild(left);
//         objRoot.addChild(right);
//         objRoot.addChild(front);
//         objRoot.addChild(ceiling);
        objRoot.addChild(grid);
        
        return objRoot;
    } // end of method

    private TransformGroup makeFace(String face, Color3f faceColor) {
        // create standard Quad
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-15f, 0f, 15f));
        qa.setCoordinate(1, new Point3f(15f, 0f, 15f));
        qa.setCoordinate(2, new Point3f(15f, 0f, -15f));
        qa.setCoordinate(3, new Point3f(-15f, 0f, -15f));
        
        // set color for quad
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        // translate quad to appropriate place for room structure
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.rotX(Math.PI);
                t3d.setTranslation(new Vector3f(0f, 15f, 0f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on x-axis
                break;
            case "left": t3d.rotZ(-Math.PI/2);
                t3d.setTranslation(new Vector3f(-15f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on y-axis
                break;
            case "right": t3d.rotZ(Math.PI/2);
                t3d.setTranslation(new Vector3f(15f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.rotX(-Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, 15f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.rotX(Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, -15f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
        return tg;
    }
    
    // makes lines to divide constructed area into 3x3 grid for each side
    private Shape3D makeGrid() {
        
        // set up coords
        Point3f[] gridCoords = new Point3f[32];
        gridCoords[0] = new Point3f(-15f, 15f, 15f);
        gridCoords[1] = new Point3f(15f, 15f, 15f);
        gridCoords[2] = new Point3f(15f, -15f, 15f);
        gridCoords[3] = new Point3f(-15f, -15f, 15f);
        
        Point3f adjust = new Point3f(0, 0, -10);
        for (int i = 4; i < gridCoords.length / 2; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
//         gridCoords[16] = new Point3f(gridCoords[1]);
//         gridCoords[17] = new Point3f(gridCoords[13]);
//         gridCoords[18] = new Point3f(gridCoords[14]);
//         gridCoords[19] = new Point3f(gridCoords[2]);
//         
//         adjust = new Point3f(-10, 0, 0);
//         for (int i = 20; i < gridCoords.length; i++) {
//             gridCoords[i] = new Point3f(gridCoords[i - 4]);
//             gridCoords[i].add(adjust);
//         }
        int[] lineCounts = new int[4];
        for (int i = 0; i < 4; i++) {lineCounts[i] = 4;}
        // create line array object
        LineStripArray grid = new LineStripArray(32, LineStripArray.COORDINATES, lineCounts);
        for (int i = 0; i < gridCoords.length / 2; i++) {
            grid.setCoordinate(i, gridCoords[i]);
        }
        
        return new Shape3D(grid);
        // return shape 3d

    }
    
  private void orbitControls(Canvas3D c)
  /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
  {
    OrbitBehavior orbit = 
        new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
    orbit.setSchedulingBounds(bounds);

    ViewingPlatform vp = su.getViewingPlatform();
    vp.setViewPlatformBehavior(orbit);      
  }  // end of orbitControls()



  private void initUserPosition()
  // Set the user's initial viewpoint using lookAt()
  {
    ViewingPlatform vp = su.getViewingPlatform();
    TransformGroup steerTG = vp.getViewPlatformTransform();

    Transform3D t3d = new Transform3D();
    steerTG.getTransform(t3d);

    // args are: viewer posn, where looking, up direction
    t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
    t3d.invert();

    steerTG.setTransform(t3d);
  }  // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3D(), 256, 256);
//         new MyOwn3D();
    }

}

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				9160016
			</iTime>
			<fName>
				MyOwn3D.java
			</fName>
			<fSize>
				9215.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

// import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;



public class MyOwn3D extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere();   // for environment nodes
    private SimpleUniverse su;
    
    // points for 8 corners of the room
    
    
    public MyOwn3D() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
//         Point3f a1 = new Point3f(-15f, -15f, -15f);
//         Point3f a2 = new Point3f(15f, -15f, -15f);
//         Point3f a3 = new Point3f(15f, 15f, -15f);
//         Point3f a4 = new Point3f(-15f, 15f, -15f);
//         
//         QuadArray floorCoord = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord.setCoordinate(0, a1);
//         floorCoord.setCoordinate(1, a2);
//         floorCoord.setCoordinate(2, a3);
//         floorCoord.setCoordinate(3, a4);
//         
//         Point3f b1 = new Point3f(-15f, -15f, 15f);
//         Point3f b2 = new Point3f(15f, -15f, 15f);
//         Point3f b3 = new Point3f(15f, 15f, 15f);
//         Point3f b4 = new Point3f(-15f, 15f, 15f);
//         
//         QuadArray floorCoord2 = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord2.setCoordinate(0, b1);
//         floorCoord2.setCoordinate(1, b2);
//         floorCoord2.setCoordinate(2, b3);
//         floorCoord2.setCoordinate(3, b4);
//         
//         Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
//         Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
//         ColoringAttributes greenFloor = new ColoringAttributes(green, 1);
//         ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
// 
//         Appearance fa = new Appearance();
//         Appearance fb = new Appearance();
// 
//         fa.setColoringAttributes(blueFloor);
//         fb.setColoringAttributes(greenFloor);
//         
//         Shape3D fs3d = new Shape3D(floorCoord, fa);
//         Shape3D fs3d2 = new Shape3D(floorCoord2, fb);
        
//         BranchGroup scene = new BranchGroup();
        BranchGroup scene = createSceneGraph();
//         scene.addChild(fs3d);
//         scene.addChild(fs3d2);
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        //su.getViewingPlatform().setNominalViewingTransform();
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor

    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();
        
//         TransformGroup floor = makeFace("floor", new Color3f(0.0f, 0.1f, 0.4f));    // blue
//         TransformGroup ceiling = makeFace("ceiling", new Color3f(0.9f, 0.9f, 0f));  // yellow
//         TransformGroup back = makeFace("back", new Color3f(0.0f, 0.5f, 0.1f));      // green
//         TransformGroup front = makeFace("front", new Color3f(0.8f, 0.1f, 0.7f));    // purple
//         TransformGroup left = makeFace("left", new Color3f(0.8f, 0.3f, 0.2f));      // red
//         TransformGroup right = makeFace("right", new Color3f(1.0f, 1.0f, 1.0f));    // white
        
        Shape3D grid = makeGrid();
        
//         objRoot.addChild(floor);
//         objRoot.addChild(back);
//         objRoot.addChild(left);
//         objRoot.addChild(right);
//         objRoot.addChild(front);
//         objRoot.addChild(ceiling);
        objRoot.addChild(grid);
        
        return objRoot;
    } // end of method

    private TransformGroup makeFace(String face, Color3f faceColor) {
        // create standard Quad
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-15f, 0f, 15f));
        qa.setCoordinate(1, new Point3f(15f, 0f, 15f));
        qa.setCoordinate(2, new Point3f(15f, 0f, -15f));
        qa.setCoordinate(3, new Point3f(-15f, 0f, -15f));
        
        // set color for quad
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        // translate quad to appropriate place for room structure
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.rotX(Math.PI);
                t3d.setTranslation(new Vector3f(0f, 15f, 0f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on x-axis
                break;
            case "left": t3d.rotZ(-Math.PI/2);
                t3d.setTranslation(new Vector3f(-15f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on y-axis
                break;
            case "right": t3d.rotZ(Math.PI/2);
                t3d.setTranslation(new Vector3f(15f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.rotX(-Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, 15f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.rotX(Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, -15f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
        return tg;
    }
    
    // makes lines to divide constructed area into 3x3 grid for each side
    private Shape3D makeGrid() {
        
        // set up coords
        Point3f[] gridCoords = new Point3f[32];
        gridCoords[0] = new Point3f(-15f, 15f, 15f);
        gridCoords[1] = new Point3f(-15f, -15f, 15f);
        gridCoords[2] = new Point3f(15f, -15f, 15f);
        gridCoords[3] = new Point3f(15f, 15f, 15f);
        
        Point3f adjust = new Point3f(0, 0, -10);
        for (int i = 4; i < gridCoords.length / 2; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
//         gridCoords[16] = new Point3f(gridCoords[1]);
//         gridCoords[17] = new Point3f(gridCoords[13]);
//         gridCoords[18] = new Point3f(gridCoords[14]);
//         gridCoords[19] = new Point3f(gridCoords[2]);
//         
//         adjust = new Point3f(-10, 0, 0);
//         for (int i = 20; i < gridCoords.length; i++) {
//             gridCoords[i] = new Point3f(gridCoords[i - 4]);
//             gridCoords[i].add(adjust);
//         }
        int[] lineCounts = new int[4];
        for (int i = 0; i < 4; i++) {lineCounts[i] = 4;}
        // create line array object
        LineStripArray grid = new LineStripArray(32, LineStripArray.COORDINATES, lineCounts);
        for (int i = 0; i < gridCoords.length / 2; i++) {
            grid.setCoordinate(i, gridCoords[i]);
        }
        
        return new Shape3D(grid);
        // return shape 3d

    }
    
  private void orbitControls(Canvas3D c)
  /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
  {
    OrbitBehavior orbit = 
        new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
    orbit.setSchedulingBounds(bounds);

    ViewingPlatform vp = su.getViewingPlatform();
    vp.setViewPlatformBehavior(orbit);      
  }  // end of orbitControls()



  private void initUserPosition()
  // Set the user's initial viewpoint using lookAt()
  {
    ViewingPlatform vp = su.getViewingPlatform();
    TransformGroup steerTG = vp.getViewPlatformTransform();

    Transform3D t3d = new Transform3D();
    steerTG.getTransform(t3d);

    // args are: viewer posn, where looking, up direction
    t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
    t3d.invert();

    steerTG.setTransform(t3d);
  }  // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3D(), 256, 256);
//         new MyOwn3D();
    }

}

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				9361625
			</iTime>
			<fName>
				MyOwn3D.java
			</fName>
			<fSize>
				9201.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

// import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;



public class MyOwn3D extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere();   // for environment nodes
    private SimpleUniverse su;
    
    // points for 8 corners of the room
    
    
    public MyOwn3D() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
//         Point3f a1 = new Point3f(-15f, -15f, -15f);
//         Point3f a2 = new Point3f(15f, -15f, -15f);
//         Point3f a3 = new Point3f(15f, 15f, -15f);
//         Point3f a4 = new Point3f(-15f, 15f, -15f);
//         
//         QuadArray floorCoord = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord.setCoordinate(0, a1);
//         floorCoord.setCoordinate(1, a2);
//         floorCoord.setCoordinate(2, a3);
//         floorCoord.setCoordinate(3, a4);
//         
//         Point3f b1 = new Point3f(-15f, -15f, 15f);
//         Point3f b2 = new Point3f(15f, -15f, 15f);
//         Point3f b3 = new Point3f(15f, 15f, 15f);
//         Point3f b4 = new Point3f(-15f, 15f, 15f);
//         
//         QuadArray floorCoord2 = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord2.setCoordinate(0, b1);
//         floorCoord2.setCoordinate(1, b2);
//         floorCoord2.setCoordinate(2, b3);
//         floorCoord2.setCoordinate(3, b4);
//         
//         Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
//         Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
//         ColoringAttributes greenFloor = new ColoringAttributes(green, 1);
//         ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
// 
//         Appearance fa = new Appearance();
//         Appearance fb = new Appearance();
// 
//         fa.setColoringAttributes(blueFloor);
//         fb.setColoringAttributes(greenFloor);
//         
//         Shape3D fs3d = new Shape3D(floorCoord, fa);
//         Shape3D fs3d2 = new Shape3D(floorCoord2, fb);
        
//         BranchGroup scene = new BranchGroup();
        BranchGroup scene = createSceneGraph();
//         scene.addChild(fs3d);
//         scene.addChild(fs3d2);
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        //su.getViewingPlatform().setNominalViewingTransform();
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor

    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();
        
//         TransformGroup floor = makeFace("floor", new Color3f(0.0f, 0.1f, 0.4f));    // blue
//         TransformGroup ceiling = makeFace("ceiling", new Color3f(0.9f, 0.9f, 0f));  // yellow
//         TransformGroup back = makeFace("back", new Color3f(0.0f, 0.5f, 0.1f));      // green
//         TransformGroup front = makeFace("front", new Color3f(0.8f, 0.1f, 0.7f));    // purple
//         TransformGroup left = makeFace("left", new Color3f(0.8f, 0.3f, 0.2f));      // red
//         TransformGroup right = makeFace("right", new Color3f(1.0f, 1.0f, 1.0f));    // white
        
        Shape3D grid = makeGrid();
        
//         objRoot.addChild(floor);
//         objRoot.addChild(back);
//         objRoot.addChild(left);
//         objRoot.addChild(right);
//         objRoot.addChild(front);
//         objRoot.addChild(ceiling);
        objRoot.addChild(grid);
        
        return objRoot;
    } // end of method

    private TransformGroup makeFace(String face, Color3f faceColor) {
        // create standard Quad
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-15f, 0f, 15f));
        qa.setCoordinate(1, new Point3f(15f, 0f, 15f));
        qa.setCoordinate(2, new Point3f(15f, 0f, -15f));
        qa.setCoordinate(3, new Point3f(-15f, 0f, -15f));
        
        // set color for quad
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        // translate quad to appropriate place for room structure
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.rotX(Math.PI);
                t3d.setTranslation(new Vector3f(0f, 15f, 0f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on x-axis
                break;
            case "left": t3d.rotZ(-Math.PI/2);
                t3d.setTranslation(new Vector3f(-15f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on y-axis
                break;
            case "right": t3d.rotZ(Math.PI/2);
                t3d.setTranslation(new Vector3f(15f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.rotX(-Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, 15f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.rotX(Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, -15f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
        return tg;
    }
    
    // makes lines to divide constructed area into 3x3 grid for each side
    private Shape3D makeGrid() {
        
        // set up coords
        Point3f[] gridCoords = new Point3f[32];
        gridCoords[0] = new Point3f(-15f, 15f, 15f);
        gridCoords[1] = new Point3f(-15f, -15f, 15f);
        gridCoords[2] = new Point3f(15f, -15f, 15f);
        gridCoords[3] = new Point3f(15f, 15f, 15f);
        
        Point3f adjust = new Point3f(0, 0, -10);
        for (int i = 4; i < gridCoords.length / 2; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        gridCoords[16] = new Point3f(gridCoords[1]);
        gridCoords[17] = new Point3f(gridCoords[2]);
        gridCoords[18] = new Point3f(gridCoords[14]);
        gridCoords[19] = new Point3f(gridCoords[13]);
        
        adjust = new Point3f(-10, 0, 0);
        for (int i = 20; i < gridCoords.length; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        int[] lineCounts = new int[8];
        for (int i = 0; i < lineCounts.length; i++) {lineCounts[i] = 4;}
        // create line array object
        LineStripArray grid = new LineStripArray(32, LineStripArray.COORDINATES, lineCounts);
        for (int i = 0; i < gridCoords.length / 2; i++) {
            grid.setCoordinate(i, gridCoords[i]);
        }
        
        return new Shape3D(grid);
        // return shape 3d

    }
    
  private void orbitControls(Canvas3D c)
  /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
  {
    OrbitBehavior orbit = 
        new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
    orbit.setSchedulingBounds(bounds);

    ViewingPlatform vp = su.getViewingPlatform();
    vp.setViewPlatformBehavior(orbit);      
  }  // end of orbitControls()



  private void initUserPosition()
  // Set the user's initial viewpoint using lookAt()
  {
    ViewingPlatform vp = su.getViewingPlatform();
    TransformGroup steerTG = vp.getViewPlatformTransform();

    Transform3D t3d = new Transform3D();
    steerTG.getTransform(t3d);

    // args are: viewer posn, where looking, up direction
    t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
    t3d.invert();

    steerTG.setTransform(t3d);
  }  // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3D(), 256, 256);
//         new MyOwn3D();
    }

}

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				9435469
			</iTime>
			<fName>
				MyOwn3D.java
			</fName>
			<fSize>
				9197.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

// import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;



public class MyOwn3D extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere();   // for environment nodes
    private SimpleUniverse su;
    
    // points for 8 corners of the room
    
    
    public MyOwn3D() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
//         Point3f a1 = new Point3f(-15f, -15f, -15f);
//         Point3f a2 = new Point3f(15f, -15f, -15f);
//         Point3f a3 = new Point3f(15f, 15f, -15f);
//         Point3f a4 = new Point3f(-15f, 15f, -15f);
//         
//         QuadArray floorCoord = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord.setCoordinate(0, a1);
//         floorCoord.setCoordinate(1, a2);
//         floorCoord.setCoordinate(2, a3);
//         floorCoord.setCoordinate(3, a4);
//         
//         Point3f b1 = new Point3f(-15f, -15f, 15f);
//         Point3f b2 = new Point3f(15f, -15f, 15f);
//         Point3f b3 = new Point3f(15f, 15f, 15f);
//         Point3f b4 = new Point3f(-15f, 15f, 15f);
//         
//         QuadArray floorCoord2 = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord2.setCoordinate(0, b1);
//         floorCoord2.setCoordinate(1, b2);
//         floorCoord2.setCoordinate(2, b3);
//         floorCoord2.setCoordinate(3, b4);
//         
//         Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
//         Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
//         ColoringAttributes greenFloor = new ColoringAttributes(green, 1);
//         ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
// 
//         Appearance fa = new Appearance();
//         Appearance fb = new Appearance();
// 
//         fa.setColoringAttributes(blueFloor);
//         fb.setColoringAttributes(greenFloor);
//         
//         Shape3D fs3d = new Shape3D(floorCoord, fa);
//         Shape3D fs3d2 = new Shape3D(floorCoord2, fb);
        
//         BranchGroup scene = new BranchGroup();
        BranchGroup scene = createSceneGraph();
//         scene.addChild(fs3d);
//         scene.addChild(fs3d2);
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        //su.getViewingPlatform().setNominalViewingTransform();
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor

    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();
        
//         TransformGroup floor = makeFace("floor", new Color3f(0.0f, 0.1f, 0.4f));    // blue
//         TransformGroup ceiling = makeFace("ceiling", new Color3f(0.9f, 0.9f, 0f));  // yellow
//         TransformGroup back = makeFace("back", new Color3f(0.0f, 0.5f, 0.1f));      // green
//         TransformGroup front = makeFace("front", new Color3f(0.8f, 0.1f, 0.7f));    // purple
//         TransformGroup left = makeFace("left", new Color3f(0.8f, 0.3f, 0.2f));      // red
//         TransformGroup right = makeFace("right", new Color3f(1.0f, 1.0f, 1.0f));    // white
        
        Shape3D grid = makeGrid();
        
//         objRoot.addChild(floor);
//         objRoot.addChild(back);
//         objRoot.addChild(left);
//         objRoot.addChild(right);
//         objRoot.addChild(front);
//         objRoot.addChild(ceiling);
        objRoot.addChild(grid);
        
        return objRoot;
    } // end of method

    private TransformGroup makeFace(String face, Color3f faceColor) {
        // create standard Quad
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-15f, 0f, 15f));
        qa.setCoordinate(1, new Point3f(15f, 0f, 15f));
        qa.setCoordinate(2, new Point3f(15f, 0f, -15f));
        qa.setCoordinate(3, new Point3f(-15f, 0f, -15f));
        
        // set color for quad
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        // translate quad to appropriate place for room structure
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.rotX(Math.PI);
                t3d.setTranslation(new Vector3f(0f, 15f, 0f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on x-axis
                break;
            case "left": t3d.rotZ(-Math.PI/2);
                t3d.setTranslation(new Vector3f(-15f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on y-axis
                break;
            case "right": t3d.rotZ(Math.PI/2);
                t3d.setTranslation(new Vector3f(15f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.rotX(-Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, 15f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.rotX(Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, -15f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
        return tg;
    }
    
    // makes lines to divide constructed area into 3x3 grid for each side
    private Shape3D makeGrid() {
        
        // set up coords
        Point3f[] gridCoords = new Point3f[32];
        gridCoords[0] = new Point3f(-15f, 15f, 15f);
        gridCoords[1] = new Point3f(-15f, -15f, 15f);
        gridCoords[2] = new Point3f(15f, -15f, 15f);
        gridCoords[3] = new Point3f(15f, 15f, 15f);
        
        Point3f adjust = new Point3f(0, 0, -10);
        for (int i = 4; i < gridCoords.length / 2; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        gridCoords[16] = new Point3f(gridCoords[1]);
        gridCoords[17] = new Point3f(gridCoords[2]);
        gridCoords[18] = new Point3f(gridCoords[14]);
        gridCoords[19] = new Point3f(gridCoords[13]);
        
        adjust = new Point3f(-10, 0, 0);
        for (int i = 20; i < gridCoords.length; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        int[] lineCounts = new int[8];
        for (int i = 0; i < lineCounts.length; i++) {lineCounts[i] = 4;}
        // create line array object
        LineStripArray grid = new LineStripArray(32, LineStripArray.COORDINATES, lineCounts);
        for (int i = 0; i < gridCoords.length; i++) {
            grid.setCoordinate(i, gridCoords[i]);
        }
        
        return new Shape3D(grid);
        // return shape 3d

    }
    
  private void orbitControls(Canvas3D c)
  /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
  {
    OrbitBehavior orbit = 
        new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
    orbit.setSchedulingBounds(bounds);

    ViewingPlatform vp = su.getViewingPlatform();
    vp.setViewPlatformBehavior(orbit);      
  }  // end of orbitControls()



  private void initUserPosition()
  // Set the user's initial viewpoint using lookAt()
  {
    ViewingPlatform vp = su.getViewingPlatform();
    TransformGroup steerTG = vp.getViewPlatformTransform();

    Transform3D t3d = new Transform3D();
    steerTG.getTransform(t3d);

    // args are: viewer posn, where looking, up direction
    t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
    t3d.invert();

    steerTG.setTransform(t3d);
  }  // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3D(), 256, 256);
//         new MyOwn3D();
    }

}

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				9557422
			</iTime>
			<fName>
				MyOwn3D.java
			</fName>
			<fSize>
				9197.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

// import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;



public class MyOwn3D extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere();   // for environment nodes
    private SimpleUniverse su;
    
    // points for 8 corners of the room
    
    
    public MyOwn3D() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
//         Point3f a1 = new Point3f(-15f, -15f, -15f);
//         Point3f a2 = new Point3f(15f, -15f, -15f);
//         Point3f a3 = new Point3f(15f, 15f, -15f);
//         Point3f a4 = new Point3f(-15f, 15f, -15f);
//         
//         QuadArray floorCoord = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord.setCoordinate(0, a1);
//         floorCoord.setCoordinate(1, a2);
//         floorCoord.setCoordinate(2, a3);
//         floorCoord.setCoordinate(3, a4);
//         
//         Point3f b1 = new Point3f(-15f, -15f, 15f);
//         Point3f b2 = new Point3f(15f, -15f, 15f);
//         Point3f b3 = new Point3f(15f, 15f, 15f);
//         Point3f b4 = new Point3f(-15f, 15f, 15f);
//         
//         QuadArray floorCoord2 = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord2.setCoordinate(0, b1);
//         floorCoord2.setCoordinate(1, b2);
//         floorCoord2.setCoordinate(2, b3);
//         floorCoord2.setCoordinate(3, b4);
//         
//         Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
//         Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
//         ColoringAttributes greenFloor = new ColoringAttributes(green, 1);
//         ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
// 
//         Appearance fa = new Appearance();
//         Appearance fb = new Appearance();
// 
//         fa.setColoringAttributes(blueFloor);
//         fb.setColoringAttributes(greenFloor);
//         
//         Shape3D fs3d = new Shape3D(floorCoord, fa);
//         Shape3D fs3d2 = new Shape3D(floorCoord2, fb);
        
//         BranchGroup scene = new BranchGroup();
        BranchGroup scene = createSceneGraph();
//         scene.addChild(fs3d);
//         scene.addChild(fs3d2);
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        //su.getViewingPlatform().setNominalViewingTransform();
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor

    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();
        
//         TransformGroup floor = makeFace("floor", new Color3f(0.0f, 0.1f, 0.4f));    // blue
//         TransformGroup ceiling = makeFace("ceiling", new Color3f(0.9f, 0.9f, 0f));  // yellow
//         TransformGroup back = makeFace("back", new Color3f(0.0f, 0.5f, 0.1f));      // green
//         TransformGroup front = makeFace("front", new Color3f(0.8f, 0.1f, 0.7f));    // purple
//         TransformGroup left = makeFace("left", new Color3f(0.8f, 0.3f, 0.2f));      // red
//         TransformGroup right = makeFace("right", new Color3f(1.0f, 1.0f, 1.0f));    // white
        
        Shape3D grid = makeGrid();
        
//         objRoot.addChild(floor);
//         objRoot.addChild(back);
//         objRoot.addChild(left);
//         objRoot.addChild(right);
//         objRoot.addChild(front);
//         objRoot.addChild(ceiling);
        objRoot.addChild(grid);
        
        return objRoot;
    } // end of method

    private TransformGroup makeFace(String face, Color3f faceColor) {
        // create standard Quad
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-15f, 0f, 15f));
        qa.setCoordinate(1, new Point3f(15f, 0f, 15f));
        qa.setCoordinate(2, new Point3f(15f, 0f, -15f));
        qa.setCoordinate(3, new Point3f(-15f, 0f, -15f));
        
        // set color for quad
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        // translate quad to appropriate place for room structure
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.rotX(Math.PI);
                t3d.setTranslation(new Vector3f(0f, 15f, 0f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on x-axis
                break;
            case "left": t3d.rotZ(-Math.PI/2);
                t3d.setTranslation(new Vector3f(-15f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on y-axis
                break;
            case "right": t3d.rotZ(Math.PI/2);
                t3d.setTranslation(new Vector3f(15f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.rotX(-Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, 15f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.rotX(Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, -15f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
        return tg;
    }
    
    // makes lines to divide constructed area into 3x3 grid for each side
    private Shape3D makeGrid() {
        
        // set up coords
        Point3f[] gridCoords = new Point3f[32];
        gridCoords[0] = new Point3f(-15f, 15f, 15f);
        gridCoords[1] = new Point3f(-15f, -15f, 15f);
        gridCoords[2] = new Point3f(15f, -15f, 15f);
        gridCoords[3] = new Point3f(15f, 15f, 15f);
        
        Point3f adjust = new Point3f(0, 0, -10);
        for (int i = 4; i < gridCoords.length / 2; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        gridCoords[16] = new Point3f(gridCoords[3]);
        gridCoords[17] = new Point3f(gridCoords[2]);
        gridCoords[18] = new Point3f(gridCoords[14]);
        gridCoords[19] = new Point3f(gridCoords[15]);
        
        adjust = new Point3f(-10, 0, 0);
        for (int i = 20; i < gridCoords.length; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        int[] lineCounts = new int[8];
        for (int i = 0; i < lineCounts.length; i++) {lineCounts[i] = 4;}
        // create line array object
        LineStripArray grid = new LineStripArray(32, LineStripArray.COORDINATES, lineCounts);
        for (int i = 0; i < gridCoords.length; i++) {
            grid.setCoordinate(i, gridCoords[i]);
        }
        
        return new Shape3D(grid);
        // return shape 3d

    }
    
  private void orbitControls(Canvas3D c)
  /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
  {
    OrbitBehavior orbit = 
        new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
    orbit.setSchedulingBounds(bounds);

    ViewingPlatform vp = su.getViewingPlatform();
    vp.setViewPlatformBehavior(orbit);      
  }  // end of orbitControls()



  private void initUserPosition()
  // Set the user's initial viewpoint using lookAt()
  {
    ViewingPlatform vp = su.getViewingPlatform();
    TransformGroup steerTG = vp.getViewPlatformTransform();

    Transform3D t3d = new Transform3D();
    steerTG.getTransform(t3d);

    // args are: viewer posn, where looking, up direction
    t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
    t3d.invert();

    steerTG.setTransform(t3d);
  }  // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3D(), 256, 256);
//         new MyOwn3D();
    }

}

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				10329859
			</iTime>
			<fName>
				MyOwn3D.java
			</fName>
			<fSize>
				9721.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

// import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;



public class MyOwn3D extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere();   // for environment nodes
    private SimpleUniverse su;
    
    // points for 8 corners of the room
    
    
    public MyOwn3D() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
//         Point3f a1 = new Point3f(-15f, -15f, -15f);
//         Point3f a2 = new Point3f(15f, -15f, -15f);
//         Point3f a3 = new Point3f(15f, 15f, -15f);
//         Point3f a4 = new Point3f(-15f, 15f, -15f);
//         
//         QuadArray floorCoord = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord.setCoordinate(0, a1);
//         floorCoord.setCoordinate(1, a2);
//         floorCoord.setCoordinate(2, a3);
//         floorCoord.setCoordinate(3, a4);
//         
//         Point3f b1 = new Point3f(-15f, -15f, 15f);
//         Point3f b2 = new Point3f(15f, -15f, 15f);
//         Point3f b3 = new Point3f(15f, 15f, 15f);
//         Point3f b4 = new Point3f(-15f, 15f, 15f);
//         
//         QuadArray floorCoord2 = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord2.setCoordinate(0, b1);
//         floorCoord2.setCoordinate(1, b2);
//         floorCoord2.setCoordinate(2, b3);
//         floorCoord2.setCoordinate(3, b4);
//         
//         Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
//         Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
//         ColoringAttributes greenFloor = new ColoringAttributes(green, 1);
//         ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
// 
//         Appearance fa = new Appearance();
//         Appearance fb = new Appearance();
// 
//         fa.setColoringAttributes(blueFloor);
//         fb.setColoringAttributes(greenFloor);
//         
//         Shape3D fs3d = new Shape3D(floorCoord, fa);
//         Shape3D fs3d2 = new Shape3D(floorCoord2, fb);
        
//         BranchGroup scene = new BranchGroup();
        BranchGroup scene = createSceneGraph();
//         scene.addChild(fs3d);
//         scene.addChild(fs3d2);
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        //su.getViewingPlatform().setNominalViewingTransform();
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor

    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();
        
//         TransformGroup floor = makeFace("floor", new Color3f(0.0f, 0.1f, 0.4f));    // blue
//         TransformGroup ceiling = makeFace("ceiling", new Color3f(0.9f, 0.9f, 0f));  // yellow
//         TransformGroup back = makeFace("back", new Color3f(0.0f, 0.5f, 0.1f));      // green
//         TransformGroup front = makeFace("front", new Color3f(0.8f, 0.1f, 0.7f));    // purple
//         TransformGroup left = makeFace("left", new Color3f(0.8f, 0.3f, 0.2f));      // red
//         TransformGroup right = makeFace("right", new Color3f(1.0f, 1.0f, 1.0f));    // white
        
        Shape3D grid = makeGrid();
        
//         objRoot.addChild(floor);
//         objRoot.addChild(back);
//         objRoot.addChild(left);
//         objRoot.addChild(right);
//         objRoot.addChild(front);
//         objRoot.addChild(ceiling);
        objRoot.addChild(grid);
        
        return objRoot;
    } // end of method

    private TransformGroup makeFace(String face, Color3f faceColor) {
        // create standard Quad
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-15f, 0f, 15f));
        qa.setCoordinate(1, new Point3f(15f, 0f, 15f));
        qa.setCoordinate(2, new Point3f(15f, 0f, -15f));
        qa.setCoordinate(3, new Point3f(-15f, 0f, -15f));
        
        // set color for quad
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        // translate quad to appropriate place for room structure
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.rotX(Math.PI);
                t3d.setTranslation(new Vector3f(0f, 15f, 0f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on x-axis
                break;
            case "left": t3d.rotZ(-Math.PI/2);
                t3d.setTranslation(new Vector3f(-15f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on y-axis
                break;
            case "right": t3d.rotZ(Math.PI/2);
                t3d.setTranslation(new Vector3f(15f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.rotX(-Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, 15f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.rotX(Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, -15f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
        return tg;
    }
    
    // makes lines to divide constructed area into 3x3 grid for each side
    private Shape3D makeGrid() {
        
        // set up coords
        Point3f[] gridCoords = new Point3f[42];
        gridCoords[0] = new Point3f(-15f, 15f, 15f);
        gridCoords[1] = new Point3f(-15f, -15f, 15f);
        gridCoords[2] = new Point3f(15f, -15f, 15f);
        gridCoords[3] = new Point3f(15f, 15f, 15f);
        
        Point3f adjust = new Point3f(0, 0, -10);
        for (int i = 4; i < 16; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        gridCoords[16] = new Point3f(gridCoords[3]);
        gridCoords[17] = new Point3f(gridCoords[2]);
        gridCoords[18] = new Point3f(gridCoords[14]);
        gridCoords[19] = new Point3f(gridCoords[15]);
        
        adjust = new Point3f(-10, 0, 0);
        for (int i = 20; i < 32; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        gridCoords[32] = new Point3f(gridCoords[0]);
        gridCoords[33] = new Point3f(gridCoords[3]);
        gridCoords[34] = new Point3f(gridCoords[15]);
        gridCoords[35] = new Point3f(gridCoords[12]);
        gridCoords[36] = new Point3f(gridCoords[0]);
        
        adjust = new Point3f(0, -10, 0);
        for (int i = 37; i < 42; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        int[] lineCounts = new int[10];
        for (int i = 0; i < lineCounts.length; i++) {
            if (i < 8) {lineCounts[i] = 4;}
            else {lineCounts[i] = 5;}
        }
        // create line array object
        LineStripArray grid = new LineStripArray(42, LineStripArray.COORDINATES, lineCounts);
        for (int i = 0; i < gridCoords.length; i++) {
            grid.setCoordinate(i, gridCoords[i]);
        }
        
        return new Shape3D(grid);
        // return shape 3d

    }
    
  private void orbitControls(Canvas3D c)
  /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
  {
    OrbitBehavior orbit = 
        new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
    orbit.setSchedulingBounds(bounds);

    ViewingPlatform vp = su.getViewingPlatform();
    vp.setViewPlatformBehavior(orbit);      
  }  // end of orbitControls()



  private void initUserPosition()
  // Set the user's initial viewpoint using lookAt()
  {
    ViewingPlatform vp = su.getViewingPlatform();
    TransformGroup steerTG = vp.getViewPlatformTransform();

    Transform3D t3d = new Transform3D();
    steerTG.getTransform(t3d);

    // args are: viewer posn, where looking, up direction
    t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
    t3d.invert();

    steerTG.setTransform(t3d);
  }  // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3D(), 256, 256);
//         new MyOwn3D();
    }

}

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				10630359
			</iTime>
			<fName>
				MyOwn3D.java
			</fName>
			<fSize>
				9720.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

// import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;



public class MyOwn3D extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere();   // for environment nodes
    private SimpleUniverse su;
    
    // points for 8 corners of the room
    
    
    public MyOwn3D() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
//         Point3f a1 = new Point3f(-15f, -15f, -15f);
//         Point3f a2 = new Point3f(15f, -15f, -15f);
//         Point3f a3 = new Point3f(15f, 15f, -15f);
//         Point3f a4 = new Point3f(-15f, 15f, -15f);
//         
//         QuadArray floorCoord = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord.setCoordinate(0, a1);
//         floorCoord.setCoordinate(1, a2);
//         floorCoord.setCoordinate(2, a3);
//         floorCoord.setCoordinate(3, a4);
//         
//         Point3f b1 = new Point3f(-15f, -15f, 15f);
//         Point3f b2 = new Point3f(15f, -15f, 15f);
//         Point3f b3 = new Point3f(15f, 15f, 15f);
//         Point3f b4 = new Point3f(-15f, 15f, 15f);
//         
//         QuadArray floorCoord2 = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord2.setCoordinate(0, b1);
//         floorCoord2.setCoordinate(1, b2);
//         floorCoord2.setCoordinate(2, b3);
//         floorCoord2.setCoordinate(3, b4);
//         
//         Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
//         Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
//         ColoringAttributes greenFloor = new ColoringAttributes(green, 1);
//         ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
// 
//         Appearance fa = new Appearance();
//         Appearance fb = new Appearance();
// 
//         fa.setColoringAttributes(blueFloor);
//         fb.setColoringAttributes(greenFloor);
//         
//         Shape3D fs3d = new Shape3D(floorCoord, fa);
//         Shape3D fs3d2 = new Shape3D(floorCoord2, fb);
        
//         BranchGroup scene = new BranchGroup();
        BranchGroup scene = createSceneGraph();
//         scene.addChild(fs3d);
//         scene.addChild(fs3d2);
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        //su.getViewingPlatform().setNominalViewingTransform();
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor

    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();
        
//         TransformGroup floor = makeFace("floor", new Color3f(0.0f, 0.1f, 0.4f));    // blue
//         TransformGroup ceiling = makeFace("ceiling", new Color3f(0.9f, 0.9f, 0f));  // yellow
//         TransformGroup back = makeFace("back", new Color3f(0.0f, 0.5f, 0.1f));      // green
//         TransformGroup front = makeFace("front", new Color3f(0.8f, 0.1f, 0.7f));    // purple
//         TransformGroup left = makeFace("left", new Color3f(0.8f, 0.3f, 0.2f));      // red
//         TransformGroup right = makeFace("right", new Color3f(1.0f, 1.0f, 1.0f));    // white
        
        Shape3D grid = makeGrid();
        
//         objRoot.addChild(floor);
//         objRoot.addChild(back);
//         objRoot.addChild(left);
//         objRoot.addChild(right);
//         objRoot.addChild(front);
//         objRoot.addChild(ceiling);
        objRoot.addChild(grid);
        
        return objRoot;
    } // end of method

    private TransformGroup makeFace(String face, Color3f faceColor) {
        // create standard Quad
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-15f, 0f, 15f));
        qa.setCoordinate(1, new Point3f(15f, 0f, 15f));
        qa.setCoordinate(2, new Point3f(15f, 0f, -15f));
        qa.setCoordinate(3, new Point3f(-15f, 0f, -15f));
        
        // set color for quad
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        // translate quad to appropriate place for room structure
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.rotX(Math.PI);
                t3d.setTranslation(new Vector3f(0f, 15f, 0f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on x-axis
                break;
            case "left": t3d.rotZ(-Math.PI/2);
                t3d.setTranslation(new Vector3f(-15f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on y-axis
                break;
            case "right": t3d.rotZ(Math.PI/2);
                t3d.setTranslation(new Vector3f(15f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.rotX(-Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, 15f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.rotX(Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, -15f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
        return tg;
    }
    
    // makes lines to divide constructed area into 3x3 grid for each side
    private Shape3D makeGrid() {
        
        // set up coords
        Point3f[] gridCoords = new Point3f[47];
        gridCoords[0] = new Point3f(-15f, 15f, 15f);
        gridCoords[1] = new Point3f(-15f, -15f, 15f);
        gridCoords[2] = new Point3f(15f, -15f, 15f);
        gridCoords[3] = new Point3f(15f, 15f, 15f);
        
        Point3f adjust = new Point3f(0, 0, -10);
        for (int i = 4; i < 16; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        gridCoords[16] = new Point3f(gridCoords[3]);
        gridCoords[17] = new Point3f(gridCoords[2]);
        gridCoords[18] = new Point3f(gridCoords[14]);
        gridCoords[19] = new Point3f(gridCoords[15]);
        
        adjust = new Point3f(-10, 0, 0);
        for (int i = 20; i < 32; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        gridCoords[32] = new Point3f(gridCoords[0]);
        gridCoords[33] = new Point3f(gridCoords[3]);
        gridCoords[34] = new Point3f(gridCoords[15]);
        gridCoords[35] = new Point3f(gridCoords[12]);
        gridCoords[36] = new Point3f(gridCoords[0]);
        
        adjust = new Point3f(0, -10, 0);
        for (int i = 37; i < 47; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 5]);
            gridCoords[i].add(adjust);
        }
        
        int[] lineCounts = new int[11];
        for (int i = 0; i < lineCounts.length; i++) {
            if (i < 8) {lineCounts[i] = 4;}
            else {lineCounts[i] = 5;}
        }
        // create line array object
        LineStripArray grid = new LineStripArray(47 LineStripArray.COORDINATES, lineCounts);
        for (int i = 0; i < gridCoords.length; i++) {
            grid.setCoordinate(i, gridCoords[i]);
        }
        
        return new Shape3D(grid);
        // return shape 3d

    }
    
  private void orbitControls(Canvas3D c)
  /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
  {
    OrbitBehavior orbit = 
        new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
    orbit.setSchedulingBounds(bounds);

    ViewingPlatform vp = su.getViewingPlatform();
    vp.setViewPlatformBehavior(orbit);      
  }  // end of orbitControls()



  private void initUserPosition()
  // Set the user's initial viewpoint using lookAt()
  {
    ViewingPlatform vp = su.getViewingPlatform();
    TransformGroup steerTG = vp.getViewPlatformTransform();

    Transform3D t3d = new Transform3D();
    steerTG.getTransform(t3d);

    // args are: viewer posn, where looking, up direction
    t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
    t3d.invert();

    steerTG.setTransform(t3d);
  }  // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3D(), 256, 256);
//         new MyOwn3D();
    }

}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				233
			<iErrLine>
			<iErrMessage>
				')' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				233
			<iErrLine>
			<iErrMessage>
				illegal start of expression
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				233
			<iErrLine>
			<iErrMessage>
				';' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				10639750
			</iTime>
			<fName>
				MyOwn3D.java
			</fName>
			<fSize>
				9721.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

// import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;



public class MyOwn3D extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere();   // for environment nodes
    private SimpleUniverse su;
    
    // points for 8 corners of the room
    
    
    public MyOwn3D() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
//         Point3f a1 = new Point3f(-15f, -15f, -15f);
//         Point3f a2 = new Point3f(15f, -15f, -15f);
//         Point3f a3 = new Point3f(15f, 15f, -15f);
//         Point3f a4 = new Point3f(-15f, 15f, -15f);
//         
//         QuadArray floorCoord = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord.setCoordinate(0, a1);
//         floorCoord.setCoordinate(1, a2);
//         floorCoord.setCoordinate(2, a3);
//         floorCoord.setCoordinate(3, a4);
//         
//         Point3f b1 = new Point3f(-15f, -15f, 15f);
//         Point3f b2 = new Point3f(15f, -15f, 15f);
//         Point3f b3 = new Point3f(15f, 15f, 15f);
//         Point3f b4 = new Point3f(-15f, 15f, 15f);
//         
//         QuadArray floorCoord2 = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord2.setCoordinate(0, b1);
//         floorCoord2.setCoordinate(1, b2);
//         floorCoord2.setCoordinate(2, b3);
//         floorCoord2.setCoordinate(3, b4);
//         
//         Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
//         Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
//         ColoringAttributes greenFloor = new ColoringAttributes(green, 1);
//         ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
// 
//         Appearance fa = new Appearance();
//         Appearance fb = new Appearance();
// 
//         fa.setColoringAttributes(blueFloor);
//         fb.setColoringAttributes(greenFloor);
//         
//         Shape3D fs3d = new Shape3D(floorCoord, fa);
//         Shape3D fs3d2 = new Shape3D(floorCoord2, fb);
        
//         BranchGroup scene = new BranchGroup();
        BranchGroup scene = createSceneGraph();
//         scene.addChild(fs3d);
//         scene.addChild(fs3d2);
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        //su.getViewingPlatform().setNominalViewingTransform();
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor

    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();
        
//         TransformGroup floor = makeFace("floor", new Color3f(0.0f, 0.1f, 0.4f));    // blue
//         TransformGroup ceiling = makeFace("ceiling", new Color3f(0.9f, 0.9f, 0f));  // yellow
//         TransformGroup back = makeFace("back", new Color3f(0.0f, 0.5f, 0.1f));      // green
//         TransformGroup front = makeFace("front", new Color3f(0.8f, 0.1f, 0.7f));    // purple
//         TransformGroup left = makeFace("left", new Color3f(0.8f, 0.3f, 0.2f));      // red
//         TransformGroup right = makeFace("right", new Color3f(1.0f, 1.0f, 1.0f));    // white
        
        Shape3D grid = makeGrid();
        
//         objRoot.addChild(floor);
//         objRoot.addChild(back);
//         objRoot.addChild(left);
//         objRoot.addChild(right);
//         objRoot.addChild(front);
//         objRoot.addChild(ceiling);
        objRoot.addChild(grid);
        
        return objRoot;
    } // end of method

    private TransformGroup makeFace(String face, Color3f faceColor) {
        // create standard Quad
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-15f, 0f, 15f));
        qa.setCoordinate(1, new Point3f(15f, 0f, 15f));
        qa.setCoordinate(2, new Point3f(15f, 0f, -15f));
        qa.setCoordinate(3, new Point3f(-15f, 0f, -15f));
        
        // set color for quad
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        // translate quad to appropriate place for room structure
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.rotX(Math.PI);
                t3d.setTranslation(new Vector3f(0f, 15f, 0f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on x-axis
                break;
            case "left": t3d.rotZ(-Math.PI/2);
                t3d.setTranslation(new Vector3f(-15f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on y-axis
                break;
            case "right": t3d.rotZ(Math.PI/2);
                t3d.setTranslation(new Vector3f(15f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.rotX(-Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, 15f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.rotX(Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, -15f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
        return tg;
    }
    
    // makes lines to divide constructed area into 3x3 grid for each side
    private Shape3D makeGrid() {
        
        // set up coords
        Point3f[] gridCoords = new Point3f[47];
        gridCoords[0] = new Point3f(-15f, 15f, 15f);
        gridCoords[1] = new Point3f(-15f, -15f, 15f);
        gridCoords[2] = new Point3f(15f, -15f, 15f);
        gridCoords[3] = new Point3f(15f, 15f, 15f);
        
        Point3f adjust = new Point3f(0, 0, -10);
        for (int i = 4; i < 16; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        gridCoords[16] = new Point3f(gridCoords[3]);
        gridCoords[17] = new Point3f(gridCoords[2]);
        gridCoords[18] = new Point3f(gridCoords[14]);
        gridCoords[19] = new Point3f(gridCoords[15]);
        
        adjust = new Point3f(-10, 0, 0);
        for (int i = 20; i < 32; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        gridCoords[32] = new Point3f(gridCoords[0]);
        gridCoords[33] = new Point3f(gridCoords[3]);
        gridCoords[34] = new Point3f(gridCoords[15]);
        gridCoords[35] = new Point3f(gridCoords[12]);
        gridCoords[36] = new Point3f(gridCoords[0]);
        
        adjust = new Point3f(0, -10, 0);
        for (int i = 37; i < 47; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 5]);
            gridCoords[i].add(adjust);
        }
        
        int[] lineCounts = new int[11];
        for (int i = 0; i < lineCounts.length; i++) {
            if (i < 8) {lineCounts[i] = 4;}
            else {lineCounts[i] = 5;}
        }
        // create line array object
        LineStripArray grid = new LineStripArray(47, LineStripArray.COORDINATES, lineCounts);
        for (int i = 0; i < gridCoords.length; i++) {
            grid.setCoordinate(i, gridCoords[i]);
        }
        
        return new Shape3D(grid);
        // return shape 3d

    }
    
  private void orbitControls(Canvas3D c)
  /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
  {
    OrbitBehavior orbit = 
        new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
    orbit.setSchedulingBounds(bounds);

    ViewingPlatform vp = su.getViewingPlatform();
    vp.setViewPlatformBehavior(orbit);      
  }  // end of orbitControls()



  private void initUserPosition()
  // Set the user's initial viewpoint using lookAt()
  {
    ViewingPlatform vp = su.getViewingPlatform();
    TransformGroup steerTG = vp.getViewPlatformTransform();

    Transform3D t3d = new Transform3D();
    steerTG.getTransform(t3d);

    // args are: viewer posn, where looking, up direction
    t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
    t3d.invert();

    steerTG.setTransform(t3d);
  }  // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3D(), 256, 256);
//         new MyOwn3D();
    }

}

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				11016453
			</iTime>
			<fName>
				MyOwn3D.java
			</fName>
			<fSize>
				9803.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

// import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;



public class MyOwn3D extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere();   // for environment nodes
    private SimpleUniverse su;
    
    // points for 8 corners of the room
    
    
    public MyOwn3D() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
//         Point3f a1 = new Point3f(-15f, -15f, -15f);
//         Point3f a2 = new Point3f(15f, -15f, -15f);
//         Point3f a3 = new Point3f(15f, 15f, -15f);
//         Point3f a4 = new Point3f(-15f, 15f, -15f);
//         
//         QuadArray floorCoord = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord.setCoordinate(0, a1);
//         floorCoord.setCoordinate(1, a2);
//         floorCoord.setCoordinate(2, a3);
//         floorCoord.setCoordinate(3, a4);
//         
//         Point3f b1 = new Point3f(-15f, -15f, 15f);
//         Point3f b2 = new Point3f(15f, -15f, 15f);
//         Point3f b3 = new Point3f(15f, 15f, 15f);
//         Point3f b4 = new Point3f(-15f, 15f, 15f);
//         
//         QuadArray floorCoord2 = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord2.setCoordinate(0, b1);
//         floorCoord2.setCoordinate(1, b2);
//         floorCoord2.setCoordinate(2, b3);
//         floorCoord2.setCoordinate(3, b4);
//         
//         Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
//         Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
//         ColoringAttributes greenFloor = new ColoringAttributes(green, 1);
//         ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
// 
//         Appearance fa = new Appearance();
//         Appearance fb = new Appearance();
// 
//         fa.setColoringAttributes(blueFloor);
//         fb.setColoringAttributes(greenFloor);
//         
//         Shape3D fs3d = new Shape3D(floorCoord, fa);
//         Shape3D fs3d2 = new Shape3D(floorCoord2, fb);
        
//         BranchGroup scene = new BranchGroup();
        BranchGroup scene = createSceneGraph();
//         scene.addChild(fs3d);
//         scene.addChild(fs3d2);
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        //su.getViewingPlatform().setNominalViewingTransform();
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor

    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();
        
        TransformGroup floor = makeFace("floor", new Color3f(0.0f, 0.1f, 0.4f));    // blue
//         TransformGroup ceiling = makeFace("ceiling", new Color3f(0.9f, 0.9f, 0f));  // yellow
        TransformGroup back = makeFace("back", new Color3f(0.0f, 0.5f, 0.1f));      // green
        TransformGroup front = makeFace("front", new Color3f(0.8f, 0.1f, 0.7f));    // purple
        TransformGroup left = makeFace("left", new Color3f(0.8f, 0.3f, 0.2f));      // red
        TransformGroup right = makeFace("right", new Color3f(1.0f, 1.0f, 1.0f));    // white
        
        Shape3D grid = makeGrid();
        
        objRoot.addChild(floor);
        objRoot.addChild(back);
        objRoot.addChild(left);
        objRoot.addChild(right);
        objRoot.addChild(front);
//         objRoot.addChild(ceiling);
        objRoot.addChild(grid);
        
        return objRoot;
    } // end of method

    private TransformGroup makeFace(String face, Color3f faceColor) {
        // create standard Quad
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-15f, 0f, 15f));
        qa.setCoordinate(1, new Point3f(15f, 0f, 15f));
        qa.setCoordinate(2, new Point3f(15f, 0f, -15f));
        qa.setCoordinate(3, new Point3f(-15f, 0f, -15f));
        
        // set color for quad
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        // translate quad to appropriate place for room structure
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15.001f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.rotX(Math.PI);
                t3d.setTranslation(new Vector3f(0f, 15.001f, 0f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on x-axis
                break;
            case "left": t3d.rotZ(-Math.PI/2);
                t3d.setTranslation(new Vector3f(-15.001f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on y-axis
                break;
            case "right": t3d.rotZ(Math.PI/2);
                t3d.setTranslation(new Vector3f(15.001f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.rotX(-Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, 15.001f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.rotX(Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, -15.001f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
        return tg;
    }
    
    // makes lines to divide constructed area into 3x3 grid for each side
    private Shape3D makeGrid() {
        
        // set up coords
        Point3f[] gridCoords = new Point3f[47];
        gridCoords[0] = new Point3f(-15f, 15f, 15f);
        gridCoords[1] = new Point3f(-15f, -15f, 15f);
        gridCoords[2] = new Point3f(15f, -15f, 15f);
        gridCoords[3] = new Point3f(15f, 15f, 15f);
        
        Point3f adjust = new Point3f(0, 0, -10);
        for (int i = 4; i < 16; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        gridCoords[16] = new Point3f(gridCoords[3]);
        gridCoords[17] = new Point3f(gridCoords[2]);
        gridCoords[18] = new Point3f(gridCoords[14]);
        gridCoords[19] = new Point3f(gridCoords[15]);
        
        adjust = new Point3f(-10, 0, 0);
        for (int i = 20; i < 32; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        gridCoords[32] = new Point3f(gridCoords[0]);
        gridCoords[33] = new Point3f(gridCoords[3]);
        gridCoords[34] = new Point3f(gridCoords[15]);
        gridCoords[35] = new Point3f(gridCoords[12]);
        gridCoords[36] = new Point3f(gridCoords[0]);
        
        adjust = new Point3f(0, -10, 0);
        for (int i = 37; i < 47; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 5]);
            gridCoords[i].add(adjust);
        }
        
                
        int[] lineCounts = new int[11];
        for (int i = 0; i < lineCounts.length; i++) {
            if (i < 8) {lineCounts[i] = 4;}
            else {lineCounts[i] = 5;}
        }
        
        // create line array object
        LineStripArray grid = new LineStripArray(47, LineStripArray.COORDINATES, lineCounts);
        for (int i = 0; i < gridCoords.length; i++) {
            grid.setCoordinate(i, gridCoords[i]);
        }
        
        // nudge the values so the lines can be seen
        
        return new Shape3D(grid);
        // return shape 3d

    }
    
  private void orbitControls(Canvas3D c)
  /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
  {
    OrbitBehavior orbit = 
        new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
    orbit.setSchedulingBounds(bounds);

    ViewingPlatform vp = su.getViewingPlatform();
    vp.setViewPlatformBehavior(orbit);      
  }  // end of orbitControls()



  private void initUserPosition()
  // Set the user's initial viewpoint using lookAt()
  {
    ViewingPlatform vp = su.getViewingPlatform();
    TransformGroup steerTG = vp.getViewPlatformTransform();

    Transform3D t3d = new Transform3D();
    steerTG.getTransform(t3d);

    // args are: viewer posn, where looking, up direction
    t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
    t3d.invert();

    steerTG.setTransform(t3d);
  }  // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3D(), 256, 256);
//         new MyOwn3D();
    }

}

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				11110359
			</iTime>
			<fName>
				MyOwn3D.java
			</fName>
			<fSize>
				9842.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

// import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;



public class MyOwn3D extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere();   // for environment nodes
    private SimpleUniverse su;
    
    // points for 8 corners of the room
    
    
    public MyOwn3D() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
//         Point3f a1 = new Point3f(-15f, -15f, -15f);
//         Point3f a2 = new Point3f(15f, -15f, -15f);
//         Point3f a3 = new Point3f(15f, 15f, -15f);
//         Point3f a4 = new Point3f(-15f, 15f, -15f);
//         
//         QuadArray floorCoord = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord.setCoordinate(0, a1);
//         floorCoord.setCoordinate(1, a2);
//         floorCoord.setCoordinate(2, a3);
//         floorCoord.setCoordinate(3, a4);
//         
//         Point3f b1 = new Point3f(-15f, -15f, 15f);
//         Point3f b2 = new Point3f(15f, -15f, 15f);
//         Point3f b3 = new Point3f(15f, 15f, 15f);
//         Point3f b4 = new Point3f(-15f, 15f, 15f);
//         
//         QuadArray floorCoord2 = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord2.setCoordinate(0, b1);
//         floorCoord2.setCoordinate(1, b2);
//         floorCoord2.setCoordinate(2, b3);
//         floorCoord2.setCoordinate(3, b4);
//         
//         Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
//         Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
//         ColoringAttributes greenFloor = new ColoringAttributes(green, 1);
//         ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
// 
//         Appearance fa = new Appearance();
//         Appearance fb = new Appearance();
// 
//         fa.setColoringAttributes(blueFloor);
//         fb.setColoringAttributes(greenFloor);
//         
//         Shape3D fs3d = new Shape3D(floorCoord, fa);
//         Shape3D fs3d2 = new Shape3D(floorCoord2, fb);
        
//         BranchGroup scene = new BranchGroup();
        BranchGroup scene = createSceneGraph();
//         scene.addChild(fs3d);
//         scene.addChild(fs3d2);
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        //su.getViewingPlatform().setNominalViewingTransform();
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor

    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();
        
//         TransformGroup floor = makeFace("floor", new Color3f(0.0f, 0.1f, 0.4f));    // blue
// //         TransformGroup ceiling = makeFace("ceiling", new Color3f(0.9f, 0.9f, 0f));  // yellow
//         TransformGroup back = makeFace("back", new Color3f(0.0f, 0.5f, 0.1f));      // green
//         TransformGroup front = makeFace("front", new Color3f(0.8f, 0.1f, 0.7f));    // purple
//         TransformGroup left = makeFace("left", new Color3f(0.8f, 0.3f, 0.2f));      // red
//         TransformGroup right = makeFace("right", new Color3f(1.0f, 1.0f, 1.0f));    // white
        
        Shape3D grid = makeGrid();
        
//         objRoot.addChild(floor);
//         objRoot.addChild(back);
//         objRoot.addChild(left);
//         objRoot.addChild(right);
//         objRoot.addChild(front);
// //         objRoot.addChild(ceiling);
//         objRoot.addChild(grid);
        
        return objRoot;
    } // end of method

    private TransformGroup makeFace(String face, Color3f faceColor) {
        // create standard Quad
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-15f, 0f, 15f));
        qa.setCoordinate(1, new Point3f(15f, 0f, 15f));
        qa.setCoordinate(2, new Point3f(15f, 0f, -15f));
        qa.setCoordinate(3, new Point3f(-15f, 0f, -15f));
        
        // set color for quad
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        // translate quad to appropriate place for room structure
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15.001f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.rotX(Math.PI);
                t3d.setTranslation(new Vector3f(0f, 15.001f, 0f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on x-axis
                break;
            case "left": t3d.rotZ(-Math.PI/2);
                t3d.setTranslation(new Vector3f(-15.001f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on y-axis
                break;
            case "right": t3d.rotZ(Math.PI/2);
                t3d.setTranslation(new Vector3f(15.001f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.rotX(-Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, 15.001f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.rotX(Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, -15.001f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
        return tg;
    }
    
    // makes lines to divide constructed area into 3x3 grid for each side
    private Shape3D makeGrid() {
        
        // set up coords
        Point3f[] gridCoords = new Point3f[47];
        gridCoords[0] = new Point3f(-15f, 15f, 15f);
        gridCoords[1] = new Point3f(-15f, -15f, 15f);
        gridCoords[2] = new Point3f(15f, -15f, 15f);
        gridCoords[3] = new Point3f(15f, 15f, 15f);
        
        Point3f adjust = new Point3f(0, 0, -10);
        for (int i = 4; i < 16; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        gridCoords[16] = new Point3f(gridCoords[3]);
        gridCoords[17] = new Point3f(gridCoords[2]);
        gridCoords[18] = new Point3f(gridCoords[14]);
        gridCoords[19] = new Point3f(gridCoords[15]);
        
        adjust = new Point3f(-10, 0, 0);
        for (int i = 20; i < 32; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        gridCoords[32] = new Point3f(gridCoords[0]);
        gridCoords[33] = new Point3f(gridCoords[3]);
        gridCoords[34] = new Point3f(gridCoords[15]);
        gridCoords[35] = new Point3f(gridCoords[12]);
        gridCoords[36] = new Point3f(gridCoords[0]);
        
        adjust = new Point3f(0, -10, 0);
        for (int i = 37; i < 47; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 5]);
            gridCoords[i].add(adjust);
        }
        
                
        int[] lineCounts = new int[11];
        for (int i = 0; i < lineCounts.length; i++) {
            if (i < 8) {lineCounts[i] = 4;}
            else {lineCounts[i] = 5;}
        }
        
        // create line array object
        LineStripArray grid = new LineStripArray(47, LineStripArray.COORDINATES, lineCounts);
        for (int i = 0; i < gridCoords.length; i++) {
            grid.setCoordinate(i, gridCoords[i]);
        }
        
        // nudge the values so the lines can be seen
        
        return new Shape3D(grid);
        // return shape 3d

    }
    
  private void orbitControls(Canvas3D c)
  /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
  {
    OrbitBehavior orbit = 
        new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
    orbit.setSchedulingBounds(bounds);

    ViewingPlatform vp = su.getViewingPlatform();
    vp.setViewPlatformBehavior(orbit);      
  }  // end of orbitControls()



  private void initUserPosition()
  // Set the user's initial viewpoint using lookAt()
  {
    ViewingPlatform vp = su.getViewingPlatform();
    TransformGroup steerTG = vp.getViewPlatformTransform();

    Transform3D t3d = new Transform3D();
    steerTG.getTransform(t3d);

    // args are: viewer posn, where looking, up direction
    t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
    t3d.invert();

    steerTG.setTransform(t3d);
  }  // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3D(), 256, 256);
//         new MyOwn3D();
    }

}

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				11151000
			</iTime>
			<fName>
				MyOwn3D.java
			</fName>
			<fSize>
				9839.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

// import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;



public class MyOwn3D extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere();   // for environment nodes
    private SimpleUniverse su;
    
    // points for 8 corners of the room
    
    
    public MyOwn3D() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
//         Point3f a1 = new Point3f(-15f, -15f, -15f);
//         Point3f a2 = new Point3f(15f, -15f, -15f);
//         Point3f a3 = new Point3f(15f, 15f, -15f);
//         Point3f a4 = new Point3f(-15f, 15f, -15f);
//         
//         QuadArray floorCoord = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord.setCoordinate(0, a1);
//         floorCoord.setCoordinate(1, a2);
//         floorCoord.setCoordinate(2, a3);
//         floorCoord.setCoordinate(3, a4);
//         
//         Point3f b1 = new Point3f(-15f, -15f, 15f);
//         Point3f b2 = new Point3f(15f, -15f, 15f);
//         Point3f b3 = new Point3f(15f, 15f, 15f);
//         Point3f b4 = new Point3f(-15f, 15f, 15f);
//         
//         QuadArray floorCoord2 = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord2.setCoordinate(0, b1);
//         floorCoord2.setCoordinate(1, b2);
//         floorCoord2.setCoordinate(2, b3);
//         floorCoord2.setCoordinate(3, b4);
//         
//         Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
//         Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
//         ColoringAttributes greenFloor = new ColoringAttributes(green, 1);
//         ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
// 
//         Appearance fa = new Appearance();
//         Appearance fb = new Appearance();
// 
//         fa.setColoringAttributes(blueFloor);
//         fb.setColoringAttributes(greenFloor);
//         
//         Shape3D fs3d = new Shape3D(floorCoord, fa);
//         Shape3D fs3d2 = new Shape3D(floorCoord2, fb);
        
//         BranchGroup scene = new BranchGroup();
        BranchGroup scene = createSceneGraph();
//         scene.addChild(fs3d);
//         scene.addChild(fs3d2);
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        //su.getViewingPlatform().setNominalViewingTransform();
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor

    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();
        
//         TransformGroup floor = makeFace("floor", new Color3f(0.0f, 0.1f, 0.4f));    // blue
// //         TransformGroup ceiling = makeFace("ceiling", new Color3f(0.9f, 0.9f, 0f));  // yellow
//         TransformGroup back = makeFace("back", new Color3f(0.0f, 0.5f, 0.1f));      // green
//         TransformGroup front = makeFace("front", new Color3f(0.8f, 0.1f, 0.7f));    // purple
//         TransformGroup left = makeFace("left", new Color3f(0.8f, 0.3f, 0.2f));      // red
//         TransformGroup right = makeFace("right", new Color3f(1.0f, 1.0f, 1.0f));    // white
        
        Shape3D grid = makeGrid();
        
//         objRoot.addChild(floor);
//         objRoot.addChild(back);
//         objRoot.addChild(left);
//         objRoot.addChild(right);
//         objRoot.addChild(front);
// //         objRoot.addChild(ceiling);
        objRoot.addChild(grid);
        
        return objRoot;
    } // end of method

    private TransformGroup makeFace(String face, Color3f faceColor) {
        // create standard Quad
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-15f, 0f, 15f));
        qa.setCoordinate(1, new Point3f(15f, 0f, 15f));
        qa.setCoordinate(2, new Point3f(15f, 0f, -15f));
        qa.setCoordinate(3, new Point3f(-15f, 0f, -15f));
        
        // set color for quad
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        // translate quad to appropriate place for room structure
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15.001f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.rotX(Math.PI);
                t3d.setTranslation(new Vector3f(0f, 15.001f, 0f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on x-axis
                break;
            case "left": t3d.rotZ(-Math.PI/2);
                t3d.setTranslation(new Vector3f(-15.001f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on y-axis
                break;
            case "right": t3d.rotZ(Math.PI/2);
                t3d.setTranslation(new Vector3f(15.001f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.rotX(-Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, 15.001f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.rotX(Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, -15.001f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
        return tg;
    }
    
    // makes lines to divide constructed area into 3x3 grid for each side
    private Shape3D makeGrid() {
        
        // set up coords
        Point3f[] gridCoords = new Point3f[47];
        gridCoords[0] = new Point3f(-15f, 15f, 15f);
        gridCoords[1] = new Point3f(-15f, -15f, 15f);
        gridCoords[2] = new Point3f(15f, -15f, 15f);
        gridCoords[3] = new Point3f(15f, 15f, 15f);
        
        Point3f adjust = new Point3f(0, 0, -10);
        for (int i = 4; i < 16; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        gridCoords[16] = new Point3f(gridCoords[3]);
        gridCoords[17] = new Point3f(gridCoords[2]);
        gridCoords[18] = new Point3f(gridCoords[14]);
        gridCoords[19] = new Point3f(gridCoords[15]);
        
        adjust = new Point3f(-10, 0, 0);
        for (int i = 20; i < 32; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        gridCoords[32] = new Point3f(gridCoords[0]);
        gridCoords[33] = new Point3f(gridCoords[3]);
        gridCoords[34] = new Point3f(gridCoords[15]);
        gridCoords[35] = new Point3f(gridCoords[12]);
        gridCoords[36] = new Point3f(gridCoords[0]);
        
        adjust = new Point3f(0, -10, 0);
        for (int i = 37; i < 47; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 5]);
            gridCoords[i].add(adjust);
        }
        
                
        int[] lineCounts = new int[11];
        for (int i = 0; i < lineCounts.length; i++) {
            if (i < 8) {lineCounts[i] = 4;}
            else {lineCounts[i] = 5;}
        }
        
        // create line array object
        LineStripArray grid = new LineStripArray(47, LineStripArray.COORDINATES, lineCounts);
        for (int i = 0; i < gridCoords.length; i++) {
            grid.setCoordinate(i, gridCoords[i]);
        }
        
        // nudge the values so the lines can be seen
        
        return new Shape3D(grid);
        // return shape 3d

    }
    
  private void orbitControls(Canvas3D c)
  /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
  {
    OrbitBehavior orbit = 
        new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
    orbit.setSchedulingBounds(bounds);

    ViewingPlatform vp = su.getViewingPlatform();
    vp.setViewPlatformBehavior(orbit);      
  }  // end of orbitControls()



  private void initUserPosition()
  // Set the user's initial viewpoint using lookAt()
  {
    ViewingPlatform vp = su.getViewingPlatform();
    TransformGroup steerTG = vp.getViewPlatformTransform();

    Transform3D t3d = new Transform3D();
    steerTG.getTransform(t3d);

    // args are: viewer posn, where looking, up direction
    t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
    t3d.invert();

    steerTG.setTransform(t3d);
  }  // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3D(), 256, 256);
//         new MyOwn3D();
    }

}

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				11250000
			</iTime>
			<fName>
				MyOwn3D.java
			</fName>
			<fSize>
				9833.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

// import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;



public class MyOwn3D extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere();   // for environment nodes
    private SimpleUniverse su;
    
    // points for 8 corners of the room
    
    
    public MyOwn3D() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
//         Point3f a1 = new Point3f(-15f, -15f, -15f);
//         Point3f a2 = new Point3f(15f, -15f, -15f);
//         Point3f a3 = new Point3f(15f, 15f, -15f);
//         Point3f a4 = new Point3f(-15f, 15f, -15f);
//         
//         QuadArray floorCoord = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord.setCoordinate(0, a1);
//         floorCoord.setCoordinate(1, a2);
//         floorCoord.setCoordinate(2, a3);
//         floorCoord.setCoordinate(3, a4);
//         
//         Point3f b1 = new Point3f(-15f, -15f, 15f);
//         Point3f b2 = new Point3f(15f, -15f, 15f);
//         Point3f b3 = new Point3f(15f, 15f, 15f);
//         Point3f b4 = new Point3f(-15f, 15f, 15f);
//         
//         QuadArray floorCoord2 = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord2.setCoordinate(0, b1);
//         floorCoord2.setCoordinate(1, b2);
//         floorCoord2.setCoordinate(2, b3);
//         floorCoord2.setCoordinate(3, b4);
//         
//         Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
//         Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
//         ColoringAttributes greenFloor = new ColoringAttributes(green, 1);
//         ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
// 
//         Appearance fa = new Appearance();
//         Appearance fb = new Appearance();
// 
//         fa.setColoringAttributes(blueFloor);
//         fb.setColoringAttributes(greenFloor);
//         
//         Shape3D fs3d = new Shape3D(floorCoord, fa);
//         Shape3D fs3d2 = new Shape3D(floorCoord2, fb);
        
//         BranchGroup scene = new BranchGroup();
        BranchGroup scene = createSceneGraph();
//         scene.addChild(fs3d);
//         scene.addChild(fs3d2);
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        //su.getViewingPlatform().setNominalViewingTransform();
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor

    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();
        
//         TransformGroup floor = makeFace("floor", new Color3f(0.0f, 0.1f, 0.4f));    // blue
// //         TransformGroup ceiling = makeFace("ceiling", new Color3f(0.9f, 0.9f, 0f));  // yellow
//         TransformGroup back = makeFace("back", new Color3f(0.0f, 0.5f, 0.1f));      // green
//         TransformGroup front = makeFace("front", new Color3f(0.8f, 0.1f, 0.7f));    // purple
//         TransformGroup left = makeFace("left", new Color3f(0.8f, 0.3f, 0.2f));      // red
//         TransformGroup right = makeFace("right", new Color3f(1.0f, 1.0f, 1.0f));    // white
        
        Shape3D grid = makeGrid();
        
//         objRoot.addChild(floor);
//         objRoot.addChild(back);
//         objRoot.addChild(left);
//         objRoot.addChild(right);
//         objRoot.addChild(front);
// //         objRoot.addChild(ceiling);
        objRoot.addChild(grid);
        
        return objRoot;
    } // end of method

    private TransformGroup makeFace(String face, Color3f faceColor) {
        // create standard Quad
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-15f, 0f, 15f));
        qa.setCoordinate(1, new Point3f(15f, 0f, 15f));
        qa.setCoordinate(2, new Point3f(15f, 0f, -15f));
        qa.setCoordinate(3, new Point3f(-15f, 0f, -15f));
        
        // set color for quad
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        // translate quad to appropriate place for room structure
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15.01f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.rotX(Math.PI);
                t3d.setTranslation(new Vector3f(0f, 15.01f, 0f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on x-axis
                break;
            case "left": t3d.rotZ(-Math.PI/2);
                t3d.setTranslation(new Vector3f(-15.01f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on y-axis
                break;
            case "right": t3d.rotZ(Math.PI/2);
                t3d.setTranslation(new Vector3f(15.01f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.rotX(-Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, 15.01f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.rotX(Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, -15.01f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
        return tg;
    }
    
    // makes lines to divide constructed area into 3x3 grid for each side
    private Shape3D makeGrid() {
        
        // set up coords
        Point3f[] gridCoords = new Point3f[47];
        gridCoords[0] = new Point3f(-15f, 15f, 15f);
        gridCoords[1] = new Point3f(-15f, -15f, 15f);
        gridCoords[2] = new Point3f(15f, -15f, 15f);
        gridCoords[3] = new Point3f(15f, 15f, 15f);
        
        Point3f adjust = new Point3f(0, 0, -10);
        for (int i = 4; i < 16; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        gridCoords[16] = new Point3f(gridCoords[3]);
        gridCoords[17] = new Point3f(gridCoords[2]);
        gridCoords[18] = new Point3f(gridCoords[14]);
        gridCoords[19] = new Point3f(gridCoords[15]);
        
        adjust = new Point3f(-10, 0, 0);
        for (int i = 20; i < 32; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        gridCoords[32] = new Point3f(gridCoords[0]);
        gridCoords[33] = new Point3f(gridCoords[3]);
        gridCoords[34] = new Point3f(gridCoords[15]);
        gridCoords[35] = new Point3f(gridCoords[12]);
        gridCoords[36] = new Point3f(gridCoords[0]);
        
        adjust = new Point3f(0, -10, 0);
        for (int i = 37; i < 47; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 5]);
            gridCoords[i].add(adjust);
        }
        
                
        int[] lineCounts = new int[11];
        for (int i = 0; i < lineCounts.length; i++) {
            if (i < 8) {lineCounts[i] = 4;}
            else {lineCounts[i] = 5;}
        }
        
        // create line array object
        LineStripArray grid = new LineStripArray(47, LineStripArray.COORDINATES, lineCounts);
        for (int i = 0; i < gridCoords.length; i++) {
            grid.setCoordinate(i, gridCoords[i]);
        }
        
        // nudge the values so the lines can be seen
        
        return new Shape3D(grid);
        // return shape 3d

    }
    
  private void orbitControls(Canvas3D c)
  /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
  {
    OrbitBehavior orbit = 
        new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
    orbit.setSchedulingBounds(bounds);

    ViewingPlatform vp = su.getViewingPlatform();
    vp.setViewPlatformBehavior(orbit);      
  }  // end of orbitControls()



  private void initUserPosition()
  // Set the user's initial viewpoint using lookAt()
  {
    ViewingPlatform vp = su.getViewingPlatform();
    TransformGroup steerTG = vp.getViewPlatformTransform();

    Transform3D t3d = new Transform3D();
    steerTG.getTransform(t3d);

    // args are: viewer posn, where looking, up direction
    t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
    t3d.invert();

    steerTG.setTransform(t3d);
  }  // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3D(), 256, 256);
//         new MyOwn3D();
    }

}

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				11304000
			</iTime>
			<fName>
				MyOwn3D.java
			</fName>
			<fSize>
				9804.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

// import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;



public class MyOwn3D extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere();   // for environment nodes
    private SimpleUniverse su;
    
    // points for 8 corners of the room
    
    
    public MyOwn3D() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
//         Point3f a1 = new Point3f(-15f, -15f, -15f);
//         Point3f a2 = new Point3f(15f, -15f, -15f);
//         Point3f a3 = new Point3f(15f, 15f, -15f);
//         Point3f a4 = new Point3f(-15f, 15f, -15f);
//         
//         QuadArray floorCoord = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord.setCoordinate(0, a1);
//         floorCoord.setCoordinate(1, a2);
//         floorCoord.setCoordinate(2, a3);
//         floorCoord.setCoordinate(3, a4);
//         
//         Point3f b1 = new Point3f(-15f, -15f, 15f);
//         Point3f b2 = new Point3f(15f, -15f, 15f);
//         Point3f b3 = new Point3f(15f, 15f, 15f);
//         Point3f b4 = new Point3f(-15f, 15f, 15f);
//         
//         QuadArray floorCoord2 = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord2.setCoordinate(0, b1);
//         floorCoord2.setCoordinate(1, b2);
//         floorCoord2.setCoordinate(2, b3);
//         floorCoord2.setCoordinate(3, b4);
//         
//         Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
//         Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
//         ColoringAttributes greenFloor = new ColoringAttributes(green, 1);
//         ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
// 
//         Appearance fa = new Appearance();
//         Appearance fb = new Appearance();
// 
//         fa.setColoringAttributes(blueFloor);
//         fb.setColoringAttributes(greenFloor);
//         
//         Shape3D fs3d = new Shape3D(floorCoord, fa);
//         Shape3D fs3d2 = new Shape3D(floorCoord2, fb);
        
//         BranchGroup scene = new BranchGroup();
        BranchGroup scene = createSceneGraph();
//         scene.addChild(fs3d);
//         scene.addChild(fs3d2);
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        //su.getViewingPlatform().setNominalViewingTransform();
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor

    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();
        
        TransformGroup floor = makeFace("floor", new Color3f(0.0f, 0.1f, 0.4f));    // blue
//         TransformGroup ceiling = makeFace("ceiling", new Color3f(0.9f, 0.9f, 0f));  // yellow
        TransformGroup back = makeFace("back", new Color3f(0.0f, 0.5f, 0.1f));      // green
        TransformGroup front = makeFace("front", new Color3f(0.8f, 0.1f, 0.7f));    // purple
        TransformGroup left = makeFace("left", new Color3f(0.8f, 0.3f, 0.2f));      // red
        TransformGroup right = makeFace("right", new Color3f(1.0f, 1.0f, 1.0f));    // white
        
        Shape3D grid = makeGrid();
        
        objRoot.addChild(floor);
        objRoot.addChild(back);
        objRoot.addChild(left);
        objRoot.addChild(right);
        objRoot.addChild(front);
//         objRoot.addChild(ceiling);
      
        objRoot.addChild(grid);
        
        return objRoot;
    } // end of method

    private TransformGroup makeFace(String face, Color3f faceColor) {
        // create standard Quad
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-15f, 0f, 15f));
        qa.setCoordinate(1, new Point3f(15f, 0f, 15f));
        qa.setCoordinate(2, new Point3f(15f, 0f, -15f));
        qa.setCoordinate(3, new Point3f(-15f, 0f, -15f));
        
        // set color for quad
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        // translate quad to appropriate place for room structure
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15.01f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.rotX(Math.PI);
                t3d.setTranslation(new Vector3f(0f, 15.01f, 0f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on x-axis
                break;
            case "left": t3d.rotZ(-Math.PI/2);
                t3d.setTranslation(new Vector3f(-15.01f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on y-axis
                break;
            case "right": t3d.rotZ(Math.PI/2);
                t3d.setTranslation(new Vector3f(15.01f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.rotX(-Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, 15.01f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.rotX(Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, -15.01f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
        return tg;
    }
    
    // makes lines to divide constructed area into 3x3 grid for each side
    private Shape3D makeGrid() {
        
        // set up coords
        Point3f[] gridCoords = new Point3f[47];
        gridCoords[0] = new Point3f(-15f, 15f, 15f);
        gridCoords[1] = new Point3f(-15f, -15f, 15f);
        gridCoords[2] = new Point3f(15f, -15f, 15f);
        gridCoords[3] = new Point3f(15f, 15f, 15f);
        
        Point3f adjust = new Point3f(0, 0, -10);
        for (int i = 4; i < 16; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        gridCoords[16] = new Point3f(gridCoords[3]);
        gridCoords[17] = new Point3f(gridCoords[2]);
        gridCoords[18] = new Point3f(gridCoords[14]);
        gridCoords[19] = new Point3f(gridCoords[15]);
        
        adjust = new Point3f(-10, 0, 0);
        for (int i = 20; i < 32; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        gridCoords[32] = new Point3f(gridCoords[0]);
        gridCoords[33] = new Point3f(gridCoords[3]);
        gridCoords[34] = new Point3f(gridCoords[15]);
        gridCoords[35] = new Point3f(gridCoords[12]);
        gridCoords[36] = new Point3f(gridCoords[0]);
        
        adjust = new Point3f(0, -10, 0);
        for (int i = 37; i < 47; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 5]);
            gridCoords[i].add(adjust);
        }
        
                
        int[] lineCounts = new int[11];
        for (int i = 0; i < lineCounts.length; i++) {
            if (i < 8) {lineCounts[i] = 4;}
            else {lineCounts[i] = 5;}
        }
        
        // create line array object
        LineStripArray grid = new LineStripArray(47, LineStripArray.COORDINATES, lineCounts);
        for (int i = 0; i < gridCoords.length; i++) {
            grid.setCoordinate(i, gridCoords[i]);
        }
        
        // nudge the values so the lines can be seen
        
        return new Shape3D(grid);
        // return shape 3d

    }
    
  private void orbitControls(Canvas3D c)
  /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
  {
    OrbitBehavior orbit = 
        new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
    orbit.setSchedulingBounds(bounds);

    ViewingPlatform vp = su.getViewingPlatform();
    vp.setViewPlatformBehavior(orbit);      
  }  // end of orbitControls()



  private void initUserPosition()
  // Set the user's initial viewpoint using lookAt()
  {
    ViewingPlatform vp = su.getViewingPlatform();
    TransformGroup steerTG = vp.getViewPlatformTransform();

    Transform3D t3d = new Transform3D();
    steerTG.getTransform(t3d);

    // args are: viewer posn, where looking, up direction
    t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
    t3d.invert();

    steerTG.setTransform(t3d);
  }  // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3D(), 256, 256);
//         new MyOwn3D();
    }

}

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				11388938
			</iTime>
			<fName>
				MyOwn3D.java
			</fName>
			<fSize>
				9810.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

// import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;



public class MyOwn3D extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere();   // for environment nodes
    private SimpleUniverse su;
    
    // points for 8 corners of the room
    
    
    public MyOwn3D() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
//         Point3f a1 = new Point3f(-15f, -15f, -15f);
//         Point3f a2 = new Point3f(15f, -15f, -15f);
//         Point3f a3 = new Point3f(15f, 15f, -15f);
//         Point3f a4 = new Point3f(-15f, 15f, -15f);
//         
//         QuadArray floorCoord = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord.setCoordinate(0, a1);
//         floorCoord.setCoordinate(1, a2);
//         floorCoord.setCoordinate(2, a3);
//         floorCoord.setCoordinate(3, a4);
//         
//         Point3f b1 = new Point3f(-15f, -15f, 15f);
//         Point3f b2 = new Point3f(15f, -15f, 15f);
//         Point3f b3 = new Point3f(15f, 15f, 15f);
//         Point3f b4 = new Point3f(-15f, 15f, 15f);
//         
//         QuadArray floorCoord2 = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord2.setCoordinate(0, b1);
//         floorCoord2.setCoordinate(1, b2);
//         floorCoord2.setCoordinate(2, b3);
//         floorCoord2.setCoordinate(3, b4);
//         
//         Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
//         Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
//         ColoringAttributes greenFloor = new ColoringAttributes(green, 1);
//         ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
// 
//         Appearance fa = new Appearance();
//         Appearance fb = new Appearance();
// 
//         fa.setColoringAttributes(blueFloor);
//         fb.setColoringAttributes(greenFloor);
//         
//         Shape3D fs3d = new Shape3D(floorCoord, fa);
//         Shape3D fs3d2 = new Shape3D(floorCoord2, fb);
        
//         BranchGroup scene = new BranchGroup();
        BranchGroup scene = createSceneGraph();
//         scene.addChild(fs3d);
//         scene.addChild(fs3d2);
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        //su.getViewingPlatform().setNominalViewingTransform();
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor

    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();
        
        TransformGroup floor = makeFace("floor", new Color3f(0.0f, 0.1f, 0.4f));    // blue
//         TransformGroup ceiling = makeFace("ceiling", new Color3f(0.9f, 0.9f, 0f));  // yellow
        TransformGroup back = makeFace("back", new Color3f(0.0f, 0.5f, 0.1f));      // green
        TransformGroup front = makeFace("front", new Color3f(0.8f, 0.1f, 0.7f));    // purple
        TransformGroup left = makeFace("left", new Color3f(0.8f, 0.3f, 0.2f));      // red
        TransformGroup right = makeFace("right", new Color3f(1.0f, 1.0f, 1.0f));    // white
        
        Shape3D grid = makeGrid();
        
        objRoot.addChild(floor);
        objRoot.addChild(back);
        objRoot.addChild(left);
        objRoot.addChild(right);
        objRoot.addChild(front);
//         objRoot.addChild(ceiling);
      
        objRoot.addChild(grid);
        
        return objRoot;
    } // end of method

    private TransformGroup makeFace(String face, Color3f faceColor) {
        // create standard Quad
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-15f, 0f, 15f));
        qa.setCoordinate(1, new Point3f(15f, 0f, 15f));
        qa.setCoordinate(2, new Point3f(15f, 0f, -15f));
        qa.setCoordinate(3, new Point3f(-15f, 0f, -15f));
        
        // set color for quad
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        // translate quad to appropriate place for room structure
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15.005f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.rotX(Math.PI);
                t3d.setTranslation(new Vector3f(0f, 15.005f, 0f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on x-axis
                break;
            case "left": t3d.rotZ(-Math.PI/2);
                t3d.setTranslation(new Vector3f(-15.005f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on y-axis
                break;
            case "right": t3d.rotZ(Math.PI/2);
                t3d.setTranslation(new Vector3f(15.005f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.rotX(-Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, 15.005f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.rotX(Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, -15.005f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
        return tg;
    }
    
    // makes lines to divide constructed area into 3x3 grid for each side
    private Shape3D makeGrid() {
        
        // set up coords
        Point3f[] gridCoords = new Point3f[47];
        gridCoords[0] = new Point3f(-15f, 15f, 15f);
        gridCoords[1] = new Point3f(-15f, -15f, 15f);
        gridCoords[2] = new Point3f(15f, -15f, 15f);
        gridCoords[3] = new Point3f(15f, 15f, 15f);
        
        Point3f adjust = new Point3f(0, 0, -10);
        for (int i = 4; i < 16; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        gridCoords[16] = new Point3f(gridCoords[3]);
        gridCoords[17] = new Point3f(gridCoords[2]);
        gridCoords[18] = new Point3f(gridCoords[14]);
        gridCoords[19] = new Point3f(gridCoords[15]);
        
        adjust = new Point3f(-10, 0, 0);
        for (int i = 20; i < 32; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        gridCoords[32] = new Point3f(gridCoords[0]);
        gridCoords[33] = new Point3f(gridCoords[3]);
        gridCoords[34] = new Point3f(gridCoords[15]);
        gridCoords[35] = new Point3f(gridCoords[12]);
        gridCoords[36] = new Point3f(gridCoords[0]);
        
        adjust = new Point3f(0, -10, 0);
        for (int i = 37; i < 47; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 5]);
            gridCoords[i].add(adjust);
        }
        
                
        int[] lineCounts = new int[11];
        for (int i = 0; i < lineCounts.length; i++) {
            if (i < 8) {lineCounts[i] = 4;}
            else {lineCounts[i] = 5;}
        }
        
        // create line array object
        LineStripArray grid = new LineStripArray(47, LineStripArray.COORDINATES, lineCounts);
        for (int i = 0; i < gridCoords.length; i++) {
            grid.setCoordinate(i, gridCoords[i]);
        }
        
        // nudge the values so the lines can be seen
        
        return new Shape3D(grid);
        // return shape 3d

    }
    
  private void orbitControls(Canvas3D c)
  /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
  {
    OrbitBehavior orbit = 
        new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
    orbit.setSchedulingBounds(bounds);

    ViewingPlatform vp = su.getViewingPlatform();
    vp.setViewPlatformBehavior(orbit);      
  }  // end of orbitControls()



  private void initUserPosition()
  // Set the user's initial viewpoint using lookAt()
  {
    ViewingPlatform vp = su.getViewingPlatform();
    TransformGroup steerTG = vp.getViewPlatformTransform();

    Transform3D t3d = new Transform3D();
    steerTG.getTransform(t3d);

    // args are: viewer posn, where looking, up direction
    t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
    t3d.invert();

    steerTG.setTransform(t3d);
  }  // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3D(), 256, 256);
//         new MyOwn3D();
    }

}

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				11641891
			</iTime>
			<fName>
				MyOwn3D.java
			</fName>
			<fSize>
				9810.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

// import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;



public class MyOwn3D extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere();   // for environment nodes
    private SimpleUniverse su;
    
    // points for 8 corners of the room
    
    
    public MyOwn3D() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
//         Point3f a1 = new Point3f(-15f, -15f, -15f);
//         Point3f a2 = new Point3f(15f, -15f, -15f);
//         Point3f a3 = new Point3f(15f, 15f, -15f);
//         Point3f a4 = new Point3f(-15f, 15f, -15f);
//         
//         QuadArray floorCoord = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord.setCoordinate(0, a1);
//         floorCoord.setCoordinate(1, a2);
//         floorCoord.setCoordinate(2, a3);
//         floorCoord.setCoordinate(3, a4);
//         
//         Point3f b1 = new Point3f(-15f, -15f, 15f);
//         Point3f b2 = new Point3f(15f, -15f, 15f);
//         Point3f b3 = new Point3f(15f, 15f, 15f);
//         Point3f b4 = new Point3f(-15f, 15f, 15f);
//         
//         QuadArray floorCoord2 = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord2.setCoordinate(0, b1);
//         floorCoord2.setCoordinate(1, b2);
//         floorCoord2.setCoordinate(2, b3);
//         floorCoord2.setCoordinate(3, b4);
//         
//         Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
//         Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
//         ColoringAttributes greenFloor = new ColoringAttributes(green, 1);
//         ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
// 
//         Appearance fa = new Appearance();
//         Appearance fb = new Appearance();
// 
//         fa.setColoringAttributes(blueFloor);
//         fb.setColoringAttributes(greenFloor);
//         
//         Shape3D fs3d = new Shape3D(floorCoord, fa);
//         Shape3D fs3d2 = new Shape3D(floorCoord2, fb);
        
//         BranchGroup scene = new BranchGroup();
        BranchGroup scene = createSceneGraph();
//         scene.addChild(fs3d);
//         scene.addChild(fs3d2);
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        //su.getViewingPlatform().setNominalViewingTransform();
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor

    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();
        
        TransformGroup floor = makeFace("floor", new Color3f(0.0f, 0.1f, 0.4f));    // blue
//         TransformGroup ceiling = makeFace("ceiling", new Color3f(1.0f, 1.0f, 1.0f));  // white
        TransformGroup back = makeFace("back", new Color3f(0.0f, 0.5f, 0.1f));      // green
        TransformGroup front = makeFace("front", new Color3f(0.8f, 0.1f, 0.7f));    // purple
        TransformGroup left = makeFace("left", new Color3f(0.8f, 0.3f, 0.2f));      // red
        TransformGroup right = makeFace("right", new Color3f(0.9f, 0.9f, 0f));    // yellow
        
        Shape3D grid = makeGrid();
        
        objRoot.addChild(floor);
        objRoot.addChild(back);
        objRoot.addChild(left);
        objRoot.addChild(right);
        objRoot.addChild(front);
//         objRoot.addChild(ceiling);
      
        objRoot.addChild(grid);
        
        return objRoot;
    } // end of method

    private TransformGroup makeFace(String face, Color3f faceColor) {
        // create standard Quad
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-15f, 0f, 15f));
        qa.setCoordinate(1, new Point3f(15f, 0f, 15f));
        qa.setCoordinate(2, new Point3f(15f, 0f, -15f));
        qa.setCoordinate(3, new Point3f(-15f, 0f, -15f));
        
        // set color for quad
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        // translate quad to appropriate place for room structure
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15.005f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.rotX(Math.PI);
                t3d.setTranslation(new Vector3f(0f, 15.005f, 0f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on x-axis
                break;
            case "left": t3d.rotZ(-Math.PI/2);
                t3d.setTranslation(new Vector3f(-15.005f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on y-axis
                break;
            case "right": t3d.rotZ(Math.PI/2);
                t3d.setTranslation(new Vector3f(15.005f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.rotX(-Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, 15.005f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.rotX(Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, -15.005f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
        return tg;
    }
    
    // makes lines to divide constructed area into 3x3 grid for each side
    private Shape3D makeGrid() {
        
        // set up coords
        Point3f[] gridCoords = new Point3f[47];
        gridCoords[0] = new Point3f(-15f, 15f, 15f);
        gridCoords[1] = new Point3f(-15f, -15f, 15f);
        gridCoords[2] = new Point3f(15f, -15f, 15f);
        gridCoords[3] = new Point3f(15f, 15f, 15f);
        
        Point3f adjust = new Point3f(0, 0, -10);
        for (int i = 4; i < 16; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        gridCoords[16] = new Point3f(gridCoords[3]);
        gridCoords[17] = new Point3f(gridCoords[2]);
        gridCoords[18] = new Point3f(gridCoords[14]);
        gridCoords[19] = new Point3f(gridCoords[15]);
        
        adjust = new Point3f(-10, 0, 0);
        for (int i = 20; i < 32; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        gridCoords[32] = new Point3f(gridCoords[0]);
        gridCoords[33] = new Point3f(gridCoords[3]);
        gridCoords[34] = new Point3f(gridCoords[15]);
        gridCoords[35] = new Point3f(gridCoords[12]);
        gridCoords[36] = new Point3f(gridCoords[0]);
        
        adjust = new Point3f(0, -10, 0);
        for (int i = 37; i < 47; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 5]);
            gridCoords[i].add(adjust);
        }
        
                
        int[] lineCounts = new int[11];
        for (int i = 0; i < lineCounts.length; i++) {
            if (i < 8) {lineCounts[i] = 4;}
            else {lineCounts[i] = 5;}
        }
        
        // create line array object
        LineStripArray grid = new LineStripArray(47, LineStripArray.COORDINATES, lineCounts);
        for (int i = 0; i < gridCoords.length; i++) {
            grid.setCoordinate(i, gridCoords[i]);
        }
        
        // nudge the values so the lines can be seen
        
        return new Shape3D(grid);
        // return shape 3d

    }
    
  private void orbitControls(Canvas3D c)
  /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
  {
    OrbitBehavior orbit = 
        new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
    orbit.setSchedulingBounds(bounds);

    ViewingPlatform vp = su.getViewingPlatform();
    vp.setViewPlatformBehavior(orbit);      
  }  // end of orbitControls()



  private void initUserPosition()
  // Set the user's initial viewpoint using lookAt()
  {
    ViewingPlatform vp = su.getViewingPlatform();
    TransformGroup steerTG = vp.getViewPlatformTransform();

    Transform3D t3d = new Transform3D();
    steerTG.getTransform(t3d);

    // args are: viewer posn, where looking, up direction
    t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
    t3d.invert();

    steerTG.setTransform(t3d);
  }  // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3D(), 256, 256);
//         new MyOwn3D();
    }

}

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
</mile>
