<?xml version="1.0" encoding="UTF-8"?>
<mile>
	<session_info>
		<session_id>
			1418666606328
		</session_id>
		<student_id>
			3042012
		</student_id>
		<assignment>
			TME1
		</assignment>
		<local_path>
			C:\Documents and Settings\Jason Bishop\My Documents\Dropbox\COMP382\TME1\Question1
		</local_path>
	</session_info>
	<session_data>
		<compile_instance>
			<iTime>
				82734
			</iTime>
			<fName>
				MyOwn3Dv2.java
			</fName>
			<fSize>
				4915.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;



public class MyOwn3Dv2 extends Applet {
    BoundingSphere bounds;   // for environment nodes
    SimpleUniverse su;
    public MyOwn3Dv2() {
        
        
        bounds = new BoundingSphere(new Point3d(0,0,0), 100);
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
        Point3f a1 = new Point3f(-15f, -15f, -15f);
        Point3f a2 = new Point3f(15f, -15f, -15f);
        Point3f a3 = new Point3f(15f, 15f, -15f);
        Point3f a4 = new Point3f(-15f, 15f, -15f);
        
        QuadArray floorCoord = new QuadArray(4, QuadArray.COORDINATES);
        floorCoord.setCoordinate(0, a1);
        floorCoord.setCoordinate(1, a2);
        floorCoord.setCoordinate(2, a3);
        floorCoord.setCoordinate(3, a4);
        
        Point3f b1 = new Point3f(-15f, -15f, 15f);
        Point3f b2 = new Point3f(15f, -15f, 15f);
        Point3f b3 = new Point3f(15f, 15f, 15f);
        Point3f b4 = new Point3f(-15f, 15f, 15f);
        
        QuadArray floorCoord2 = new QuadArray(4, QuadArray.COORDINATES);
        floorCoord2.setCoordinate(0, b1);
        floorCoord2.setCoordinate(1, b2);
        floorCoord2.setCoordinate(2, b3);
        floorCoord2.setCoordinate(3, b4);
        
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
        ColoringAttributes greenFloor = new ColoringAttributes(green, 1);
        ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);

        Appearance fa = new Appearance();
        Appearance fb = new Appearance();

        fa.setColoringAttributes(blueFloor);
        fb.setColoringAttributes(greenFloor);
        
        Shape3D fs3d = new Shape3D(floorCoord, fa);
        Shape3D fs3d2 = new Shape3D(floorCoord2, fb);
        
        BranchGroup scene = new BranchGroup();
        scene.addChild(fs3d);
        scene.addChild(fs3d2);
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        //su.getViewingPlatform().setNominalViewingTransform();
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor
    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();

        // colours for walls and floor
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
        Color3f medRed = new Color3f(0.8f, 0.4f, 0.3f);
        Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
        Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
         
        return objRoot;
    } // end of method

    // convert arraylists to arrays
    private Point3f[] AListToArray(ArrayList in) {
        Point3f[] out = new Point3f[in.size()];
        
        for(int i = 0; i < in.size(); i++) {
            out[i] = (Point3f)in.get(i);
        }
        return out;
    }
    
    private void orbitControls(Canvas3D c)
  /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
  {
    OrbitBehavior orbit = 
        new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
    orbit.setSchedulingBounds(bounds);

    ViewingPlatform vp = su.getViewingPlatform();
    vp.setViewPlatformBehavior(orbit);      
  }  // end of orbitControls()



  private void initUserPosition()
  // Set the user's initial viewpoint using lookAt()
  {
    ViewingPlatform vp = su.getViewingPlatform();
    TransformGroup steerTG = vp.getViewPlatformTransform();

    Transform3D t3d = new Transform3D();
    steerTG.getTransform(t3d);

    // args are: viewer posn, where looking, up direction
    t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
    t3d.invert();

    steerTG.setTransform(t3d);
  }  // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3Dv2(), 256, 256);
//         new MyOwn3Dv2();
    }

}

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				158812
			</iTime>
			<fName>
				MyOwn3Dv2.java
			</fName>
			<fSize>
				4991.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;



public class MyOwn3Dv2 extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere(new Point3d(0,0,0), 100);   // for environment nodes
    private SimpleUniverse su;
    
    public MyOwn3Dv2() {
        
        
//         bounds = new BoundingSphere(new Point3d(0,0,0), 100);
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
        Point3f a1 = new Point3f(-15f, -15f, -15f);
        Point3f a2 = new Point3f(15f, -15f, -15f);
        Point3f a3 = new Point3f(15f, 15f, -15f);
        Point3f a4 = new Point3f(-15f, 15f, -15f);
        
        QuadArray floorCoord = new QuadArray(4, QuadArray.COORDINATES);
        floorCoord.setCoordinate(0, a1);
        floorCoord.setCoordinate(1, a2);
        floorCoord.setCoordinate(2, a3);
        floorCoord.setCoordinate(3, a4);
        
        Point3f b1 = new Point3f(-15f, -15f, 15f);
        Point3f b2 = new Point3f(15f, -15f, 15f);
        Point3f b3 = new Point3f(15f, 15f, 15f);
        Point3f b4 = new Point3f(-15f, 15f, 15f);
        
        QuadArray floorCoord2 = new QuadArray(4, QuadArray.COORDINATES);
        floorCoord2.setCoordinate(0, b1);
        floorCoord2.setCoordinate(1, b2);
        floorCoord2.setCoordinate(2, b3);
        floorCoord2.setCoordinate(3, b4);
        
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
        ColoringAttributes greenFloor = new ColoringAttributes(green, 1);
        ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);

        Appearance fa = new Appearance();
        Appearance fb = new Appearance();

        fa.setColoringAttributes(blueFloor);
        fb.setColoringAttributes(greenFloor);
        
        Shape3D fs3d = new Shape3D(floorCoord, fa);
        Shape3D fs3d2 = new Shape3D(floorCoord2, fb);
        
        BranchGroup scene = new BranchGroup();
        scene.addChild(fs3d);
        scene.addChild(fs3d2);
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        //su.getViewingPlatform().setNominalViewingTransform();
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor
    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();

        // colours for walls and floor
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
        Color3f medRed = new Color3f(0.8f, 0.4f, 0.3f);
        Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
        Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
         
        return objRoot;
    } // end of method

    // convert arraylists to arrays
    private Point3f[] AListToArray(ArrayList in) {
        Point3f[] out = new Point3f[in.size()];
        
        for(int i = 0; i < in.size(); i++) {
            out[i] = (Point3f)in.get(i);
        }
        return out;
    }
    
    private void orbitControls(Canvas3D c)
  /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
  {
    OrbitBehavior orbit = 
        new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
    orbit.setSchedulingBounds(bounds);

    ViewingPlatform vp = su.getViewingPlatform();
    vp.setViewPlatformBehavior(orbit);      
  }  // end of orbitControls()



  private void initUserPosition()
  // Set the user's initial viewpoint using lookAt()
  {
    ViewingPlatform vp = su.getViewingPlatform();
    TransformGroup steerTG = vp.getViewPlatformTransform();

    Transform3D t3d = new Transform3D();
    steerTG.getTransform(t3d);

    // args are: viewer posn, where looking, up direction
    t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
    t3d.invert();

    steerTG.setTransform(t3d);
  }  // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3Dv2(), 256, 256);
//         new MyOwn3Dv2();
    }

}

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				2289375
			</iTime>
			<fName>
				MyOwn3Dv2.java
			</fName>
			<fSize>
				7986.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;



public class MyOwn3Dv2 extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere(new Point3d(0,0,0), 100);   // for environment nodes
    private SimpleUniverse su;
    
    // points for 8 corners of the room
    Point3f corner1 = new Point3f(-15f, -15f, -15f);
    Point3f corner2 = new Point3f(15f, -15f, -15f);
    Point3f corner3 = new Point3f(15f, 15f, -15f);
    Point3f corner4 = new Point3f(-15f, 15f, -15f);
    Point3f corner5 = new Point3f(-15f, -15f, 15f);
    Point3f corner6 = new Point3f(15f, -15f, 15f);
    Point3f corner7 = new Point3f(15f, 15f, 15f);
    Point3f corner8 = new Point3f(-15f, 15f, 15f);
    
    public MyOwn3Dv2() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
//         Point3f a1 = new Point3f(-15f, -15f, -15f);
//         Point3f a2 = new Point3f(15f, -15f, -15f);
//         Point3f a3 = new Point3f(15f, 15f, -15f);
//         Point3f a4 = new Point3f(-15f, 15f, -15f);
//         
//         QuadArray floorCoord = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord.setCoordinate(0, a1);
//         floorCoord.setCoordinate(1, a2);
//         floorCoord.setCoordinate(2, a3);
//         floorCoord.setCoordinate(3, a4);
//         
//         Point3f b1 = new Point3f(-15f, -15f, 15f);
//         Point3f b2 = new Point3f(15f, -15f, 15f);
//         Point3f b3 = new Point3f(15f, 15f, 15f);
//         Point3f b4 = new Point3f(-15f, 15f, 15f);
//         
//         QuadArray floorCoord2 = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord2.setCoordinate(0, b1);
//         floorCoord2.setCoordinate(1, b2);
//         floorCoord2.setCoordinate(2, b3);
//         floorCoord2.setCoordinate(3, b4);
//         
//         Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
//         Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
//         ColoringAttributes greenFloor = new ColoringAttributes(green, 1);
//         ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
// 
//         Appearance fa = new Appearance();
//         Appearance fb = new Appearance();
// 
//         fa.setColoringAttributes(blueFloor);
//         fb.setColoringAttributes(greenFloor);
//         
//         Shape3D fs3d = new Shape3D(floorCoord, fa);
//         Shape3D fs3d2 = new Shape3D(floorCoord2, fb);
        
//         BranchGroup scene = new BranchGroup();
        BranchGroup scene = createSceneGraph();
//         scene.addChild(fs3d);
//         scene.addChild(fs3d2);
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        //su.getViewingPlatform().setNominalViewingTransform();
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor
    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();
        
//         // points for 8 corners of the room
//         Point3f corner1 = new Point3f(-15f, -15f, -15f);
//         Point3f corner2 = new Point3f(15f, -15f, -15f);
//         Point3f corner3 = new Point3f(15f, 15f, -15f);
//         Point3f corner4 = new Point3f(-15f, 15f, -15f);
//         Point3f corner5 = new Point3f(-15f, -15f, 15f);
//         Point3f corner6 = new Point3f(15f, -15f, 15f);
//         Point3f corner7 = new Point3f(15f, 15f, 15f);
//         Point3f corner8 = new Point3f(-15f, 15f, 15f);
//         
        // colours for walls and floor
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
        Color3f medRed = new Color3f(0.8f, 0.4f, 0.3f);
        Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
        Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
        
        
        Shape3D floor = makeQuad("floor", blue);
        Shape3D back = makeQuad("back", blue);
        Shape3D left = makeQuad("left", blue);
        Shape3D right = makeQuad("right", blue);
        
        objRoot.addChild(floor);
        objRoot.addChild(back);
        objRoot.addChild(left);
        objRoot.addChild(right);
        
        return objRoot;
    } // end of method

    private Shape3D makeQuad(String face, Color3f faceColor) {
        QuadArray qa = new QuadArray
        switch (face) {
            case "floor": qa.setCoordinate(0, corner5);
                qa.setCoordinate(1, corner6);
                qa.setCoordinate(2, corner2);
                qa.setCoordinate(3, corner1);
            case "ceiling": qa.setCoordinate(0, corner8);
                qa.setCoordinate(1, corner7);
                qa.setCoordinate(2, corner3);
                qa.setCoordinate(3, corner4);
            case "left": qa.setCoordinate(0, corner5);
                qa.setCoordinate(1, corner8);
                qa.setCoordinate(2, corner4);
                qa.setCoordinate(3, corner1);
            case "right": qa.setCoordinate(0, corner8);
                qa.setCoordinate(1, corner7);
                qa.setCoordinate(2, corner3);
                qa.setCoordinate(3, corner2);
            case "front": qa.setCoordinate(0, corner5);
                qa.setCoordinate(1, corner6);
                qa.setCoordinate(2, corner7);
                qa.setCoordinate(3, corner8);
            case "back": qa.setCoordinate(0, corner1);
                qa.setCoordinate(1, corner2);
                qa.setCoordinate(2, corner3);
                qa.setCoordinate(3, corner4);
            default return null;
        }
        
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, ca);
        return shape;
    }
    
    // convert arraylists to arrays
    private Point3f[] AListToArray(ArrayList in) {
        Point3f[] out = new Point3f[in.size()];
        
        for(int i = 0; i < in.size(); i++) {
            out[i] = (Point3f)in.get(i);
        }
        return out;
    }
    
    private void orbitControls(Canvas3D c)
  /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
  {
    OrbitBehavior orbit = 
        new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
    orbit.setSchedulingBounds(bounds);

    ViewingPlatform vp = su.getViewingPlatform();
    vp.setViewPlatformBehavior(orbit);      
  }  // end of orbitControls()



  private void initUserPosition()
  // Set the user's initial viewpoint using lookAt()
  {
    ViewingPlatform vp = su.getViewingPlatform();
    TransformGroup steerTG = vp.getViewPlatformTransform();

    Transform3D t3d = new Transform3D();
    steerTG.getTransform(t3d);

    // args are: viewer posn, where looking, up direction
    t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
    t3d.invert();

    steerTG.setTransform(t3d);
  }  // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3Dv2(), 256, 256);
//         new MyOwn3Dv2();
    }

}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				151
			<iErrLine>
			<iErrMessage>
				'(' or '[' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				151
			<iErrLine>
			<iErrMessage>
				not a statement
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				151
			<iErrLine>
			<iErrMessage>
				';' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				152
			<iErrLine>
			<iErrMessage>
				orphaned case
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				176
			<iErrLine>
			<iErrMessage>
				: expected
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				2304984
			</iTime>
			<fName>
				MyOwn3Dv2.java
			</fName>
			<fSize>
				7989.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;



public class MyOwn3Dv2 extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere(new Point3d(0,0,0), 100);   // for environment nodes
    private SimpleUniverse su;
    
    // points for 8 corners of the room
    Point3f corner1 = new Point3f(-15f, -15f, -15f);
    Point3f corner2 = new Point3f(15f, -15f, -15f);
    Point3f corner3 = new Point3f(15f, 15f, -15f);
    Point3f corner4 = new Point3f(-15f, 15f, -15f);
    Point3f corner5 = new Point3f(-15f, -15f, 15f);
    Point3f corner6 = new Point3f(15f, -15f, 15f);
    Point3f corner7 = new Point3f(15f, 15f, 15f);
    Point3f corner8 = new Point3f(-15f, 15f, 15f);
    
    public MyOwn3Dv2() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
//         Point3f a1 = new Point3f(-15f, -15f, -15f);
//         Point3f a2 = new Point3f(15f, -15f, -15f);
//         Point3f a3 = new Point3f(15f, 15f, -15f);
//         Point3f a4 = new Point3f(-15f, 15f, -15f);
//         
//         QuadArray floorCoord = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord.setCoordinate(0, a1);
//         floorCoord.setCoordinate(1, a2);
//         floorCoord.setCoordinate(2, a3);
//         floorCoord.setCoordinate(3, a4);
//         
//         Point3f b1 = new Point3f(-15f, -15f, 15f);
//         Point3f b2 = new Point3f(15f, -15f, 15f);
//         Point3f b3 = new Point3f(15f, 15f, 15f);
//         Point3f b4 = new Point3f(-15f, 15f, 15f);
//         
//         QuadArray floorCoord2 = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord2.setCoordinate(0, b1);
//         floorCoord2.setCoordinate(1, b2);
//         floorCoord2.setCoordinate(2, b3);
//         floorCoord2.setCoordinate(3, b4);
//         
//         Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
//         Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
//         ColoringAttributes greenFloor = new ColoringAttributes(green, 1);
//         ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
// 
//         Appearance fa = new Appearance();
//         Appearance fb = new Appearance();
// 
//         fa.setColoringAttributes(blueFloor);
//         fb.setColoringAttributes(greenFloor);
//         
//         Shape3D fs3d = new Shape3D(floorCoord, fa);
//         Shape3D fs3d2 = new Shape3D(floorCoord2, fb);
        
//         BranchGroup scene = new BranchGroup();
        BranchGroup scene = createSceneGraph();
//         scene.addChild(fs3d);
//         scene.addChild(fs3d2);
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        //su.getViewingPlatform().setNominalViewingTransform();
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor
    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();
        
//         // points for 8 corners of the room
//         Point3f corner1 = new Point3f(-15f, -15f, -15f);
//         Point3f corner2 = new Point3f(15f, -15f, -15f);
//         Point3f corner3 = new Point3f(15f, 15f, -15f);
//         Point3f corner4 = new Point3f(-15f, 15f, -15f);
//         Point3f corner5 = new Point3f(-15f, -15f, 15f);
//         Point3f corner6 = new Point3f(15f, -15f, 15f);
//         Point3f corner7 = new Point3f(15f, 15f, 15f);
//         Point3f corner8 = new Point3f(-15f, 15f, 15f);
//         
        // colours for walls and floor
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
        Color3f medRed = new Color3f(0.8f, 0.4f, 0.3f);
        Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
        Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
        
        
        Shape3D floor = makeQuad("floor", blue);
        Shape3D back = makeQuad("back", blue);
        Shape3D left = makeQuad("left", blue);
        Shape3D right = makeQuad("right", blue);
        
        objRoot.addChild(floor);
        objRoot.addChild(back);
        objRoot.addChild(left);
        objRoot.addChild(right);
        
        return objRoot;
    } // end of method

    private Shape3D makeQuad(String face, Color3f faceColor) {
        QuadArray qa = new QuadArray();
        switch (face) {
            case "floor": qa.setCoordinate(0, corner5);
                qa.setCoordinate(1, corner6);
                qa.setCoordinate(2, corner2);
                qa.setCoordinate(3, corner1);
            case "ceiling": qa.setCoordinate(0, corner8);
                qa.setCoordinate(1, corner7);
                qa.setCoordinate(2, corner3);
                qa.setCoordinate(3, corner4);
            case "left": qa.setCoordinate(0, corner5);
                qa.setCoordinate(1, corner8);
                qa.setCoordinate(2, corner4);
                qa.setCoordinate(3, corner1);
            case "right": qa.setCoordinate(0, corner8);
                qa.setCoordinate(1, corner7);
                qa.setCoordinate(2, corner3);
                qa.setCoordinate(3, corner2);
            case "front": qa.setCoordinate(0, corner5);
                qa.setCoordinate(1, corner6);
                qa.setCoordinate(2, corner7);
                qa.setCoordinate(3, corner8);
            case "back": qa.setCoordinate(0, corner1);
                qa.setCoordinate(1, corner2);
                qa.setCoordinate(2, corner3);
                qa.setCoordinate(3, corner4);
            default return null;
        }
        
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, ca);
        return shape;
    }
    
    // convert arraylists to arrays
    private Point3f[] AListToArray(ArrayList in) {
        Point3f[] out = new Point3f[in.size()];
        
        for(int i = 0; i < in.size(); i++) {
            out[i] = (Point3f)in.get(i);
        }
        return out;
    }
    
    private void orbitControls(Canvas3D c)
  /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
  {
    OrbitBehavior orbit = 
        new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
    orbit.setSchedulingBounds(bounds);

    ViewingPlatform vp = su.getViewingPlatform();
    vp.setViewPlatformBehavior(orbit);      
  }  // end of orbitControls()



  private void initUserPosition()
  // Set the user's initial viewpoint using lookAt()
  {
    ViewingPlatform vp = su.getViewingPlatform();
    TransformGroup steerTG = vp.getViewPlatformTransform();

    Transform3D t3d = new Transform3D();
    steerTG.getTransform(t3d);

    // args are: viewer posn, where looking, up direction
    t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
    t3d.invert();

    steerTG.setTransform(t3d);
  }  // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3Dv2(), 256, 256);
//         new MyOwn3Dv2();
    }

}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				176
			<iErrLine>
			<iErrMessage>
				: expected
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				2314859
			</iTime>
			<fName>
				MyOwn3Dv2.java
			</fName>
			<fSize>
				7990.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;



public class MyOwn3Dv2 extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere(new Point3d(0,0,0), 100);   // for environment nodes
    private SimpleUniverse su;
    
    // points for 8 corners of the room
    Point3f corner1 = new Point3f(-15f, -15f, -15f);
    Point3f corner2 = new Point3f(15f, -15f, -15f);
    Point3f corner3 = new Point3f(15f, 15f, -15f);
    Point3f corner4 = new Point3f(-15f, 15f, -15f);
    Point3f corner5 = new Point3f(-15f, -15f, 15f);
    Point3f corner6 = new Point3f(15f, -15f, 15f);
    Point3f corner7 = new Point3f(15f, 15f, 15f);
    Point3f corner8 = new Point3f(-15f, 15f, 15f);
    
    public MyOwn3Dv2() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
//         Point3f a1 = new Point3f(-15f, -15f, -15f);
//         Point3f a2 = new Point3f(15f, -15f, -15f);
//         Point3f a3 = new Point3f(15f, 15f, -15f);
//         Point3f a4 = new Point3f(-15f, 15f, -15f);
//         
//         QuadArray floorCoord = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord.setCoordinate(0, a1);
//         floorCoord.setCoordinate(1, a2);
//         floorCoord.setCoordinate(2, a3);
//         floorCoord.setCoordinate(3, a4);
//         
//         Point3f b1 = new Point3f(-15f, -15f, 15f);
//         Point3f b2 = new Point3f(15f, -15f, 15f);
//         Point3f b3 = new Point3f(15f, 15f, 15f);
//         Point3f b4 = new Point3f(-15f, 15f, 15f);
//         
//         QuadArray floorCoord2 = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord2.setCoordinate(0, b1);
//         floorCoord2.setCoordinate(1, b2);
//         floorCoord2.setCoordinate(2, b3);
//         floorCoord2.setCoordinate(3, b4);
//         
//         Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
//         Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
//         ColoringAttributes greenFloor = new ColoringAttributes(green, 1);
//         ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
// 
//         Appearance fa = new Appearance();
//         Appearance fb = new Appearance();
// 
//         fa.setColoringAttributes(blueFloor);
//         fb.setColoringAttributes(greenFloor);
//         
//         Shape3D fs3d = new Shape3D(floorCoord, fa);
//         Shape3D fs3d2 = new Shape3D(floorCoord2, fb);
        
//         BranchGroup scene = new BranchGroup();
        BranchGroup scene = createSceneGraph();
//         scene.addChild(fs3d);
//         scene.addChild(fs3d2);
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        //su.getViewingPlatform().setNominalViewingTransform();
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor
    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();
        
//         // points for 8 corners of the room
//         Point3f corner1 = new Point3f(-15f, -15f, -15f);
//         Point3f corner2 = new Point3f(15f, -15f, -15f);
//         Point3f corner3 = new Point3f(15f, 15f, -15f);
//         Point3f corner4 = new Point3f(-15f, 15f, -15f);
//         Point3f corner5 = new Point3f(-15f, -15f, 15f);
//         Point3f corner6 = new Point3f(15f, -15f, 15f);
//         Point3f corner7 = new Point3f(15f, 15f, 15f);
//         Point3f corner8 = new Point3f(-15f, 15f, 15f);
//         
        // colours for walls and floor
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
        Color3f medRed = new Color3f(0.8f, 0.4f, 0.3f);
        Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
        Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
        
        
        Shape3D floor = makeQuad("floor", blue);
        Shape3D back = makeQuad("back", blue);
        Shape3D left = makeQuad("left", blue);
        Shape3D right = makeQuad("right", blue);
        
        objRoot.addChild(floor);
        objRoot.addChild(back);
        objRoot.addChild(left);
        objRoot.addChild(right);
        
        return objRoot;
    } // end of method

    private Shape3D makeQuad(String face, Color3f faceColor) {
        QuadArray qa = new QuadArray();
        switch (face) {
            case "floor": qa.setCoordinate(0, corner5);
                qa.setCoordinate(1, corner6);
                qa.setCoordinate(2, corner2);
                qa.setCoordinate(3, corner1);
            case "ceiling": qa.setCoordinate(0, corner8);
                qa.setCoordinate(1, corner7);
                qa.setCoordinate(2, corner3);
                qa.setCoordinate(3, corner4);
            case "left": qa.setCoordinate(0, corner5);
                qa.setCoordinate(1, corner8);
                qa.setCoordinate(2, corner4);
                qa.setCoordinate(3, corner1);
            case "right": qa.setCoordinate(0, corner8);
                qa.setCoordinate(1, corner7);
                qa.setCoordinate(2, corner3);
                qa.setCoordinate(3, corner2);
            case "front": qa.setCoordinate(0, corner5);
                qa.setCoordinate(1, corner6);
                qa.setCoordinate(2, corner7);
                qa.setCoordinate(3, corner8);
            case "back": qa.setCoordinate(0, corner1);
                qa.setCoordinate(1, corner2);
                qa.setCoordinate(2, corner3);
                qa.setCoordinate(3, corner4);
            default: return null;
        }
        
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, ca);
        return shape;
    }
    
    // convert arraylists to arrays
    private Point3f[] AListToArray(ArrayList in) {
        Point3f[] out = new Point3f[in.size()];
        
        for(int i = 0; i < in.size(); i++) {
            out[i] = (Point3f)in.get(i);
        }
        return out;
    }
    
    private void orbitControls(Canvas3D c)
  /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
  {
    OrbitBehavior orbit = 
        new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
    orbit.setSchedulingBounds(bounds);

    ViewingPlatform vp = su.getViewingPlatform();
    vp.setViewPlatformBehavior(orbit);      
  }  // end of orbitControls()



  private void initUserPosition()
  // Set the user's initial viewpoint using lookAt()
  {
    ViewingPlatform vp = su.getViewingPlatform();
    TransformGroup steerTG = vp.getViewPlatformTransform();

    Transform3D t3d = new Transform3D();
    steerTG.getTransform(t3d);

    // args are: viewer posn, where looking, up direction
    t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
    t3d.invert();

    steerTG.setTransform(t3d);
  }  // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3Dv2(), 256, 256);
//         new MyOwn3Dv2();
    }

}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				150
			<iErrLine>
			<iErrMessage>
				no suitable constructor found for QuadArray()
    constructor javax.media.j3d.QuadArray.QuadArray(int,int,int,int[],int,int[]) is not applicable
      (actual and formal argument lists differ in length)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int,int,int[]) is not applicable
      (actual and formal argument lists differ in length)
    constructor javax.media.j3d.QuadArray.QuadArray(int,int) is not applicable
      (actual and formal argument lists differ in length)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				182
			<iErrLine>
			<iErrMessage>
				no suitable constructor found for Shape3D(javax.media.j3d.QuadArray,javax.media.j3d.ColoringAttributes)
    constructor javax.media.j3d.Shape3D.Shape3D(javax.media.j3d.Geometry,javax.media.j3d.Appearance) is not applicable
      (actual argument javax.media.j3d.ColoringAttributes cannot be converted to javax.media.j3d.Appearance by method invocation conversion)
    constructor javax.media.j3d.Shape3D.Shape3D(javax.media.j3d.Geometry) is not applicable
      (actual and formal argument lists differ in length)
    constructor javax.media.j3d.Shape3D.Shape3D() is not applicable
      (actual and formal argument lists differ in length)
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				2339859
			</iTime>
			<fName>
				MyOwn3Dv2.java
			</fName>
			<fSize>
				8014.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;



public class MyOwn3Dv2 extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere(new Point3d(0,0,0), 100);   // for environment nodes
    private SimpleUniverse su;
    
    // points for 8 corners of the room
    Point3f corner1 = new Point3f(-15f, -15f, -15f);
    Point3f corner2 = new Point3f(15f, -15f, -15f);
    Point3f corner3 = new Point3f(15f, 15f, -15f);
    Point3f corner4 = new Point3f(-15f, 15f, -15f);
    Point3f corner5 = new Point3f(-15f, -15f, 15f);
    Point3f corner6 = new Point3f(15f, -15f, 15f);
    Point3f corner7 = new Point3f(15f, 15f, 15f);
    Point3f corner8 = new Point3f(-15f, 15f, 15f);
    
    public MyOwn3Dv2() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
//         Point3f a1 = new Point3f(-15f, -15f, -15f);
//         Point3f a2 = new Point3f(15f, -15f, -15f);
//         Point3f a3 = new Point3f(15f, 15f, -15f);
//         Point3f a4 = new Point3f(-15f, 15f, -15f);
//         
//         QuadArray floorCoord = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord.setCoordinate(0, a1);
//         floorCoord.setCoordinate(1, a2);
//         floorCoord.setCoordinate(2, a3);
//         floorCoord.setCoordinate(3, a4);
//         
//         Point3f b1 = new Point3f(-15f, -15f, 15f);
//         Point3f b2 = new Point3f(15f, -15f, 15f);
//         Point3f b3 = new Point3f(15f, 15f, 15f);
//         Point3f b4 = new Point3f(-15f, 15f, 15f);
//         
//         QuadArray floorCoord2 = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord2.setCoordinate(0, b1);
//         floorCoord2.setCoordinate(1, b2);
//         floorCoord2.setCoordinate(2, b3);
//         floorCoord2.setCoordinate(3, b4);
//         
//         Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
//         Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
//         ColoringAttributes greenFloor = new ColoringAttributes(green, 1);
//         ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
// 
//         Appearance fa = new Appearance();
//         Appearance fb = new Appearance();
// 
//         fa.setColoringAttributes(blueFloor);
//         fb.setColoringAttributes(greenFloor);
//         
//         Shape3D fs3d = new Shape3D(floorCoord, fa);
//         Shape3D fs3d2 = new Shape3D(floorCoord2, fb);
        
//         BranchGroup scene = new BranchGroup();
        BranchGroup scene = createSceneGraph();
//         scene.addChild(fs3d);
//         scene.addChild(fs3d2);
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        //su.getViewingPlatform().setNominalViewingTransform();
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor
    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();
        
//         // points for 8 corners of the room
//         Point3f corner1 = new Point3f(-15f, -15f, -15f);
//         Point3f corner2 = new Point3f(15f, -15f, -15f);
//         Point3f corner3 = new Point3f(15f, 15f, -15f);
//         Point3f corner4 = new Point3f(-15f, 15f, -15f);
//         Point3f corner5 = new Point3f(-15f, -15f, 15f);
//         Point3f corner6 = new Point3f(15f, -15f, 15f);
//         Point3f corner7 = new Point3f(15f, 15f, 15f);
//         Point3f corner8 = new Point3f(-15f, 15f, 15f);
//         
        // colours for walls and floor
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
        Color3f medRed = new Color3f(0.8f, 0.4f, 0.3f);
        Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
        Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
        
        
        Shape3D floor = makeQuad("floor", blue);
        Shape3D back = makeQuad("back", blue);
        Shape3D left = makeQuad("left", blue);
        Shape3D right = makeQuad("right", blue);
        
        objRoot.addChild(floor);
        objRoot.addChild(back);
        objRoot.addChild(left);
        objRoot.addChild(right);
        
        return objRoot;
    } // end of method

    private Shape3D makeQuad(String face, Color3f faceColor) {
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        switch (face) {
            case "floor": qa.setCoordinate(0, corner5);
                qa.setCoordinate(1, corner6);
                qa.setCoordinate(2, corner2);
                qa.setCoordinate(3, corner1);
            case "ceiling": qa.setCoordinate(0, corner8);
                qa.setCoordinate(1, corner7);
                qa.setCoordinate(2, corner3);
                qa.setCoordinate(3, corner4);
            case "left": qa.setCoordinate(0, corner5);
                qa.setCoordinate(1, corner8);
                qa.setCoordinate(2, corner4);
                qa.setCoordinate(3, corner1);
            case "right": qa.setCoordinate(0, corner8);
                qa.setCoordinate(1, corner7);
                qa.setCoordinate(2, corner3);
                qa.setCoordinate(3, corner2);
            case "front": qa.setCoordinate(0, corner5);
                qa.setCoordinate(1, corner6);
                qa.setCoordinate(2, corner7);
                qa.setCoordinate(3, corner8);
            case "back": qa.setCoordinate(0, corner1);
                qa.setCoordinate(1, corner2);
                qa.setCoordinate(2, corner3);
                qa.setCoordinate(3, corner4);
            default: return null;
        }
        
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, ca);
        return shape;
    }
    
    // convert arraylists to arrays
    private Point3f[] AListToArray(ArrayList in) {
        Point3f[] out = new Point3f[in.size()];
        
        for(int i = 0; i < in.size(); i++) {
            out[i] = (Point3f)in.get(i);
        }
        return out;
    }
    
    private void orbitControls(Canvas3D c)
  /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
  {
    OrbitBehavior orbit = 
        new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
    orbit.setSchedulingBounds(bounds);

    ViewingPlatform vp = su.getViewingPlatform();
    vp.setViewPlatformBehavior(orbit);      
  }  // end of orbitControls()



  private void initUserPosition()
  // Set the user's initial viewpoint using lookAt()
  {
    ViewingPlatform vp = su.getViewingPlatform();
    TransformGroup steerTG = vp.getViewPlatformTransform();

    Transform3D t3d = new Transform3D();
    steerTG.getTransform(t3d);

    // args are: viewer posn, where looking, up direction
    t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
    t3d.invert();

    steerTG.setTransform(t3d);
  }  // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3Dv2(), 256, 256);
//         new MyOwn3Dv2();
    }

}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				182
			<iErrLine>
			<iErrMessage>
				no suitable constructor found for Shape3D(javax.media.j3d.QuadArray,javax.media.j3d.ColoringAttributes)
    constructor javax.media.j3d.Shape3D.Shape3D(javax.media.j3d.Geometry,javax.media.j3d.Appearance) is not applicable
      (actual argument javax.media.j3d.ColoringAttributes cannot be converted to javax.media.j3d.Appearance by method invocation conversion)
    constructor javax.media.j3d.Shape3D.Shape3D(javax.media.j3d.Geometry) is not applicable
      (actual and formal argument lists differ in length)
    constructor javax.media.j3d.Shape3D.Shape3D() is not applicable
      (actual and formal argument lists differ in length)
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				2375875
			</iTime>
			<fName>
				MyOwn3Dv2.java
			</fName>
			<fSize>
				8018.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;



public class MyOwn3Dv2 extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere(new Point3d(0,0,0), 100);   // for environment nodes
    private SimpleUniverse su;
    
    // points for 8 corners of the room
    Point3f corner1 = new Point3f(-15f, -15f, -15f);
    Point3f corner2 = new Point3f(15f, -15f, -15f);
    Point3f corner3 = new Point3f(15f, 15f, -15f);
    Point3f corner4 = new Point3f(-15f, 15f, -15f);
    Point3f corner5 = new Point3f(-15f, -15f, 15f);
    Point3f corner6 = new Point3f(15f, -15f, 15f);
    Point3f corner7 = new Point3f(15f, 15f, 15f);
    Point3f corner8 = new Point3f(-15f, 15f, 15f);
    
    public MyOwn3Dv2() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
//         Point3f a1 = new Point3f(-15f, -15f, -15f);
//         Point3f a2 = new Point3f(15f, -15f, -15f);
//         Point3f a3 = new Point3f(15f, 15f, -15f);
//         Point3f a4 = new Point3f(-15f, 15f, -15f);
//         
//         QuadArray floorCoord = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord.setCoordinate(0, a1);
//         floorCoord.setCoordinate(1, a2);
//         floorCoord.setCoordinate(2, a3);
//         floorCoord.setCoordinate(3, a4);
//         
//         Point3f b1 = new Point3f(-15f, -15f, 15f);
//         Point3f b2 = new Point3f(15f, -15f, 15f);
//         Point3f b3 = new Point3f(15f, 15f, 15f);
//         Point3f b4 = new Point3f(-15f, 15f, 15f);
//         
//         QuadArray floorCoord2 = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord2.setCoordinate(0, b1);
//         floorCoord2.setCoordinate(1, b2);
//         floorCoord2.setCoordinate(2, b3);
//         floorCoord2.setCoordinate(3, b4);
//         
//         Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
//         Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
//         ColoringAttributes greenFloor = new ColoringAttributes(green, 1);
//         ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
// 
//         Appearance fa = new Appearance();
//         Appearance fb = new Appearance();
// 
//         fa.setColoringAttributes(blueFloor);
//         fb.setColoringAttributes(greenFloor);
//         
//         Shape3D fs3d = new Shape3D(floorCoord, fa);
//         Shape3D fs3d2 = new Shape3D(floorCoord2, fb);
        
//         BranchGroup scene = new BranchGroup();
        BranchGroup scene = createSceneGraph();
//         scene.addChild(fs3d);
//         scene.addChild(fs3d2);
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        //su.getViewingPlatform().setNominalViewingTransform();
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor
    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();
        
//         // points for 8 corners of the room
//         Point3f corner1 = new Point3f(-15f, -15f, -15f);
//         Point3f corner2 = new Point3f(15f, -15f, -15f);
//         Point3f corner3 = new Point3f(15f, 15f, -15f);
//         Point3f corner4 = new Point3f(-15f, 15f, -15f);
//         Point3f corner5 = new Point3f(-15f, -15f, 15f);
//         Point3f corner6 = new Point3f(15f, -15f, 15f);
//         Point3f corner7 = new Point3f(15f, 15f, 15f);
//         Point3f corner8 = new Point3f(-15f, 15f, 15f);
//         
        // colours for walls and floor
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
        Color3f medRed = new Color3f(0.8f, 0.4f, 0.3f);
        Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
        Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
        
        
        Shape3D floor = makeQuad("floor", blue);
        Shape3D back = makeQuad("back", blue);
        Shape3D left = makeQuad("left", blue);
        Shape3D right = makeQuad("right", blue);
        
        objRoot.addChild(floor);
        objRoot.addChild(back);
        objRoot.addChild(left);
        objRoot.addChild(right);
        
        return objRoot;
    } // end of method

    private Shape3D makeQuad(String face, Color3f faceColor) {
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        switch (face) {
            case "floor": qa.setCoordinate(0, corner5);
                qa.setCoordinate(1, corner6);
                qa.setCoordinate(2, corner2);
                qa.setCoordinate(3, corner1);
            case "ceiling": qa.setCoordinate(0, corner8);
                qa.setCoordinate(1, corner7);
                qa.setCoordinate(2, corner3);
                qa.setCoordinate(3, corner4);
            case "left": qa.setCoordinate(0, corner5);
                qa.setCoordinate(1, corner8);
                qa.setCoordinate(2, corner4);
                qa.setCoordinate(3, corner1);
            case "right": qa.setCoordinate(0, corner8);
                qa.setCoordinate(1, corner7);
                qa.setCoordinate(2, corner3);
                qa.setCoordinate(3, corner2);
            case "front": qa.setCoordinate(0, corner5);
                qa.setCoordinate(1, corner6);
                qa.setCoordinate(2, corner7);
                qa.setCoordinate(3, corner8);
            case "back": qa.setCoordinate(0, corner1);
                qa.setCoordinate(1, corner2);
                qa.setCoordinate(2, corner3);
                qa.setCoordinate(3, corner4);
            default: return null;
        }
        
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        return shape;
    }
    
    // convert arraylists to arrays
    private Point3f[] AListToArray(ArrayList in) {
        Point3f[] out = new Point3f[in.size()];
        
        for(int i = 0; i < in.size(); i++) {
            out[i] = (Point3f)in.get(i);
        }
        return out;
    }
    
    private void orbitControls(Canvas3D c)
  /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
  {
    OrbitBehavior orbit = 
        new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
    orbit.setSchedulingBounds(bounds);

    ViewingPlatform vp = su.getViewingPlatform();
    vp.setViewPlatformBehavior(orbit);      
  }  // end of orbitControls()



  private void initUserPosition()
  // Set the user's initial viewpoint using lookAt()
  {
    ViewingPlatform vp = su.getViewingPlatform();
    TransformGroup steerTG = vp.getViewPlatformTransform();

    Transform3D t3d = new Transform3D();
    steerTG.getTransform(t3d);

    // args are: viewer posn, where looking, up direction
    t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
    t3d.invert();

    steerTG.setTransform(t3d);
  }  // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3Dv2(), 256, 256);
//         new MyOwn3Dv2();
    }

}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				179
			<iErrLine>
			<iErrMessage>
				unreachable statement
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				2478812
			</iTime>
			<fName>
				MyOwn3Dv2.java
			</fName>
			<fSize>
				8018.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;



public class MyOwn3Dv2 extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere(new Point3d(0,0,0), 100);   // for environment nodes
    private SimpleUniverse su;
    
    // points for 8 corners of the room
    Point3f corner1 = new Point3f(-15f, -15f, -15f);
    Point3f corner2 = new Point3f(15f, -15f, -15f);
    Point3f corner3 = new Point3f(15f, 15f, -15f);
    Point3f corner4 = new Point3f(-15f, 15f, -15f);
    Point3f corner5 = new Point3f(-15f, -15f, 15f);
    Point3f corner6 = new Point3f(15f, -15f, 15f);
    Point3f corner7 = new Point3f(15f, 15f, 15f);
    Point3f corner8 = new Point3f(-15f, 15f, 15f);
    
    public MyOwn3Dv2() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
//         Point3f a1 = new Point3f(-15f, -15f, -15f);
//         Point3f a2 = new Point3f(15f, -15f, -15f);
//         Point3f a3 = new Point3f(15f, 15f, -15f);
//         Point3f a4 = new Point3f(-15f, 15f, -15f);
//         
//         QuadArray floorCoord = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord.setCoordinate(0, a1);
//         floorCoord.setCoordinate(1, a2);
//         floorCoord.setCoordinate(2, a3);
//         floorCoord.setCoordinate(3, a4);
//         
//         Point3f b1 = new Point3f(-15f, -15f, 15f);
//         Point3f b2 = new Point3f(15f, -15f, 15f);
//         Point3f b3 = new Point3f(15f, 15f, 15f);
//         Point3f b4 = new Point3f(-15f, 15f, 15f);
//         
//         QuadArray floorCoord2 = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord2.setCoordinate(0, b1);
//         floorCoord2.setCoordinate(1, b2);
//         floorCoord2.setCoordinate(2, b3);
//         floorCoord2.setCoordinate(3, b4);
//         
//         Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
//         Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
//         ColoringAttributes greenFloor = new ColoringAttributes(green, 1);
//         ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
// 
//         Appearance fa = new Appearance();
//         Appearance fb = new Appearance();
// 
//         fa.setColoringAttributes(blueFloor);
//         fb.setColoringAttributes(greenFloor);
//         
//         Shape3D fs3d = new Shape3D(floorCoord, fa);
//         Shape3D fs3d2 = new Shape3D(floorCoord2, fb);
        
//         BranchGroup scene = new BranchGroup();
        BranchGroup scene = createSceneGraph();
//         scene.addChild(fs3d);
//         scene.addChild(fs3d2);
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        //su.getViewingPlatform().setNominalViewingTransform();
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor
    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();
        
//         // points for 8 corners of the room
//         Point3f corner1 = new Point3f(-15f, -15f, -15f);
//         Point3f corner2 = new Point3f(15f, -15f, -15f);
//         Point3f corner3 = new Point3f(15f, 15f, -15f);
//         Point3f corner4 = new Point3f(-15f, 15f, -15f);
//         Point3f corner5 = new Point3f(-15f, -15f, 15f);
//         Point3f corner6 = new Point3f(15f, -15f, 15f);
//         Point3f corner7 = new Point3f(15f, 15f, 15f);
//         Point3f corner8 = new Point3f(-15f, 15f, 15f);
//         
        // colours for walls and floor
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
        Color3f medRed = new Color3f(0.8f, 0.4f, 0.3f);
        Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
        Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
        
        
        Shape3D floor = makeQuad("floor", blue);
        Shape3D back = makeQuad("back", blue);
        Shape3D left = makeQuad("left", blue);
        Shape3D right = makeQuad("right", blue);
        
        objRoot.addChild(floor);
        objRoot.addChild(back);
        objRoot.addChild(left);
        objRoot.addChild(right);
        
        return objRoot;
    } // end of method

    private Shape3D makeQuad(String face, Color3f faceColor) {
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        switch (face) {
            case "floor": qa.setCoordinate(0, corner5);
                qa.setCoordinate(1, corner6);
                qa.setCoordinate(2, corner2);
                qa.setCoordinate(3, corner1);
            case "ceiling": qa.setCoordinate(0, corner8);
                qa.setCoordinate(1, corner7);
                qa.setCoordinate(2, corner3);
                qa.setCoordinate(3, corner4);
            case "left": qa.setCoordinate(0, corner5);
                qa.setCoordinate(1, corner8);
                qa.setCoordinate(2, corner4);
                qa.setCoordinate(3, corner1);
            case "right": qa.setCoordinate(0, corner8);
                qa.setCoordinate(1, corner7);
                qa.setCoordinate(2, corner3);
                qa.setCoordinate(3, corner2);
            case "front": qa.setCoordinate(0, corner5);
                qa.setCoordinate(1, corner6);
                qa.setCoordinate(2, corner7);
                qa.setCoordinate(3, corner8);
            case "back": qa.setCoordinate(0, corner1);
                qa.setCoordinate(1, corner2);
                qa.setCoordinate(2, corner3);
                qa.setCoordinate(3, corner4);
            default: return null;
        }
        
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        return shape;
    }
    
    // convert arraylists to arrays
    private Point3f[] AListToArray(ArrayList in) {
        Point3f[] out = new Point3f[in.size()];
        
        for(int i = 0; i < in.size(); i++) {
            out[i] = (Point3f)in.get(i);
        }
        return out;
    }
    
    private void orbitControls(Canvas3D c)
  /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
  {
    OrbitBehavior orbit = 
        new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
    orbit.setSchedulingBounds(bounds);

    ViewingPlatform vp = su.getViewingPlatform();
    vp.setViewPlatformBehavior(orbit);      
  }  // end of orbitControls()



  private void initUserPosition()
  // Set the user's initial viewpoint using lookAt()
  {
    ViewingPlatform vp = su.getViewingPlatform();
    TransformGroup steerTG = vp.getViewPlatformTransform();

    Transform3D t3d = new Transform3D();
    steerTG.getTransform(t3d);

    // args are: viewer posn, where looking, up direction
    t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
    t3d.invert();

    steerTG.setTransform(t3d);
  }  // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3Dv2(), 256, 256);
//         new MyOwn3Dv2();
    }

}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				179
			<iErrLine>
			<iErrMessage>
				unreachable statement
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				2621797
			</iTime>
			<fName>
				MyOwn3Dv2.java
			</fName>
			<fSize>
				8156.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;



public class MyOwn3Dv2 extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere(new Point3d(0,0,0), 100);   // for environment nodes
    private SimpleUniverse su;
    
    // points for 8 corners of the room
    Point3f corner1 = new Point3f(-15f, -15f, -15f);
    Point3f corner2 = new Point3f(15f, -15f, -15f);
    Point3f corner3 = new Point3f(15f, 15f, -15f);
    Point3f corner4 = new Point3f(-15f, 15f, -15f);
    Point3f corner5 = new Point3f(-15f, -15f, 15f);
    Point3f corner6 = new Point3f(15f, -15f, 15f);
    Point3f corner7 = new Point3f(15f, 15f, 15f);
    Point3f corner8 = new Point3f(-15f, 15f, 15f);
    
    public MyOwn3Dv2() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
//         Point3f a1 = new Point3f(-15f, -15f, -15f);
//         Point3f a2 = new Point3f(15f, -15f, -15f);
//         Point3f a3 = new Point3f(15f, 15f, -15f);
//         Point3f a4 = new Point3f(-15f, 15f, -15f);
//         
//         QuadArray floorCoord = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord.setCoordinate(0, a1);
//         floorCoord.setCoordinate(1, a2);
//         floorCoord.setCoordinate(2, a3);
//         floorCoord.setCoordinate(3, a4);
//         
//         Point3f b1 = new Point3f(-15f, -15f, 15f);
//         Point3f b2 = new Point3f(15f, -15f, 15f);
//         Point3f b3 = new Point3f(15f, 15f, 15f);
//         Point3f b4 = new Point3f(-15f, 15f, 15f);
//         
//         QuadArray floorCoord2 = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord2.setCoordinate(0, b1);
//         floorCoord2.setCoordinate(1, b2);
//         floorCoord2.setCoordinate(2, b3);
//         floorCoord2.setCoordinate(3, b4);
//         
//         Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
//         Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
//         ColoringAttributes greenFloor = new ColoringAttributes(green, 1);
//         ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
// 
//         Appearance fa = new Appearance();
//         Appearance fb = new Appearance();
// 
//         fa.setColoringAttributes(blueFloor);
//         fb.setColoringAttributes(greenFloor);
//         
//         Shape3D fs3d = new Shape3D(floorCoord, fa);
//         Shape3D fs3d2 = new Shape3D(floorCoord2, fb);
        
//         BranchGroup scene = new BranchGroup();
        BranchGroup scene = createSceneGraph();
//         scene.addChild(fs3d);
//         scene.addChild(fs3d2);
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        //su.getViewingPlatform().setNominalViewingTransform();
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor
    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();
        
//         // points for 8 corners of the room
//         Point3f corner1 = new Point3f(-15f, -15f, -15f);
//         Point3f corner2 = new Point3f(15f, -15f, -15f);
//         Point3f corner3 = new Point3f(15f, 15f, -15f);
//         Point3f corner4 = new Point3f(-15f, 15f, -15f);
//         Point3f corner5 = new Point3f(-15f, -15f, 15f);
//         Point3f corner6 = new Point3f(15f, -15f, 15f);
//         Point3f corner7 = new Point3f(15f, 15f, 15f);
//         Point3f corner8 = new Point3f(-15f, 15f, 15f);
//         
        // colours for walls and floor
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
        Color3f medRed = new Color3f(0.8f, 0.4f, 0.3f);
        Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
        Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
        
        
        Shape3D floor = makeQuad("floor", blue);
        Shape3D back = makeQuad("back", blue);
        Shape3D left = makeQuad("left", blue);
        Shape3D right = makeQuad("right", blue);
        
        objRoot.addChild(floor);
        objRoot.addChild(back);
        objRoot.addChild(left);
        objRoot.addChild(right);
        
        return objRoot;
    } // end of method

    private Shape3D makeQuad(String face, Color3f faceColor) {
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        switch (face) {
            case "floor": qa.setCoordinate(0, corner5);
                qa.setCoordinate(1, corner6);
                qa.setCoordinate(2, corner2);
                qa.setCoordinate(3, corner1);
                break;
            case "ceiling": qa.setCoordinate(0, corner8);
                qa.setCoordinate(1, corner7);
                qa.setCoordinate(2, corner3);
                qa.setCoordinate(3, corner4);
                break;
            case "left": qa.setCoordinate(0, corner5);
                qa.setCoordinate(1, corner8);
                qa.setCoordinate(2, corner4);
                qa.setCoordinate(3, corner1);
                break;
            case "right": qa.setCoordinate(0, corner8);
                qa.setCoordinate(1, corner7);
                qa.setCoordinate(2, corner3);
                qa.setCoordinate(3, corner2);
                break;
            case "front": qa.setCoordinate(0, corner5);
                qa.setCoordinate(1, corner6);
                qa.setCoordinate(2, corner7);
                qa.setCoordinate(3, corner8);
                break;
            case "back": qa.setCoordinate(0, corner1);
                qa.setCoordinate(1, corner2);
                qa.setCoordinate(2, corner3);
                qa.setCoordinate(3, corner4);
                break;
            default: return null;
        }
        
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        return shape;
    }
    
    // convert arraylists to arrays
    private Point3f[] AListToArray(ArrayList in) {
        Point3f[] out = new Point3f[in.size()];
        
        for(int i = 0; i < in.size(); i++) {
            out[i] = (Point3f)in.get(i);
        }
        return out;
    }
    
    private void orbitControls(Canvas3D c)
  /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
  {
    OrbitBehavior orbit = 
        new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
    orbit.setSchedulingBounds(bounds);

    ViewingPlatform vp = su.getViewingPlatform();
    vp.setViewPlatformBehavior(orbit);      
  }  // end of orbitControls()



  private void initUserPosition()
  // Set the user's initial viewpoint using lookAt()
  {
    ViewingPlatform vp = su.getViewingPlatform();
    TransformGroup steerTG = vp.getViewPlatformTransform();

    Transform3D t3d = new Transform3D();
    steerTG.getTransform(t3d);

    // args are: viewer posn, where looking, up direction
    t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
    t3d.invert();

    steerTG.setTransform(t3d);
  }  // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3Dv2(), 256, 256);
//         new MyOwn3Dv2();
    }

}

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				2719578
			</iTime>
			<fName>
				MyOwn3Dv2.java
			</fName>
			<fSize>
				8160.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;



public class MyOwn3Dv2 extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere(new Point3d(0,0,0), 100);   // for environment nodes
    private SimpleUniverse su;
    
    // points for 8 corners of the room
    Point3f corner1 = new Point3f(-15f, -15f, -15f);
    Point3f corner2 = new Point3f(15f, -15f, -15f);
    Point3f corner3 = new Point3f(15f, 15f, -15f);
    Point3f corner4 = new Point3f(-15f, 15f, -15f);
    Point3f corner5 = new Point3f(-15f, -15f, 15f);
    Point3f corner6 = new Point3f(15f, -15f, 15f);
    Point3f corner7 = new Point3f(15f, 15f, 15f);
    Point3f corner8 = new Point3f(-15f, 15f, 15f);
    
    public MyOwn3Dv2() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
//         Point3f a1 = new Point3f(-15f, -15f, -15f);
//         Point3f a2 = new Point3f(15f, -15f, -15f);
//         Point3f a3 = new Point3f(15f, 15f, -15f);
//         Point3f a4 = new Point3f(-15f, 15f, -15f);
//         
//         QuadArray floorCoord = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord.setCoordinate(0, a1);
//         floorCoord.setCoordinate(1, a2);
//         floorCoord.setCoordinate(2, a3);
//         floorCoord.setCoordinate(3, a4);
//         
//         Point3f b1 = new Point3f(-15f, -15f, 15f);
//         Point3f b2 = new Point3f(15f, -15f, 15f);
//         Point3f b3 = new Point3f(15f, 15f, 15f);
//         Point3f b4 = new Point3f(-15f, 15f, 15f);
//         
//         QuadArray floorCoord2 = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord2.setCoordinate(0, b1);
//         floorCoord2.setCoordinate(1, b2);
//         floorCoord2.setCoordinate(2, b3);
//         floorCoord2.setCoordinate(3, b4);
//         
//         Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
//         Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
//         ColoringAttributes greenFloor = new ColoringAttributes(green, 1);
//         ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
// 
//         Appearance fa = new Appearance();
//         Appearance fb = new Appearance();
// 
//         fa.setColoringAttributes(blueFloor);
//         fb.setColoringAttributes(greenFloor);
//         
//         Shape3D fs3d = new Shape3D(floorCoord, fa);
//         Shape3D fs3d2 = new Shape3D(floorCoord2, fb);
        
//         BranchGroup scene = new BranchGroup();
        BranchGroup scene = createSceneGraph();
//         scene.addChild(fs3d);
//         scene.addChild(fs3d2);
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        //su.getViewingPlatform().setNominalViewingTransform();
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor
    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();
        
//         // points for 8 corners of the room
//         Point3f corner1 = new Point3f(-15f, -15f, -15f);
//         Point3f corner2 = new Point3f(15f, -15f, -15f);
//         Point3f corner3 = new Point3f(15f, 15f, -15f);
//         Point3f corner4 = new Point3f(-15f, 15f, -15f);
//         Point3f corner5 = new Point3f(-15f, -15f, 15f);
//         Point3f corner6 = new Point3f(15f, -15f, 15f);
//         Point3f corner7 = new Point3f(15f, 15f, 15f);
//         Point3f corner8 = new Point3f(-15f, 15f, 15f);
//         
        // colours for walls and floor
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
        Color3f medRed = new Color3f(0.8f, 0.4f, 0.3f);
        Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
        Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
        
        
        Shape3D floor = makeQuad("floor", blue);
        Shape3D back = makeQuad("back", green);
        Shape3D left = makeQuad("left", medRed);
        Shape3D right = makeQuad("right", white);
        
        objRoot.addChild(floor);
        objRoot.addChild(back);
        objRoot.addChild(left);
        objRoot.addChild(right);
        
        return objRoot;
    } // end of method

    private Shape3D makeQuad(String face, Color3f faceColor) {
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        switch (face) {
            case "floor": qa.setCoordinate(0, corner5);
                qa.setCoordinate(1, corner6);
                qa.setCoordinate(2, corner2);
                qa.setCoordinate(3, corner1);
                break;
            case "ceiling": qa.setCoordinate(0, corner8);
                qa.setCoordinate(1, corner7);
                qa.setCoordinate(2, corner3);
                qa.setCoordinate(3, corner4);
                break;
            case "left": qa.setCoordinate(0, corner5);
                qa.setCoordinate(1, corner8);
                qa.setCoordinate(2, corner4);
                qa.setCoordinate(3, corner1);
                break;
            case "right": qa.setCoordinate(0, corner8);
                qa.setCoordinate(1, corner7);
                qa.setCoordinate(2, corner3);
                qa.setCoordinate(3, corner2);
                break;
            case "front": qa.setCoordinate(0, corner5);
                qa.setCoordinate(1, corner6);
                qa.setCoordinate(2, corner7);
                qa.setCoordinate(3, corner8);
                break;
            case "back": qa.setCoordinate(0, corner1);
                qa.setCoordinate(1, corner2);
                qa.setCoordinate(2, corner3);
                qa.setCoordinate(3, corner4);
                break;
            default: return null;
        }
        
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        return shape;
    }
    
    // convert arraylists to arrays
    private Point3f[] AListToArray(ArrayList in) {
        Point3f[] out = new Point3f[in.size()];
        
        for(int i = 0; i < in.size(); i++) {
            out[i] = (Point3f)in.get(i);
        }
        return out;
    }
    
    private void orbitControls(Canvas3D c)
  /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
  {
    OrbitBehavior orbit = 
        new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
    orbit.setSchedulingBounds(bounds);

    ViewingPlatform vp = su.getViewingPlatform();
    vp.setViewPlatformBehavior(orbit);      
  }  // end of orbitControls()



  private void initUserPosition()
  // Set the user's initial viewpoint using lookAt()
  {
    ViewingPlatform vp = su.getViewingPlatform();
    TransformGroup steerTG = vp.getViewPlatformTransform();

    Transform3D t3d = new Transform3D();
    steerTG.getTransform(t3d);

    // args are: viewer posn, where looking, up direction
    t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
    t3d.invert();

    steerTG.setTransform(t3d);
  }  // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3Dv2(), 256, 256);
//         new MyOwn3Dv2();
    }

}

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				2805500
			</iTime>
			<fName>
				MyOwn3Dv2.java
			</fName>
			<fSize>
				8160.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;



public class MyOwn3Dv2 extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere(new Point3d(0,0,0), 100);   // for environment nodes
    private SimpleUniverse su;
    
    // points for 8 corners of the room
    Point3f corner1 = new Point3f(-15f, -15f, -15f);
    Point3f corner2 = new Point3f(15f, -15f, -15f);
    Point3f corner3 = new Point3f(15f, 15f, -15f);
    Point3f corner4 = new Point3f(-15f, 15f, -15f);
    Point3f corner5 = new Point3f(-15f, -15f, 15f);
    Point3f corner6 = new Point3f(15f, -15f, 15f);
    Point3f corner7 = new Point3f(15f, 15f, 15f);
    Point3f corner8 = new Point3f(-15f, 15f, 15f);
    
    public MyOwn3Dv2() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
//         Point3f a1 = new Point3f(-15f, -15f, -15f);
//         Point3f a2 = new Point3f(15f, -15f, -15f);
//         Point3f a3 = new Point3f(15f, 15f, -15f);
//         Point3f a4 = new Point3f(-15f, 15f, -15f);
//         
//         QuadArray floorCoord = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord.setCoordinate(0, a1);
//         floorCoord.setCoordinate(1, a2);
//         floorCoord.setCoordinate(2, a3);
//         floorCoord.setCoordinate(3, a4);
//         
//         Point3f b1 = new Point3f(-15f, -15f, 15f);
//         Point3f b2 = new Point3f(15f, -15f, 15f);
//         Point3f b3 = new Point3f(15f, 15f, 15f);
//         Point3f b4 = new Point3f(-15f, 15f, 15f);
//         
//         QuadArray floorCoord2 = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord2.setCoordinate(0, b1);
//         floorCoord2.setCoordinate(1, b2);
//         floorCoord2.setCoordinate(2, b3);
//         floorCoord2.setCoordinate(3, b4);
//         
//         Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
//         Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
//         ColoringAttributes greenFloor = new ColoringAttributes(green, 1);
//         ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
// 
//         Appearance fa = new Appearance();
//         Appearance fb = new Appearance();
// 
//         fa.setColoringAttributes(blueFloor);
//         fb.setColoringAttributes(greenFloor);
//         
//         Shape3D fs3d = new Shape3D(floorCoord, fa);
//         Shape3D fs3d2 = new Shape3D(floorCoord2, fb);
        
//         BranchGroup scene = new BranchGroup();
        BranchGroup scene = createSceneGraph();
//         scene.addChild(fs3d);
//         scene.addChild(fs3d2);
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        //su.getViewingPlatform().setNominalViewingTransform();
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor
    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();
        
//         // points for 8 corners of the room
//         Point3f corner1 = new Point3f(-15f, -15f, -15f);
//         Point3f corner2 = new Point3f(15f, -15f, -15f);
//         Point3f corner3 = new Point3f(15f, 15f, -15f);
//         Point3f corner4 = new Point3f(-15f, 15f, -15f);
//         Point3f corner5 = new Point3f(-15f, -15f, 15f);
//         Point3f corner6 = new Point3f(15f, -15f, 15f);
//         Point3f corner7 = new Point3f(15f, 15f, 15f);
//         Point3f corner8 = new Point3f(-15f, 15f, 15f);
//         
        // colours for walls and floor
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
        Color3f medRed = new Color3f(0.8f, 0.4f, 0.3f);
        Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
        Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
        
        
        Shape3D floor = makeQuad("floor", blue);
        Shape3D back = makeQuad("back", green);
        Shape3D left = makeQuad("left", medRed);
        Shape3D right = makeQuad("right", white);
        
        objRoot.addChild(floor);
        objRoot.addChild(back);
        objRoot.addChild(left);
        objRoot.addChild(right);
        
        return objRoot;
    } // end of method

    private Shape3D makeQuad(String face, Color3f faceColor) {
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        switch (face) {
            case "floor": qa.setCoordinate(0, corner5);
                qa.setCoordinate(1, corner6);
                qa.setCoordinate(2, corner2);
                qa.setCoordinate(3, corner1);
                break;
            case "ceiling": qa.setCoordinate(0, corner8);
                qa.setCoordinate(1, corner7);
                qa.setCoordinate(2, corner3);
                qa.setCoordinate(3, corner4);
                break;
            case "left": qa.setCoordinate(0, corner5);
                qa.setCoordinate(1, corner8);
                qa.setCoordinate(2, corner4);
                qa.setCoordinate(3, corner1);
                break;
            case "right": qa.setCoordinate(0, corner6);
                qa.setCoordinate(1, corner7);
                qa.setCoordinate(2, corner3);
                qa.setCoordinate(3, corner2);
                break;
            case "front": qa.setCoordinate(0, corner5);
                qa.setCoordinate(1, corner6);
                qa.setCoordinate(2, corner7);
                qa.setCoordinate(3, corner8);
                break;
            case "back": qa.setCoordinate(0, corner1);
                qa.setCoordinate(1, corner2);
                qa.setCoordinate(2, corner3);
                qa.setCoordinate(3, corner4);
                break;
            default: return null;
        }
        
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        return shape;
    }
    
    // convert arraylists to arrays
    private Point3f[] AListToArray(ArrayList in) {
        Point3f[] out = new Point3f[in.size()];
        
        for(int i = 0; i < in.size(); i++) {
            out[i] = (Point3f)in.get(i);
        }
        return out;
    }
    
    private void orbitControls(Canvas3D c)
  /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
  {
    OrbitBehavior orbit = 
        new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
    orbit.setSchedulingBounds(bounds);

    ViewingPlatform vp = su.getViewingPlatform();
    vp.setViewPlatformBehavior(orbit);      
  }  // end of orbitControls()



  private void initUserPosition()
  // Set the user's initial viewpoint using lookAt()
  {
    ViewingPlatform vp = su.getViewingPlatform();
    TransformGroup steerTG = vp.getViewPlatformTransform();

    Transform3D t3d = new Transform3D();
    steerTG.getTransform(t3d);

    // args are: viewer posn, where looking, up direction
    t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
    t3d.invert();

    steerTG.setTransform(t3d);
  }  // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3Dv2(), 256, 256);
//         new MyOwn3Dv2();
    }

}

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				2874859
			</iTime>
			<fName>
				MyOwn3Dv2.java
			</fName>
			<fSize>
				8161.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;



public class MyOwn3Dv2 extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere(new Point3d(0,0,0), 1000);   // for environment nodes
    private SimpleUniverse su;
    
    // points for 8 corners of the room
    Point3f corner1 = new Point3f(-15f, -15f, -15f);
    Point3f corner2 = new Point3f(15f, -15f, -15f);
    Point3f corner3 = new Point3f(15f, 15f, -15f);
    Point3f corner4 = new Point3f(-15f, 15f, -15f);
    Point3f corner5 = new Point3f(-15f, -15f, 15f);
    Point3f corner6 = new Point3f(15f, -15f, 15f);
    Point3f corner7 = new Point3f(15f, 15f, 15f);
    Point3f corner8 = new Point3f(-15f, 15f, 15f);
    
    public MyOwn3Dv2() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
//         Point3f a1 = new Point3f(-15f, -15f, -15f);
//         Point3f a2 = new Point3f(15f, -15f, -15f);
//         Point3f a3 = new Point3f(15f, 15f, -15f);
//         Point3f a4 = new Point3f(-15f, 15f, -15f);
//         
//         QuadArray floorCoord = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord.setCoordinate(0, a1);
//         floorCoord.setCoordinate(1, a2);
//         floorCoord.setCoordinate(2, a3);
//         floorCoord.setCoordinate(3, a4);
//         
//         Point3f b1 = new Point3f(-15f, -15f, 15f);
//         Point3f b2 = new Point3f(15f, -15f, 15f);
//         Point3f b3 = new Point3f(15f, 15f, 15f);
//         Point3f b4 = new Point3f(-15f, 15f, 15f);
//         
//         QuadArray floorCoord2 = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord2.setCoordinate(0, b1);
//         floorCoord2.setCoordinate(1, b2);
//         floorCoord2.setCoordinate(2, b3);
//         floorCoord2.setCoordinate(3, b4);
//         
//         Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
//         Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
//         ColoringAttributes greenFloor = new ColoringAttributes(green, 1);
//         ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
// 
//         Appearance fa = new Appearance();
//         Appearance fb = new Appearance();
// 
//         fa.setColoringAttributes(blueFloor);
//         fb.setColoringAttributes(greenFloor);
//         
//         Shape3D fs3d = new Shape3D(floorCoord, fa);
//         Shape3D fs3d2 = new Shape3D(floorCoord2, fb);
        
//         BranchGroup scene = new BranchGroup();
        BranchGroup scene = createSceneGraph();
//         scene.addChild(fs3d);
//         scene.addChild(fs3d2);
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        //su.getViewingPlatform().setNominalViewingTransform();
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor
    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();
        
//         // points for 8 corners of the room
//         Point3f corner1 = new Point3f(-15f, -15f, -15f);
//         Point3f corner2 = new Point3f(15f, -15f, -15f);
//         Point3f corner3 = new Point3f(15f, 15f, -15f);
//         Point3f corner4 = new Point3f(-15f, 15f, -15f);
//         Point3f corner5 = new Point3f(-15f, -15f, 15f);
//         Point3f corner6 = new Point3f(15f, -15f, 15f);
//         Point3f corner7 = new Point3f(15f, 15f, 15f);
//         Point3f corner8 = new Point3f(-15f, 15f, 15f);
//         
        // colours for walls and floor
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
        Color3f medRed = new Color3f(0.8f, 0.4f, 0.3f);
        Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
        Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
        
        
        Shape3D floor = makeQuad("floor", blue);
        Shape3D back = makeQuad("back", green);
        Shape3D left = makeQuad("left", medRed);
        Shape3D right = makeQuad("right", white);
        
        objRoot.addChild(floor);
        objRoot.addChild(back);
        objRoot.addChild(left);
        objRoot.addChild(right);
        
        return objRoot;
    } // end of method

    private Shape3D makeQuad(String face, Color3f faceColor) {
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        switch (face) {
            case "floor": qa.setCoordinate(0, corner5);
                qa.setCoordinate(1, corner6);
                qa.setCoordinate(2, corner2);
                qa.setCoordinate(3, corner1);
                break;
            case "ceiling": qa.setCoordinate(0, corner8);
                qa.setCoordinate(1, corner7);
                qa.setCoordinate(2, corner3);
                qa.setCoordinate(3, corner4);
                break;
            case "left": qa.setCoordinate(0, corner5);
                qa.setCoordinate(1, corner8);
                qa.setCoordinate(2, corner4);
                qa.setCoordinate(3, corner1);
                break;
            case "right": qa.setCoordinate(0, corner6);
                qa.setCoordinate(1, corner7);
                qa.setCoordinate(2, corner3);
                qa.setCoordinate(3, corner2);
                break;
            case "front": qa.setCoordinate(0, corner5);
                qa.setCoordinate(1, corner6);
                qa.setCoordinate(2, corner7);
                qa.setCoordinate(3, corner8);
                break;
            case "back": qa.setCoordinate(0, corner1);
                qa.setCoordinate(1, corner2);
                qa.setCoordinate(2, corner3);
                qa.setCoordinate(3, corner4);
                break;
            default: return null;
        }
        
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        return shape;
    }
    
    // convert arraylists to arrays
    private Point3f[] AListToArray(ArrayList in) {
        Point3f[] out = new Point3f[in.size()];
        
        for(int i = 0; i < in.size(); i++) {
            out[i] = (Point3f)in.get(i);
        }
        return out;
    }
    
    private void orbitControls(Canvas3D c)
  /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
  {
    OrbitBehavior orbit = 
        new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
    orbit.setSchedulingBounds(bounds);

    ViewingPlatform vp = su.getViewingPlatform();
    vp.setViewPlatformBehavior(orbit);      
  }  // end of orbitControls()



  private void initUserPosition()
  // Set the user's initial viewpoint using lookAt()
  {
    ViewingPlatform vp = su.getViewingPlatform();
    TransformGroup steerTG = vp.getViewPlatformTransform();

    Transform3D t3d = new Transform3D();
    steerTG.getTransform(t3d);

    // args are: viewer posn, where looking, up direction
    t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
    t3d.invert();

    steerTG.setTransform(t3d);
  }  // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3Dv2(), 256, 256);
//         new MyOwn3Dv2();
    }

}

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				4972312
			</iTime>
			<fName>
				MyOwn3Dv2.java
			</fName>
			<fSize>
				10307.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;



public class MyOwn3Dv2 extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere(new Point3d(0,0,0), 5000);   // for environment nodes
    private SimpleUniverse su;
    
    // points for 8 corners of the room
    Point3f corner1 = new Point3f(-15f, -15f, -15f);
    Point3f corner2 = new Point3f(15f, -15f, -15f);
    Point3f corner3 = new Point3f(15f, 15f, -15f);
    Point3f corner4 = new Point3f(-15f, 15f, -15f);
    Point3f corner5 = new Point3f(-15f, -15f, 15f);
    Point3f corner6 = new Point3f(15f, -15f, 15f);
    Point3f corner7 = new Point3f(15f, 15f, 15f);
    Point3f corner8 = new Point3f(-15f, 15f, 15f);
    
    public MyOwn3Dv2() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
//         Point3f a1 = new Point3f(-15f, -15f, -15f);
//         Point3f a2 = new Point3f(15f, -15f, -15f);
//         Point3f a3 = new Point3f(15f, 15f, -15f);
//         Point3f a4 = new Point3f(-15f, 15f, -15f);
//         
//         QuadArray floorCoord = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord.setCoordinate(0, a1);
//         floorCoord.setCoordinate(1, a2);
//         floorCoord.setCoordinate(2, a3);
//         floorCoord.setCoordinate(3, a4);
//         
//         Point3f b1 = new Point3f(-15f, -15f, 15f);
//         Point3f b2 = new Point3f(15f, -15f, 15f);
//         Point3f b3 = new Point3f(15f, 15f, 15f);
//         Point3f b4 = new Point3f(-15f, 15f, 15f);
//         
//         QuadArray floorCoord2 = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord2.setCoordinate(0, b1);
//         floorCoord2.setCoordinate(1, b2);
//         floorCoord2.setCoordinate(2, b3);
//         floorCoord2.setCoordinate(3, b4);
//         
//         Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
//         Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
//         ColoringAttributes greenFloor = new ColoringAttributes(green, 1);
//         ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
// 
//         Appearance fa = new Appearance();
//         Appearance fb = new Appearance();
// 
//         fa.setColoringAttributes(blueFloor);
//         fb.setColoringAttributes(greenFloor);
//         
//         Shape3D fs3d = new Shape3D(floorCoord, fa);
//         Shape3D fs3d2 = new Shape3D(floorCoord2, fb);
        
//         BranchGroup scene = new BranchGroup();
        BranchGroup scene = createSceneGraph();
//         scene.addChild(fs3d);
//         scene.addChild(fs3d2);
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        //su.getViewingPlatform().setNominalViewingTransform();
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor
    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();
        
//         // points for 8 corners of the room
//         Point3f corner1 = new Point3f(-15f, -15f, -15f);
//         Point3f corner2 = new Point3f(15f, -15f, -15f);
//         Point3f corner3 = new Point3f(15f, 15f, -15f);
//         Point3f corner4 = new Point3f(-15f, 15f, -15f);
//         Point3f corner5 = new Point3f(-15f, -15f, 15f);
//         Point3f corner6 = new Point3f(15f, -15f, 15f);
//         Point3f corner7 = new Point3f(15f, 15f, 15f);
//         Point3f corner8 = new Point3f(-15f, 15f, 15f);
//         
        // colours for walls and floor
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
        Color3f medRed = new Color3f(0.8f, 0.4f, 0.3f);
        Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
        Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
        
        
        TransformGroup floor = makeQuad("floor", blue);
        TransformGroup back = makeQuad("back", green);
        TransformGroup left = makeQuad("left", medRed);
        TransformGroup right = makeQuad("right", white);
        
        objRoot.addChild(floor);
        objRoot.addChild(back);
        objRoot.addChild(left);
        objRoot.addChild(right);
        
        return objRoot;
    } // end of method

    private Shape3D makeQuad(String face, Color3f faceColor) {
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        qa.setCoordinate(0, corner5);
        qa.setCoordinate(1, corner6);
        qa.setCoordinate(2, corner2);
        qa.setCoordinate(3, corner1);
        
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.setTranslation(new Vector3f(0f, 15f, 0f));
                t3d.rotX(Math.PI);
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on x-axis
                break;
            case "left": t3d.setTranslation(new Vector3f(-15f, 0f, 0f));
                t3d.rotZ(Math.PI/2);
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on y-axis
                break;
            case "right": t3d.setTranslation(new Vector3f(15f, 0f, 0f));
                t3d.rotZ(-Math.PI/2);
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.setTranslation(new Vector3f(0f, 0f, 15f));
                t3d.rotX(Math.PI/2);
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.setTranslation(new Vector3f(0f, 0f, -15f));
                t3d.rotZ(-Math.PI/2);
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
//         
//         switch (face) {
//             case "floor": qa.setCoordinate(0, corner5);
//                 qa.setCoordinate(1, corner6);
//                 qa.setCoordinate(2, corner2);
//                 qa.setCoordinate(3, corner1);
//                 break;
//             case "ceiling": qa.setCoordinate(0, corner8);
//                 qa.setCoordinate(1, corner7);
//                 qa.setCoordinate(2, corner3);
//                 qa.setCoordinate(3, corner4);
//                 // transform 180 on x-axis
//                 break;
//             case "left": qa.setCoordinate(0, corner5);
//                 qa.setCoordinate(1, corner8);
//                 qa.setCoordinate(2, corner4);
//                 qa.setCoordinate(3, corner1);
//                 // transform 180 on y-axis
//                 break;
//             case "right": qa.setCoordinate(0, corner6);
//                 qa.setCoordinate(1, corner7);
//                 qa.setCoordinate(2, corner3);
//                 qa.setCoordinate(3, corner2);
//                 break;
//             case "front": qa.setCoordinate(0, corner5);
//                 qa.setCoordinate(1, corner6);
//                 qa.setCoordinate(2, corner7);
//                 qa.setCoordinate(3, corner8);
//                 break;
//             case "back": qa.setCoordinate(0, corner1);
//                 qa.setCoordinate(1, corner2);
//                 qa.setCoordinate(2, corner3);
//                 qa.setCoordinate(3, corner4);
//                 break;
//             default: return null;
//         }
        
//         ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
//         Appearance appear = new Appearance();
//         appear.setColoringAttributes(ca);
//         Shape3D shape = new Shape3D(qa, appear);
//         return shape;
        return tg;
    }
    
    // convert arraylists to arrays
    private Point3f[] AListToArray(ArrayList in) {
        Point3f[] out = new Point3f[in.size()];
        
        for(int i = 0; i < in.size(); i++) {
            out[i] = (Point3f)in.get(i);
        }
        return out;
    }
    
    private void orbitControls(Canvas3D c)
  /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
  {
    OrbitBehavior orbit = 
        new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
    orbit.setSchedulingBounds(bounds);

    ViewingPlatform vp = su.getViewingPlatform();
    vp.setViewPlatformBehavior(orbit);      
  }  // end of orbitControls()



  private void initUserPosition()
  // Set the user's initial viewpoint using lookAt()
  {
    ViewingPlatform vp = su.getViewingPlatform();
    TransformGroup steerTG = vp.getViewPlatformTransform();

    Transform3D t3d = new Transform3D();
    steerTG.getTransform(t3d);

    // args are: viewer posn, where looking, up direction
    t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
    t3d.invert();

    steerTG.setTransform(t3d);
  }  // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3Dv2(), 256, 256);
//         new MyOwn3Dv2();
    }

}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				244
			<iErrLine>
			<iErrMessage>
				illegal start of expression
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				244
			<iErrLine>
			<iErrMessage>
				';' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				244
			<iErrLine>
			<iErrMessage>
				';' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				253
			<iErrLine>
			<iErrMessage>
				illegal start of expression
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				253
			<iErrLine>
			<iErrMessage>
				illegal start of expression
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				253
			<iErrLine>
			<iErrMessage>
				';' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				253
			<iErrLine>
			<iErrMessage>
				';' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				267
			<iErrLine>
			<iErrMessage>
				illegal start of expression
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				267
			<iErrLine>
			<iErrMessage>
				illegal start of expression
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				267
			<iErrLine>
			<iErrMessage>
				';' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				283
			<iErrLine>
			<iErrMessage>
				illegal start of expression
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				283
			<iErrLine>
			<iErrMessage>
				illegal start of expression
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				283
			<iErrLine>
			<iErrMessage>
				';' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				283
			<iErrLine>
			<iErrMessage>
				')' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				283
			<iErrLine>
			<iErrMessage>
				illegal start of expression
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				283
			<iErrLine>
			<iErrMessage>
				';' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				283
			<iErrLine>
			<iErrMessage>
				illegal start of expression
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				283
			<iErrLine>
			<iErrMessage>
				';' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				5010281
			</iTime>
			<fName>
				MyOwn3Dv2.java
			</fName>
			<fSize>
				10317.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;



public class MyOwn3Dv2 extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere(new Point3d(0,0,0), 5000);   // for environment nodes
    private SimpleUniverse su;
    
    // points for 8 corners of the room
    Point3f corner1 = new Point3f(-15f, -15f, -15f);
    Point3f corner2 = new Point3f(15f, -15f, -15f);
    Point3f corner3 = new Point3f(15f, 15f, -15f);
    Point3f corner4 = new Point3f(-15f, 15f, -15f);
    Point3f corner5 = new Point3f(-15f, -15f, 15f);
    Point3f corner6 = new Point3f(15f, -15f, 15f);
    Point3f corner7 = new Point3f(15f, 15f, 15f);
    Point3f corner8 = new Point3f(-15f, 15f, 15f);
    
    public MyOwn3Dv2() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
//         Point3f a1 = new Point3f(-15f, -15f, -15f);
//         Point3f a2 = new Point3f(15f, -15f, -15f);
//         Point3f a3 = new Point3f(15f, 15f, -15f);
//         Point3f a4 = new Point3f(-15f, 15f, -15f);
//         
//         QuadArray floorCoord = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord.setCoordinate(0, a1);
//         floorCoord.setCoordinate(1, a2);
//         floorCoord.setCoordinate(2, a3);
//         floorCoord.setCoordinate(3, a4);
//         
//         Point3f b1 = new Point3f(-15f, -15f, 15f);
//         Point3f b2 = new Point3f(15f, -15f, 15f);
//         Point3f b3 = new Point3f(15f, 15f, 15f);
//         Point3f b4 = new Point3f(-15f, 15f, 15f);
//         
//         QuadArray floorCoord2 = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord2.setCoordinate(0, b1);
//         floorCoord2.setCoordinate(1, b2);
//         floorCoord2.setCoordinate(2, b3);
//         floorCoord2.setCoordinate(3, b4);
//         
//         Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
//         Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
//         ColoringAttributes greenFloor = new ColoringAttributes(green, 1);
//         ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
// 
//         Appearance fa = new Appearance();
//         Appearance fb = new Appearance();
// 
//         fa.setColoringAttributes(blueFloor);
//         fb.setColoringAttributes(greenFloor);
//         
//         Shape3D fs3d = new Shape3D(floorCoord, fa);
//         Shape3D fs3d2 = new Shape3D(floorCoord2, fb);
        
//         BranchGroup scene = new BranchGroup();
        BranchGroup scene = createSceneGraph();
//         scene.addChild(fs3d);
//         scene.addChild(fs3d2);
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        //su.getViewingPlatform().setNominalViewingTransform();
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor
    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();
        
//         // points for 8 corners of the room
//         Point3f corner1 = new Point3f(-15f, -15f, -15f);
//         Point3f corner2 = new Point3f(15f, -15f, -15f);
//         Point3f corner3 = new Point3f(15f, 15f, -15f);
//         Point3f corner4 = new Point3f(-15f, 15f, -15f);
//         Point3f corner5 = new Point3f(-15f, -15f, 15f);
//         Point3f corner6 = new Point3f(15f, -15f, 15f);
//         Point3f corner7 = new Point3f(15f, 15f, 15f);
//         Point3f corner8 = new Point3f(-15f, 15f, 15f);
//         
        // colours for walls and floor
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
        Color3f medRed = new Color3f(0.8f, 0.4f, 0.3f);
        Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
        Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
        
        
        TransformGroup floor = makeQuad("floor", blue);
        TransformGroup back = makeQuad("back", green);
        TransformGroup left = makeQuad("left", medRed);
        TransformGroup right = makeQuad("right", white);
        
        objRoot.addChild(floor);
        objRoot.addChild(back);
        objRoot.addChild(left);
        objRoot.addChild(right);
        
        return objRoot;
    } // end of method

    private Shape3D makeQuad(String face, Color3f faceColor) {
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        qa.setCoordinate(0, corner5);
        qa.setCoordinate(1, corner6);
        qa.setCoordinate(2, corner2);
        qa.setCoordinate(3, corner1);
        
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.setTranslation(new Vector3f(0f, 15f, 0f));
                t3d.rotX(Math.PI);
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on x-axis
                break;
            case "left": t3d.setTranslation(new Vector3f(-15f, 0f, 0f));
                t3d.rotZ(Math.PI/2);
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on y-axis
                break;
            case "right": t3d.setTranslation(new Vector3f(15f, 0f, 0f));
                t3d.rotZ(-Math.PI/2);
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.setTranslation(new Vector3f(0f, 0f, 15f));
                t3d.rotX(Math.PI/2);
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.setTranslation(new Vector3f(0f, 0f, -15f));
                t3d.rotZ(-Math.PI/2);
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
//         
//         switch (face) {
//             case "floor": qa.setCoordinate(0, corner5);
//                 qa.setCoordinate(1, corner6);
//                 qa.setCoordinate(2, corner2);
//                 qa.setCoordinate(3, corner1);
//                 break;
//             case "ceiling": qa.setCoordinate(0, corner8);
//                 qa.setCoordinate(1, corner7);
//                 qa.setCoordinate(2, corner3);
//                 qa.setCoordinate(3, corner4);
//                 // transform 180 on x-axis
//                 break;
//             case "left": qa.setCoordinate(0, corner5);
//                 qa.setCoordinate(1, corner8);
//                 qa.setCoordinate(2, corner4);
//                 qa.setCoordinate(3, corner1);
//                 // transform 180 on y-axis
//                 break;
//             case "right": qa.setCoordinate(0, corner6);
//                 qa.setCoordinate(1, corner7);
//                 qa.setCoordinate(2, corner3);
//                 qa.setCoordinate(3, corner2);
//                 break;
//             case "front": qa.setCoordinate(0, corner5);
//                 qa.setCoordinate(1, corner6);
//                 qa.setCoordinate(2, corner7);
//                 qa.setCoordinate(3, corner8);
//                 break;
//             case "back": qa.setCoordinate(0, corner1);
//                 qa.setCoordinate(1, corner2);
//                 qa.setCoordinate(2, corner3);
//                 qa.setCoordinate(3, corner4);
//                 break;
//             default: return null;
//         }
        
//         ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
//         Appearance appear = new Appearance();
//         appear.setColoringAttributes(ca);
//         Shape3D shape = new Shape3D(qa, appear);
//         return shape;
        return tg;
    }
    
    // convert arraylists to arrays
    private Point3f[] AListToArray(ArrayList in) {
        Point3f[] out = new Point3f[in.size()];
        
        for(int i = 0; i < in.size(); i++) {
            out[i] = (Point3f)in.get(i);
        }
        return out;
    }
    
    private void orbitControls(Canvas3D c)
  /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
  {
    OrbitBehavior orbit = 
        new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
    orbit.setSchedulingBounds(bounds);

    ViewingPlatform vp = su.getViewingPlatform();
    vp.setViewPlatformBehavior(orbit);      
  }  // end of orbitControls()



  private void initUserPosition()
  // Set the user's initial viewpoint using lookAt()
  {
    ViewingPlatform vp = su.getViewingPlatform();
    TransformGroup steerTG = vp.getViewPlatformTransform();

    Transform3D t3d = new Transform3D();
    steerTG.getTransform(t3d);

    // args are: viewer posn, where looking, up direction
    t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
    t3d.invert();

    steerTG.setTransform(t3d);
  }  // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3Dv2(), 256, 256);
//         new MyOwn3Dv2();
    }

}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				136
			<iErrLine>
			<iErrMessage>
				incompatible types
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				137
			<iErrLine>
			<iErrMessage>
				incompatible types
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				138
			<iErrLine>
			<iErrMessage>
				incompatible types
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				139
			<iErrLine>
			<iErrMessage>
				incompatible types
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				241
			<iErrLine>
			<iErrMessage>
				incompatible types
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				5025797
			</iTime>
			<fName>
				MyOwn3Dv2.java
			</fName>
			<fSize>
				10324.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;



public class MyOwn3Dv2 extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere(new Point3d(0,0,0), 5000);   // for environment nodes
    private SimpleUniverse su;
    
    // points for 8 corners of the room
    Point3f corner1 = new Point3f(-15f, -15f, -15f);
    Point3f corner2 = new Point3f(15f, -15f, -15f);
    Point3f corner3 = new Point3f(15f, 15f, -15f);
    Point3f corner4 = new Point3f(-15f, 15f, -15f);
    Point3f corner5 = new Point3f(-15f, -15f, 15f);
    Point3f corner6 = new Point3f(15f, -15f, 15f);
    Point3f corner7 = new Point3f(15f, 15f, 15f);
    Point3f corner8 = new Point3f(-15f, 15f, 15f);
    
    public MyOwn3Dv2() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
//         Point3f a1 = new Point3f(-15f, -15f, -15f);
//         Point3f a2 = new Point3f(15f, -15f, -15f);
//         Point3f a3 = new Point3f(15f, 15f, -15f);
//         Point3f a4 = new Point3f(-15f, 15f, -15f);
//         
//         QuadArray floorCoord = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord.setCoordinate(0, a1);
//         floorCoord.setCoordinate(1, a2);
//         floorCoord.setCoordinate(2, a3);
//         floorCoord.setCoordinate(3, a4);
//         
//         Point3f b1 = new Point3f(-15f, -15f, 15f);
//         Point3f b2 = new Point3f(15f, -15f, 15f);
//         Point3f b3 = new Point3f(15f, 15f, 15f);
//         Point3f b4 = new Point3f(-15f, 15f, 15f);
//         
//         QuadArray floorCoord2 = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord2.setCoordinate(0, b1);
//         floorCoord2.setCoordinate(1, b2);
//         floorCoord2.setCoordinate(2, b3);
//         floorCoord2.setCoordinate(3, b4);
//         
//         Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
//         Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
//         ColoringAttributes greenFloor = new ColoringAttributes(green, 1);
//         ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
// 
//         Appearance fa = new Appearance();
//         Appearance fb = new Appearance();
// 
//         fa.setColoringAttributes(blueFloor);
//         fb.setColoringAttributes(greenFloor);
//         
//         Shape3D fs3d = new Shape3D(floorCoord, fa);
//         Shape3D fs3d2 = new Shape3D(floorCoord2, fb);
        
//         BranchGroup scene = new BranchGroup();
        BranchGroup scene = createSceneGraph();
//         scene.addChild(fs3d);
//         scene.addChild(fs3d2);
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        //su.getViewingPlatform().setNominalViewingTransform();
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor
    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();
        
//         // points for 8 corners of the room
//         Point3f corner1 = new Point3f(-15f, -15f, -15f);
//         Point3f corner2 = new Point3f(15f, -15f, -15f);
//         Point3f corner3 = new Point3f(15f, 15f, -15f);
//         Point3f corner4 = new Point3f(-15f, 15f, -15f);
//         Point3f corner5 = new Point3f(-15f, -15f, 15f);
//         Point3f corner6 = new Point3f(15f, -15f, 15f);
//         Point3f corner7 = new Point3f(15f, 15f, 15f);
//         Point3f corner8 = new Point3f(-15f, 15f, 15f);
//         
        // colours for walls and floor
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
        Color3f medRed = new Color3f(0.8f, 0.4f, 0.3f);
        Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
        Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
        
        
        TransformGroup floor = makeQuad("floor", blue);
        TransformGroup back = makeQuad("back", green);
        TransformGroup left = makeQuad("left", medRed);
        TransformGroup right = makeQuad("right", white);
        
        objRoot.addChild(floor);
        objRoot.addChild(back);
        objRoot.addChild(left);
        objRoot.addChild(right);
        
        return objRoot;
    } // end of method

    private TransformGroup makeQuad(String face, Color3f faceColor) {
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        qa.setCoordinate(0, corner5);
        qa.setCoordinate(1, corner6);
        qa.setCoordinate(2, corner2);
        qa.setCoordinate(3, corner1);
        
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.setTranslation(new Vector3f(0f, 15f, 0f));
                t3d.rotX(Math.PI);
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on x-axis
                break;
            case "left": t3d.setTranslation(new Vector3f(-15f, 0f, 0f));
                t3d.rotZ(Math.PI/2);
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on y-axis
                break;
            case "right": t3d.setTranslation(new Vector3f(15f, 0f, 0f));
                t3d.rotZ(-Math.PI/2);
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.setTranslation(new Vector3f(0f, 0f, 15f));
                t3d.rotX(Math.PI/2);
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.setTranslation(new Vector3f(0f, 0f, -15f));
                t3d.rotZ(-Math.PI/2);
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
//         
//         switch (face) {
//             case "floor": qa.setCoordinate(0, corner5);
//                 qa.setCoordinate(1, corner6);
//                 qa.setCoordinate(2, corner2);
//                 qa.setCoordinate(3, corner1);
//                 break;
//             case "ceiling": qa.setCoordinate(0, corner8);
//                 qa.setCoordinate(1, corner7);
//                 qa.setCoordinate(2, corner3);
//                 qa.setCoordinate(3, corner4);
//                 // transform 180 on x-axis
//                 break;
//             case "left": qa.setCoordinate(0, corner5);
//                 qa.setCoordinate(1, corner8);
//                 qa.setCoordinate(2, corner4);
//                 qa.setCoordinate(3, corner1);
//                 // transform 180 on y-axis
//                 break;
//             case "right": qa.setCoordinate(0, corner6);
//                 qa.setCoordinate(1, corner7);
//                 qa.setCoordinate(2, corner3);
//                 qa.setCoordinate(3, corner2);
//                 break;
//             case "front": qa.setCoordinate(0, corner5);
//                 qa.setCoordinate(1, corner6);
//                 qa.setCoordinate(2, corner7);
//                 qa.setCoordinate(3, corner8);
//                 break;
//             case "back": qa.setCoordinate(0, corner1);
//                 qa.setCoordinate(1, corner2);
//                 qa.setCoordinate(2, corner3);
//                 qa.setCoordinate(3, corner4);
//                 break;
//             default: return null;
//         }
        
//         ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
//         Appearance appear = new Appearance();
//         appear.setColoringAttributes(ca);
//         Shape3D shape = new Shape3D(qa, appear);
//         return shape;
        return tg;
    }
    
    // convert arraylists to arrays
    private Point3f[] AListToArray(ArrayList in) {
        Point3f[] out = new Point3f[in.size()];
        
        for(int i = 0; i < in.size(); i++) {
            out[i] = (Point3f)in.get(i);
        }
        return out;
    }
    
    private void orbitControls(Canvas3D c)
  /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
  {
    OrbitBehavior orbit = 
        new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
    orbit.setSchedulingBounds(bounds);

    ViewingPlatform vp = su.getViewingPlatform();
    vp.setViewPlatformBehavior(orbit);      
  }  // end of orbitControls()



  private void initUserPosition()
  // Set the user's initial viewpoint using lookAt()
  {
    ViewingPlatform vp = su.getViewingPlatform();
    TransformGroup steerTG = vp.getViewPlatformTransform();

    Transform3D t3d = new Transform3D();
    steerTG.getTransform(t3d);

    // args are: viewer posn, where looking, up direction
    t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
    t3d.invert();

    steerTG.setTransform(t3d);
  }  // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3Dv2(), 256, 256);
//         new MyOwn3Dv2();
    }

}

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				5153687
			</iTime>
			<fName>
				MyOwn3Dv2.java
			</fName>
			<fSize>
				10313.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;



public class MyOwn3Dv2 extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere(new Point3d(0,0,0), 10000);   // for environment nodes
    private SimpleUniverse su;
    
    // points for 8 corners of the room
    Point3f corner1 = new Point3f(-15f, 0f, -15f);
    Point3f corner2 = new Point3f(15f, 0f, -15f);
    Point3f corner3 = new Point3f(15f, 0f, -15f);
    Point3f corner4 = new Point3f(-15f, 0f, -15f);
    Point3f corner5 = new Point3f(-15f, 0f, 15f);
    Point3f corner6 = new Point3f(15f, 0f, 15f);
    Point3f corner7 = new Point3f(15f, 0f, 15f);
    Point3f corner8 = new Point3f(-15f, 0f, 15f);
    
    public MyOwn3Dv2() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
//         Point3f a1 = new Point3f(-15f, -15f, -15f);
//         Point3f a2 = new Point3f(15f, -15f, -15f);
//         Point3f a3 = new Point3f(15f, 15f, -15f);
//         Point3f a4 = new Point3f(-15f, 15f, -15f);
//         
//         QuadArray floorCoord = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord.setCoordinate(0, a1);
//         floorCoord.setCoordinate(1, a2);
//         floorCoord.setCoordinate(2, a3);
//         floorCoord.setCoordinate(3, a4);
//         
//         Point3f b1 = new Point3f(-15f, -15f, 15f);
//         Point3f b2 = new Point3f(15f, -15f, 15f);
//         Point3f b3 = new Point3f(15f, 15f, 15f);
//         Point3f b4 = new Point3f(-15f, 15f, 15f);
//         
//         QuadArray floorCoord2 = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord2.setCoordinate(0, b1);
//         floorCoord2.setCoordinate(1, b2);
//         floorCoord2.setCoordinate(2, b3);
//         floorCoord2.setCoordinate(3, b4);
//         
//         Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
//         Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
//         ColoringAttributes greenFloor = new ColoringAttributes(green, 1);
//         ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
// 
//         Appearance fa = new Appearance();
//         Appearance fb = new Appearance();
// 
//         fa.setColoringAttributes(blueFloor);
//         fb.setColoringAttributes(greenFloor);
//         
//         Shape3D fs3d = new Shape3D(floorCoord, fa);
//         Shape3D fs3d2 = new Shape3D(floorCoord2, fb);
        
//         BranchGroup scene = new BranchGroup();
        BranchGroup scene = createSceneGraph();
//         scene.addChild(fs3d);
//         scene.addChild(fs3d2);
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        //su.getViewingPlatform().setNominalViewingTransform();
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor
    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();
        
//         // points for 8 corners of the room
//         Point3f corner1 = new Point3f(-15f, -15f, -15f);
//         Point3f corner2 = new Point3f(15f, -15f, -15f);
//         Point3f corner3 = new Point3f(15f, 15f, -15f);
//         Point3f corner4 = new Point3f(-15f, 15f, -15f);
//         Point3f corner5 = new Point3f(-15f, -15f, 15f);
//         Point3f corner6 = new Point3f(15f, -15f, 15f);
//         Point3f corner7 = new Point3f(15f, 15f, 15f);
//         Point3f corner8 = new Point3f(-15f, 15f, 15f);
//         
        // colours for walls and floor
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
        Color3f medRed = new Color3f(0.8f, 0.4f, 0.3f);
        Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
        Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
        
        
        TransformGroup floor = makeQuad("floor", blue);
        TransformGroup back = makeQuad("back", green);
        TransformGroup left = makeQuad("left", medRed);
        TransformGroup right = makeQuad("right", white);
        
        objRoot.addChild(floor);
        objRoot.addChild(back);
        objRoot.addChild(left);
        objRoot.addChild(right);
        
        return objRoot;
    } // end of method

    private TransformGroup makeQuad(String face, Color3f faceColor) {
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        qa.setCoordinate(0, corner5);
        qa.setCoordinate(1, corner6);
        qa.setCoordinate(2, corner2);
        qa.setCoordinate(3, corner1);
        
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.setTranslation(new Vector3f(0f, 15f, 0f));
                t3d.rotX(Math.PI);
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on x-axis
                break;
            case "left": t3d.setTranslation(new Vector3f(-15f, 0f, 0f));
                t3d.rotZ(Math.PI/2);
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on y-axis
                break;
            case "right": t3d.setTranslation(new Vector3f(15f, 0f, 0f));
                t3d.rotZ(-Math.PI/2);
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.setTranslation(new Vector3f(0f, 0f, 15f));
                t3d.rotX(Math.PI/2);
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.setTranslation(new Vector3f(0f, 0f, -15f));
                t3d.rotZ(-Math.PI/2);
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
//         
//         switch (face) {
//             case "floor": qa.setCoordinate(0, corner5);
//                 qa.setCoordinate(1, corner6);
//                 qa.setCoordinate(2, corner2);
//                 qa.setCoordinate(3, corner1);
//                 break;
//             case "ceiling": qa.setCoordinate(0, corner8);
//                 qa.setCoordinate(1, corner7);
//                 qa.setCoordinate(2, corner3);
//                 qa.setCoordinate(3, corner4);
//                 // transform 180 on x-axis
//                 break;
//             case "left": qa.setCoordinate(0, corner5);
//                 qa.setCoordinate(1, corner8);
//                 qa.setCoordinate(2, corner4);
//                 qa.setCoordinate(3, corner1);
//                 // transform 180 on y-axis
//                 break;
//             case "right": qa.setCoordinate(0, corner6);
//                 qa.setCoordinate(1, corner7);
//                 qa.setCoordinate(2, corner3);
//                 qa.setCoordinate(3, corner2);
//                 break;
//             case "front": qa.setCoordinate(0, corner5);
//                 qa.setCoordinate(1, corner6);
//                 qa.setCoordinate(2, corner7);
//                 qa.setCoordinate(3, corner8);
//                 break;
//             case "back": qa.setCoordinate(0, corner1);
//                 qa.setCoordinate(1, corner2);
//                 qa.setCoordinate(2, corner3);
//                 qa.setCoordinate(3, corner4);
//                 break;
//             default: return null;
//         }
        
//         ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
//         Appearance appear = new Appearance();
//         appear.setColoringAttributes(ca);
//         Shape3D shape = new Shape3D(qa, appear);
//         return shape;
        return tg;
    }
    
    // convert arraylists to arrays
    private Point3f[] AListToArray(ArrayList in) {
        Point3f[] out = new Point3f[in.size()];
        
        for(int i = 0; i < in.size(); i++) {
            out[i] = (Point3f)in.get(i);
        }
        return out;
    }
    
    private void orbitControls(Canvas3D c)
  /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
  {
    OrbitBehavior orbit = 
        new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
    orbit.setSchedulingBounds(bounds);

    ViewingPlatform vp = su.getViewingPlatform();
    vp.setViewPlatformBehavior(orbit);      
  }  // end of orbitControls()



  private void initUserPosition()
  // Set the user's initial viewpoint using lookAt()
  {
    ViewingPlatform vp = su.getViewingPlatform();
    TransformGroup steerTG = vp.getViewPlatformTransform();

    Transform3D t3d = new Transform3D();
    steerTG.getTransform(t3d);

    // args are: viewer posn, where looking, up direction
    t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
    t3d.invert();

    steerTG.setTransform(t3d);
  }  // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3Dv2(), 256, 256);
//         new MyOwn3Dv2();
    }

}

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				5510797
			</iTime>
			<fName>
				MyOwn3Dv2.java
			</fName>
			<fSize>
				10433.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;



public class MyOwn3Dv2 extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere(new Point3d(0,0,0), 10000);   // for environment nodes
    private SimpleUniverse su;
    
    // points for 8 corners of the room
    Point3f corner1 = new Point3f(-15f, 0f, -15f);
    Point3f corner2 = new Point3f(15f, 0f, -15f);
    Point3f corner3 = new Point3f(15f, 0f, -15f);
    Point3f corner4 = new Point3f(-15f, 0f, -15f);
    Point3f corner5 = new Point3f(-15f, 0f, 15f);
    Point3f corner6 = new Point3f(15f, 0f, 15f);
    Point3f corner7 = new Point3f(15f, 0f, 15f);
    Point3f corner8 = new Point3f(-15f, 0f, 15f);
    
    public MyOwn3Dv2() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
//         Point3f a1 = new Point3f(-15f, -15f, -15f);
//         Point3f a2 = new Point3f(15f, -15f, -15f);
//         Point3f a3 = new Point3f(15f, 15f, -15f);
//         Point3f a4 = new Point3f(-15f, 15f, -15f);
//         
//         QuadArray floorCoord = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord.setCoordinate(0, a1);
//         floorCoord.setCoordinate(1, a2);
//         floorCoord.setCoordinate(2, a3);
//         floorCoord.setCoordinate(3, a4);
//         
//         Point3f b1 = new Point3f(-15f, -15f, 15f);
//         Point3f b2 = new Point3f(15f, -15f, 15f);
//         Point3f b3 = new Point3f(15f, 15f, 15f);
//         Point3f b4 = new Point3f(-15f, 15f, 15f);
//         
//         QuadArray floorCoord2 = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord2.setCoordinate(0, b1);
//         floorCoord2.setCoordinate(1, b2);
//         floorCoord2.setCoordinate(2, b3);
//         floorCoord2.setCoordinate(3, b4);
//         
//         Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
//         Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
//         ColoringAttributes greenFloor = new ColoringAttributes(green, 1);
//         ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
// 
//         Appearance fa = new Appearance();
//         Appearance fb = new Appearance();
// 
//         fa.setColoringAttributes(blueFloor);
//         fb.setColoringAttributes(greenFloor);
//         
//         Shape3D fs3d = new Shape3D(floorCoord, fa);
//         Shape3D fs3d2 = new Shape3D(floorCoord2, fb);
        
//         BranchGroup scene = new BranchGroup();
        BranchGroup scene = createSceneGraph();
//         scene.addChild(fs3d);
//         scene.addChild(fs3d2);
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        //su.getViewingPlatform().setNominalViewingTransform();
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor
    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();
        
//         // points for 8 corners of the room
//         Point3f corner1 = new Point3f(-15f, -15f, -15f);
//         Point3f corner2 = new Point3f(15f, -15f, -15f);
//         Point3f corner3 = new Point3f(15f, 15f, -15f);
//         Point3f corner4 = new Point3f(-15f, 15f, -15f);
//         Point3f corner5 = new Point3f(-15f, -15f, 15f);
//         Point3f corner6 = new Point3f(15f, -15f, 15f);
//         Point3f corner7 = new Point3f(15f, 15f, 15f);
//         Point3f corner8 = new Point3f(-15f, 15f, 15f);
//         
        // colours for walls and floor
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
        Color3f medRed = new Color3f(0.8f, 0.4f, 0.3f);
        Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
        Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
        
        
        TransformGroup floor = makeQuad("floor", blue);
        TransformGroup back = makeQuad("back", green);
        TransformGroup left = makeQuad("left", medRed);
        TransformGroup right = makeQuad("right", white);
//         TransformGroup right = makeQuad("right", white);
//         TransformGroup right = makeQuad("right", white);
        
        objRoot.addChild(floor);
        objRoot.addChild(back);
        objRoot.addChild(left);
        objRoot.addChild(right);
        
        return objRoot;
    } // end of method

    private TransformGroup makeQuad(String face, Color3f faceColor) {
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        qa.setCoordinate(0, corner5);
        qa.setCoordinate(1, corner6);
        qa.setCoordinate(2, corner2);
        qa.setCoordinate(3, corner1);
        
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.setTranslation(new Vector3f(0f, 15f, 0f));
                t3d.rotX(Math.PI);
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on x-axis
                break;
            case "left": t3d.setTranslation(new Vector3f(-15f, 0f, 0f));
                t3d.rotZ(-Math.PI/2);
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on y-axis
                break;
            case "right": t3d.setTranslation(new Vector3f(15f, 0f, 0f));
                t3d.rotZ(Math.PI/2);
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.setTranslation(new Vector3f(0f, 0f, 15f));
                t3d.rotX(Math.PI/2);
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.setTranslation(new Vector3f(0f, 0f, -15f));
                t3d.rotX(-Math.PI/2);
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
//         
//         switch (face) {
//             case "floor": qa.setCoordinate(0, corner5);
//                 qa.setCoordinate(1, corner6);
//                 qa.setCoordinate(2, corner2);
//                 qa.setCoordinate(3, corner1);
//                 break;
//             case "ceiling": qa.setCoordinate(0, corner8);
//                 qa.setCoordinate(1, corner7);
//                 qa.setCoordinate(2, corner3);
//                 qa.setCoordinate(3, corner4);
//                 // transform 180 on x-axis
//                 break;
//             case "left": qa.setCoordinate(0, corner5);
//                 qa.setCoordinate(1, corner8);
//                 qa.setCoordinate(2, corner4);
//                 qa.setCoordinate(3, corner1);
//                 // transform 180 on y-axis
//                 break;
//             case "right": qa.setCoordinate(0, corner6);
//                 qa.setCoordinate(1, corner7);
//                 qa.setCoordinate(2, corner3);
//                 qa.setCoordinate(3, corner2);
//                 break;
//             case "front": qa.setCoordinate(0, corner5);
//                 qa.setCoordinate(1, corner6);
//                 qa.setCoordinate(2, corner7);
//                 qa.setCoordinate(3, corner8);
//                 break;
//             case "back": qa.setCoordinate(0, corner1);
//                 qa.setCoordinate(1, corner2);
//                 qa.setCoordinate(2, corner3);
//                 qa.setCoordinate(3, corner4);
//                 break;
//             default: return null;
//         }
        
//         ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
//         Appearance appear = new Appearance();
//         appear.setColoringAttributes(ca);
//         Shape3D shape = new Shape3D(qa, appear);
//         return shape;
        return tg;
    }
    
    // convert arraylists to arrays
    private Point3f[] AListToArray(ArrayList in) {
        Point3f[] out = new Point3f[in.size()];
        
        for(int i = 0; i < in.size(); i++) {
            out[i] = (Point3f)in.get(i);
        }
        return out;
    }
    
    private void orbitControls(Canvas3D c)
  /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
  {
    OrbitBehavior orbit = 
        new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
    orbit.setSchedulingBounds(bounds);

    ViewingPlatform vp = su.getViewingPlatform();
    vp.setViewPlatformBehavior(orbit);      
  }  // end of orbitControls()



  private void initUserPosition()
  // Set the user's initial viewpoint using lookAt()
  {
    ViewingPlatform vp = su.getViewingPlatform();
    TransformGroup steerTG = vp.getViewPlatformTransform();

    Transform3D t3d = new Transform3D();
    steerTG.getTransform(t3d);

    // args are: viewer posn, where looking, up direction
    t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
    t3d.invert();

    steerTG.setTransform(t3d);
  }  // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3Dv2(), 256, 256);
//         new MyOwn3Dv2();
    }

}

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				5677937
			</iTime>
			<fName>
				MyOwn3Dv2.java
			</fName>
			<fSize>
				10433.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;



public class MyOwn3Dv2 extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere(new Point3d(0,0,0), 10000);   // for environment nodes
    private SimpleUniverse su;
    
    // points for 8 corners of the room
    Point3f corner1 = new Point3f(-15f, 0f, -15f);
    Point3f corner2 = new Point3f(15f, 0f, -15f);
    Point3f corner3 = new Point3f(15f, 0f, -15f);
    Point3f corner4 = new Point3f(-15f, 0f, -15f);
    Point3f corner5 = new Point3f(-15f, 0f, 15f);
    Point3f corner6 = new Point3f(15f, 0f, 15f);
    Point3f corner7 = new Point3f(15f, 0f, 15f);
    Point3f corner8 = new Point3f(-15f, 0f, 15f);
    
    public MyOwn3Dv2() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
//         Point3f a1 = new Point3f(-15f, -15f, -15f);
//         Point3f a2 = new Point3f(15f, -15f, -15f);
//         Point3f a3 = new Point3f(15f, 15f, -15f);
//         Point3f a4 = new Point3f(-15f, 15f, -15f);
//         
//         QuadArray floorCoord = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord.setCoordinate(0, a1);
//         floorCoord.setCoordinate(1, a2);
//         floorCoord.setCoordinate(2, a3);
//         floorCoord.setCoordinate(3, a4);
//         
//         Point3f b1 = new Point3f(-15f, -15f, 15f);
//         Point3f b2 = new Point3f(15f, -15f, 15f);
//         Point3f b3 = new Point3f(15f, 15f, 15f);
//         Point3f b4 = new Point3f(-15f, 15f, 15f);
//         
//         QuadArray floorCoord2 = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord2.setCoordinate(0, b1);
//         floorCoord2.setCoordinate(1, b2);
//         floorCoord2.setCoordinate(2, b3);
//         floorCoord2.setCoordinate(3, b4);
//         
//         Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
//         Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
//         ColoringAttributes greenFloor = new ColoringAttributes(green, 1);
//         ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
// 
//         Appearance fa = new Appearance();
//         Appearance fb = new Appearance();
// 
//         fa.setColoringAttributes(blueFloor);
//         fb.setColoringAttributes(greenFloor);
//         
//         Shape3D fs3d = new Shape3D(floorCoord, fa);
//         Shape3D fs3d2 = new Shape3D(floorCoord2, fb);
        
//         BranchGroup scene = new BranchGroup();
        BranchGroup scene = createSceneGraph();
//         scene.addChild(fs3d);
//         scene.addChild(fs3d2);
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        //su.getViewingPlatform().setNominalViewingTransform();
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor
    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();
        
//         // points for 8 corners of the room
//         Point3f corner1 = new Point3f(-15f, -15f, -15f);
//         Point3f corner2 = new Point3f(15f, -15f, -15f);
//         Point3f corner3 = new Point3f(15f, 15f, -15f);
//         Point3f corner4 = new Point3f(-15f, 15f, -15f);
//         Point3f corner5 = new Point3f(-15f, -15f, 15f);
//         Point3f corner6 = new Point3f(15f, -15f, 15f);
//         Point3f corner7 = new Point3f(15f, 15f, 15f);
//         Point3f corner8 = new Point3f(-15f, 15f, 15f);
//         
        // colours for walls and floor
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
        Color3f medRed = new Color3f(0.8f, 0.4f, 0.3f);
        Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
        Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
        
        
        TransformGroup floor = makeQuad("floor", blue);
        TransformGroup back = makeQuad("back", green);
        TransformGroup left = makeQuad("left", medRed);
        TransformGroup right = makeQuad("right", white);
//         TransformGroup right = makeQuad("right", white);
//         TransformGroup right = makeQuad("right", white);
        
        objRoot.addChild(floor);
        objRoot.addChild(back);
        objRoot.addChild(left);
        objRoot.addChild(right);
        
        return objRoot;
    } // end of method

    private TransformGroup makeQuad(String face, Color3f faceColor) {
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        qa.setCoordinate(0, corner5);
        qa.setCoordinate(1, corner6);
        qa.setCoordinate(2, corner2);
        qa.setCoordinate(3, corner1);
        
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.setTranslation(new Vector3f(0f, 15f, 0f));
                t3d.rotX(Math.PI);
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on x-axis
                break;
            case "left": t3d.rotZ(-Math.PI/2);
                t3d.setTranslation(new Vector3f(-15f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on y-axis
                break;
            case "right": t3d.setTranslation(new Vector3f(15f, 0f, 0f));
                t3d.rotZ(Math.PI/2);
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.setTranslation(new Vector3f(0f, 0f, 15f));
                t3d.rotX(-Math.PI/2);
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.setTranslation(new Vector3f(0f, 0f, -15f));
                t3d.rotX(Math.PI/2);
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
//         
//         switch (face) {
//             case "floor": qa.setCoordinate(0, corner5);
//                 qa.setCoordinate(1, corner6);
//                 qa.setCoordinate(2, corner2);
//                 qa.setCoordinate(3, corner1);
//                 break;
//             case "ceiling": qa.setCoordinate(0, corner8);
//                 qa.setCoordinate(1, corner7);
//                 qa.setCoordinate(2, corner3);
//                 qa.setCoordinate(3, corner4);
//                 // transform 180 on x-axis
//                 break;
//             case "left": qa.setCoordinate(0, corner5);
//                 qa.setCoordinate(1, corner8);
//                 qa.setCoordinate(2, corner4);
//                 qa.setCoordinate(3, corner1);
//                 // transform 180 on y-axis
//                 break;
//             case "right": qa.setCoordinate(0, corner6);
//                 qa.setCoordinate(1, corner7);
//                 qa.setCoordinate(2, corner3);
//                 qa.setCoordinate(3, corner2);
//                 break;
//             case "front": qa.setCoordinate(0, corner5);
//                 qa.setCoordinate(1, corner6);
//                 qa.setCoordinate(2, corner7);
//                 qa.setCoordinate(3, corner8);
//                 break;
//             case "back": qa.setCoordinate(0, corner1);
//                 qa.setCoordinate(1, corner2);
//                 qa.setCoordinate(2, corner3);
//                 qa.setCoordinate(3, corner4);
//                 break;
//             default: return null;
//         }
        
//         ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
//         Appearance appear = new Appearance();
//         appear.setColoringAttributes(ca);
//         Shape3D shape = new Shape3D(qa, appear);
//         return shape;
        return tg;
    }
    
    // convert arraylists to arrays
    private Point3f[] AListToArray(ArrayList in) {
        Point3f[] out = new Point3f[in.size()];
        
        for(int i = 0; i < in.size(); i++) {
            out[i] = (Point3f)in.get(i);
        }
        return out;
    }
    
    private void orbitControls(Canvas3D c)
  /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
  {
    OrbitBehavior orbit = 
        new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
    orbit.setSchedulingBounds(bounds);

    ViewingPlatform vp = su.getViewingPlatform();
    vp.setViewPlatformBehavior(orbit);      
  }  // end of orbitControls()



  private void initUserPosition()
  // Set the user's initial viewpoint using lookAt()
  {
    ViewingPlatform vp = su.getViewingPlatform();
    TransformGroup steerTG = vp.getViewPlatformTransform();

    Transform3D t3d = new Transform3D();
    steerTG.getTransform(t3d);

    // args are: viewer posn, where looking, up direction
    t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
    t3d.invert();

    steerTG.setTransform(t3d);
  }  // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3Dv2(), 256, 256);
//         new MyOwn3Dv2();
    }

}

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				5744781
			</iTime>
			<fName>
				MyOwn3Dv2.java
			</fName>
			<fSize>
				10434.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;



public class MyOwn3Dv2 extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere(new Point3d(0,0,0), 100000);   // for environment nodes
    private SimpleUniverse su;
    
    // points for 8 corners of the room
    Point3f corner1 = new Point3f(-15f, 0f, -15f);
    Point3f corner2 = new Point3f(15f, 0f, -15f);
    Point3f corner3 = new Point3f(15f, 0f, -15f);
    Point3f corner4 = new Point3f(-15f, 0f, -15f);
    Point3f corner5 = new Point3f(-15f, 0f, 15f);
    Point3f corner6 = new Point3f(15f, 0f, 15f);
    Point3f corner7 = new Point3f(15f, 0f, 15f);
    Point3f corner8 = new Point3f(-15f, 0f, 15f);
    
    public MyOwn3Dv2() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
//         Point3f a1 = new Point3f(-15f, -15f, -15f);
//         Point3f a2 = new Point3f(15f, -15f, -15f);
//         Point3f a3 = new Point3f(15f, 15f, -15f);
//         Point3f a4 = new Point3f(-15f, 15f, -15f);
//         
//         QuadArray floorCoord = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord.setCoordinate(0, a1);
//         floorCoord.setCoordinate(1, a2);
//         floorCoord.setCoordinate(2, a3);
//         floorCoord.setCoordinate(3, a4);
//         
//         Point3f b1 = new Point3f(-15f, -15f, 15f);
//         Point3f b2 = new Point3f(15f, -15f, 15f);
//         Point3f b3 = new Point3f(15f, 15f, 15f);
//         Point3f b4 = new Point3f(-15f, 15f, 15f);
//         
//         QuadArray floorCoord2 = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord2.setCoordinate(0, b1);
//         floorCoord2.setCoordinate(1, b2);
//         floorCoord2.setCoordinate(2, b3);
//         floorCoord2.setCoordinate(3, b4);
//         
//         Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
//         Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
//         ColoringAttributes greenFloor = new ColoringAttributes(green, 1);
//         ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
// 
//         Appearance fa = new Appearance();
//         Appearance fb = new Appearance();
// 
//         fa.setColoringAttributes(blueFloor);
//         fb.setColoringAttributes(greenFloor);
//         
//         Shape3D fs3d = new Shape3D(floorCoord, fa);
//         Shape3D fs3d2 = new Shape3D(floorCoord2, fb);
        
//         BranchGroup scene = new BranchGroup();
        BranchGroup scene = createSceneGraph();
//         scene.addChild(fs3d);
//         scene.addChild(fs3d2);
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        //su.getViewingPlatform().setNominalViewingTransform();
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor
    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();
        
//         // points for 8 corners of the room
//         Point3f corner1 = new Point3f(-15f, -15f, -15f);
//         Point3f corner2 = new Point3f(15f, -15f, -15f);
//         Point3f corner3 = new Point3f(15f, 15f, -15f);
//         Point3f corner4 = new Point3f(-15f, 15f, -15f);
//         Point3f corner5 = new Point3f(-15f, -15f, 15f);
//         Point3f corner6 = new Point3f(15f, -15f, 15f);
//         Point3f corner7 = new Point3f(15f, 15f, 15f);
//         Point3f corner8 = new Point3f(-15f, 15f, 15f);
//         
        // colours for walls and floor
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
        Color3f medRed = new Color3f(0.8f, 0.4f, 0.3f);
        Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
        Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
        
        
        TransformGroup floor = makeQuad("floor", blue);
        TransformGroup back = makeQuad("back", green);
        TransformGroup left = makeQuad("left", medRed);
        TransformGroup right = makeQuad("right", white);
//         TransformGroup right = makeQuad("right", white);
//         TransformGroup right = makeQuad("right", white);
        
        objRoot.addChild(floor);
        objRoot.addChild(back);
        objRoot.addChild(left);
        objRoot.addChild(right);
        
        return objRoot;
    } // end of method

    private TransformGroup makeQuad(String face, Color3f faceColor) {
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        qa.setCoordinate(0, corner5);
        qa.setCoordinate(1, corner6);
        qa.setCoordinate(2, corner2);
        qa.setCoordinate(3, corner1);
        
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.setTranslation(new Vector3f(0f, 15f, 0f));
                t3d.rotX(Math.PI);
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on x-axis
                break;
            case "left": t3d.rotZ(-Math.PI/2);
                t3d.setTranslation(new Vector3f(-15f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on y-axis
                break;
            case "right": t3d.setTranslation(new Vector3f(15f, 0f, 0f));
                t3d.rotZ(Math.PI/2);
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.setTranslation(new Vector3f(0f, 0f, 15f));
                t3d.rotX(-Math.PI/2);
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.setTranslation(new Vector3f(0f, 0f, -15f));
                t3d.rotX(Math.PI/2);
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
//         
//         switch (face) {
//             case "floor": qa.setCoordinate(0, corner5);
//                 qa.setCoordinate(1, corner6);
//                 qa.setCoordinate(2, corner2);
//                 qa.setCoordinate(3, corner1);
//                 break;
//             case "ceiling": qa.setCoordinate(0, corner8);
//                 qa.setCoordinate(1, corner7);
//                 qa.setCoordinate(2, corner3);
//                 qa.setCoordinate(3, corner4);
//                 // transform 180 on x-axis
//                 break;
//             case "left": qa.setCoordinate(0, corner5);
//                 qa.setCoordinate(1, corner8);
//                 qa.setCoordinate(2, corner4);
//                 qa.setCoordinate(3, corner1);
//                 // transform 180 on y-axis
//                 break;
//             case "right": qa.setCoordinate(0, corner6);
//                 qa.setCoordinate(1, corner7);
//                 qa.setCoordinate(2, corner3);
//                 qa.setCoordinate(3, corner2);
//                 break;
//             case "front": qa.setCoordinate(0, corner5);
//                 qa.setCoordinate(1, corner6);
//                 qa.setCoordinate(2, corner7);
//                 qa.setCoordinate(3, corner8);
//                 break;
//             case "back": qa.setCoordinate(0, corner1);
//                 qa.setCoordinate(1, corner2);
//                 qa.setCoordinate(2, corner3);
//                 qa.setCoordinate(3, corner4);
//                 break;
//             default: return null;
//         }
        
//         ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
//         Appearance appear = new Appearance();
//         appear.setColoringAttributes(ca);
//         Shape3D shape = new Shape3D(qa, appear);
//         return shape;
        return tg;
    }
    
    // convert arraylists to arrays
    private Point3f[] AListToArray(ArrayList in) {
        Point3f[] out = new Point3f[in.size()];
        
        for(int i = 0; i < in.size(); i++) {
            out[i] = (Point3f)in.get(i);
        }
        return out;
    }
    
    private void orbitControls(Canvas3D c)
  /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
  {
    OrbitBehavior orbit = 
        new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
    orbit.setSchedulingBounds(bounds);

    ViewingPlatform vp = su.getViewingPlatform();
    vp.setViewPlatformBehavior(orbit);      
  }  // end of orbitControls()



  private void initUserPosition()
  // Set the user's initial viewpoint using lookAt()
  {
    ViewingPlatform vp = su.getViewingPlatform();
    TransformGroup steerTG = vp.getViewPlatformTransform();

    Transform3D t3d = new Transform3D();
    steerTG.getTransform(t3d);

    // args are: viewer posn, where looking, up direction
    t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
    t3d.invert();

    steerTG.setTransform(t3d);
  }  // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3Dv2(), 256, 256);
//         new MyOwn3Dv2();
    }

}

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				6498703
			</iTime>
			<fName>
				MyOwn3Dv2.java
			</fName>
			<fSize>
				10498.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;



public class MyOwn3Dv2 extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere();   // for environment nodes
    private SimpleUniverse su;
    
    // points for 8 corners of the room
    Point3f corner1 = new Point3f(-15f, 0f, -15f);
    Point3f corner2 = new Point3f(15f, 0f, -15f);
    Point3f corner3 = new Point3f(15f, 0f, -15f);
    Point3f corner4 = new Point3f(-15f, 0f, -15f);
    Point3f corner5 = new Point3f(-15f, 0f, 15f);
    Point3f corner6 = new Point3f(15f, 0f, 15f);
    Point3f corner7 = new Point3f(15f, 0f, 15f);
    Point3f corner8 = new Point3f(-15f, 0f, 15f);
    
    public MyOwn3Dv2() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
//         Point3f a1 = new Point3f(-15f, -15f, -15f);
//         Point3f a2 = new Point3f(15f, -15f, -15f);
//         Point3f a3 = new Point3f(15f, 15f, -15f);
//         Point3f a4 = new Point3f(-15f, 15f, -15f);
//         
//         QuadArray floorCoord = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord.setCoordinate(0, a1);
//         floorCoord.setCoordinate(1, a2);
//         floorCoord.setCoordinate(2, a3);
//         floorCoord.setCoordinate(3, a4);
//         
//         Point3f b1 = new Point3f(-15f, -15f, 15f);
//         Point3f b2 = new Point3f(15f, -15f, 15f);
//         Point3f b3 = new Point3f(15f, 15f, 15f);
//         Point3f b4 = new Point3f(-15f, 15f, 15f);
//         
//         QuadArray floorCoord2 = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord2.setCoordinate(0, b1);
//         floorCoord2.setCoordinate(1, b2);
//         floorCoord2.setCoordinate(2, b3);
//         floorCoord2.setCoordinate(3, b4);
//         
//         Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
//         Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
//         ColoringAttributes greenFloor = new ColoringAttributes(green, 1);
//         ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
// 
//         Appearance fa = new Appearance();
//         Appearance fb = new Appearance();
// 
//         fa.setColoringAttributes(blueFloor);
//         fb.setColoringAttributes(greenFloor);
//         
//         Shape3D fs3d = new Shape3D(floorCoord, fa);
//         Shape3D fs3d2 = new Shape3D(floorCoord2, fb);
        
//         BranchGroup scene = new BranchGroup();
        BranchGroup scene = createSceneGraph();
//         scene.addChild(fs3d);
//         scene.addChild(fs3d2);
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        //su.getViewingPlatform().setNominalViewingTransform();
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor
    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();
        
//         // points for 8 corners of the room
//         Point3f corner1 = new Point3f(-15f, -15f, -15f);
//         Point3f corner2 = new Point3f(15f, -15f, -15f);
//         Point3f corner3 = new Point3f(15f, 15f, -15f);
//         Point3f corner4 = new Point3f(-15f, 15f, -15f);
//         Point3f corner5 = new Point3f(-15f, -15f, 15f);
//         Point3f corner6 = new Point3f(15f, -15f, 15f);
//         Point3f corner7 = new Point3f(15f, 15f, 15f);
//         Point3f corner8 = new Point3f(-15f, 15f, 15f);
//         
        // colours for walls and floor
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
        Color3f medRed = new Color3f(0.8f, 0.4f, 0.3f);
        Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
        Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
        
        
        TransformGroup floor = makeQuad("floor", blue);
        TransformGroup back = makeQuad("back", green);
        TransformGroup left = makeQuad("left", medRed);
        TransformGroup right = makeQuad("right", white);
        TransformGroup front = makeQuad("front", new Color3f(0.8f, 0.1f, 0.7f);
        TransformGroup ceiling = makeQuad("ceiling", new Color3f(0.9f, 0.9f, 0f);
        
        objRoot.addChild(floor);
        objRoot.addChild(back);
        objRoot.addChild(left);
        objRoot.addChild(right);
        
        return objRoot;
    } // end of method

    private TransformGroup makeQuad(String face, Color3f faceColor) {
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        qa.setCoordinate(0, corner5);
        qa.setCoordinate(1, corner6);
        qa.setCoordinate(2, corner2);
        qa.setCoordinate(3, corner1);
        
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.rotX(Math.PI);
                t3d.setTranslation(new Vector3f(0f, 15f, 0f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on x-axis
                break;
            case "left": t3d.rotZ(-Math.PI/2);
                t3d.setTranslation(new Vector3f(-15f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on y-axis
                break;
            case "right": t3d.rotZ(Math.PI/2);
                t3d.setTranslation(new Vector3f(15f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.rotX(-Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, 15f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.rotX(Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, -15f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
//         
//         switch (face) {
//             case "floor": qa.setCoordinate(0, corner5);
//                 qa.setCoordinate(1, corner6);
//                 qa.setCoordinate(2, corner2);
//                 qa.setCoordinate(3, corner1);
//                 break;
//             case "ceiling": qa.setCoordinate(0, corner8);
//                 qa.setCoordinate(1, corner7);
//                 qa.setCoordinate(2, corner3);
//                 qa.setCoordinate(3, corner4);
//                 // transform 180 on x-axis
//                 break;
//             case "left": qa.setCoordinate(0, corner5);
//                 qa.setCoordinate(1, corner8);
//                 qa.setCoordinate(2, corner4);
//                 qa.setCoordinate(3, corner1);
//                 // transform 180 on y-axis
//                 break;
//             case "right": qa.setCoordinate(0, corner6);
//                 qa.setCoordinate(1, corner7);
//                 qa.setCoordinate(2, corner3);
//                 qa.setCoordinate(3, corner2);
//                 break;
//             case "front": qa.setCoordinate(0, corner5);
//                 qa.setCoordinate(1, corner6);
//                 qa.setCoordinate(2, corner7);
//                 qa.setCoordinate(3, corner8);
//                 break;
//             case "back": qa.setCoordinate(0, corner1);
//                 qa.setCoordinate(1, corner2);
//                 qa.setCoordinate(2, corner3);
//                 qa.setCoordinate(3, corner4);
//                 break;
//             default: return null;
//         }
        
//         ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
//         Appearance appear = new Appearance();
//         appear.setColoringAttributes(ca);
//         Shape3D shape = new Shape3D(qa, appear);
//         return shape;
        return tg;
    }
    
    // convert arraylists to arrays
    private Point3f[] AListToArray(ArrayList in) {
        Point3f[] out = new Point3f[in.size()];
        
        for(int i = 0; i < in.size(); i++) {
            out[i] = (Point3f)in.get(i);
        }
        return out;
    }
    
    private void orbitControls(Canvas3D c)
  /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
  {
    OrbitBehavior orbit = 
        new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
    orbit.setSchedulingBounds(bounds);

    ViewingPlatform vp = su.getViewingPlatform();
    vp.setViewPlatformBehavior(orbit);      
  }  // end of orbitControls()



  private void initUserPosition()
  // Set the user's initial viewpoint using lookAt()
  {
    ViewingPlatform vp = su.getViewingPlatform();
    TransformGroup steerTG = vp.getViewPlatformTransform();

    Transform3D t3d = new Transform3D();
    steerTG.getTransform(t3d);

    // args are: viewer posn, where looking, up direction
    t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
    t3d.invert();

    steerTG.setTransform(t3d);
  }  // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3Dv2(), 256, 256);
//         new MyOwn3Dv2();
    }

}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				140
			<iErrLine>
			<iErrMessage>
				')' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				141
			<iErrLine>
			<iErrMessage>
				')' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				6529312
			</iTime>
			<fName>
				MyOwn3Dv2.java
			</fName>
			<fSize>
				10500.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;



public class MyOwn3Dv2 extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere();   // for environment nodes
    private SimpleUniverse su;
    
    // points for 8 corners of the room
    Point3f corner1 = new Point3f(-15f, 0f, -15f);
    Point3f corner2 = new Point3f(15f, 0f, -15f);
    Point3f corner3 = new Point3f(15f, 0f, -15f);
    Point3f corner4 = new Point3f(-15f, 0f, -15f);
    Point3f corner5 = new Point3f(-15f, 0f, 15f);
    Point3f corner6 = new Point3f(15f, 0f, 15f);
    Point3f corner7 = new Point3f(15f, 0f, 15f);
    Point3f corner8 = new Point3f(-15f, 0f, 15f);
    
    public MyOwn3Dv2() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
//         Point3f a1 = new Point3f(-15f, -15f, -15f);
//         Point3f a2 = new Point3f(15f, -15f, -15f);
//         Point3f a3 = new Point3f(15f, 15f, -15f);
//         Point3f a4 = new Point3f(-15f, 15f, -15f);
//         
//         QuadArray floorCoord = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord.setCoordinate(0, a1);
//         floorCoord.setCoordinate(1, a2);
//         floorCoord.setCoordinate(2, a3);
//         floorCoord.setCoordinate(3, a4);
//         
//         Point3f b1 = new Point3f(-15f, -15f, 15f);
//         Point3f b2 = new Point3f(15f, -15f, 15f);
//         Point3f b3 = new Point3f(15f, 15f, 15f);
//         Point3f b4 = new Point3f(-15f, 15f, 15f);
//         
//         QuadArray floorCoord2 = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord2.setCoordinate(0, b1);
//         floorCoord2.setCoordinate(1, b2);
//         floorCoord2.setCoordinate(2, b3);
//         floorCoord2.setCoordinate(3, b4);
//         
//         Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
//         Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
//         ColoringAttributes greenFloor = new ColoringAttributes(green, 1);
//         ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
// 
//         Appearance fa = new Appearance();
//         Appearance fb = new Appearance();
// 
//         fa.setColoringAttributes(blueFloor);
//         fb.setColoringAttributes(greenFloor);
//         
//         Shape3D fs3d = new Shape3D(floorCoord, fa);
//         Shape3D fs3d2 = new Shape3D(floorCoord2, fb);
        
//         BranchGroup scene = new BranchGroup();
        BranchGroup scene = createSceneGraph();
//         scene.addChild(fs3d);
//         scene.addChild(fs3d2);
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        //su.getViewingPlatform().setNominalViewingTransform();
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor
    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();
        
//         // points for 8 corners of the room
//         Point3f corner1 = new Point3f(-15f, -15f, -15f);
//         Point3f corner2 = new Point3f(15f, -15f, -15f);
//         Point3f corner3 = new Point3f(15f, 15f, -15f);
//         Point3f corner4 = new Point3f(-15f, 15f, -15f);
//         Point3f corner5 = new Point3f(-15f, -15f, 15f);
//         Point3f corner6 = new Point3f(15f, -15f, 15f);
//         Point3f corner7 = new Point3f(15f, 15f, 15f);
//         Point3f corner8 = new Point3f(-15f, 15f, 15f);
//         
        // colours for walls and floor
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
        Color3f medRed = new Color3f(0.8f, 0.4f, 0.3f);
        Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
        Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
        
        
        TransformGroup floor = makeQuad("floor", blue);
        TransformGroup back = makeQuad("back", green);
        TransformGroup left = makeQuad("left", medRed);
        TransformGroup right = makeQuad("right", white);
        TransformGroup front = makeQuad("front", new Color3f(0.8f, 0.1f, 0.7f));
        TransformGroup ceiling = makeQuad("ceiling", new Color3f(0.9f, 0.9f, 0f));
        
        objRoot.addChild(floor);
        objRoot.addChild(back);
        objRoot.addChild(left);
        objRoot.addChild(right);
        
        return objRoot;
    } // end of method

    private TransformGroup makeQuad(String face, Color3f faceColor) {
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        qa.setCoordinate(0, corner5);
        qa.setCoordinate(1, corner6);
        qa.setCoordinate(2, corner2);
        qa.setCoordinate(3, corner1);
        
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.rotX(Math.PI);
                t3d.setTranslation(new Vector3f(0f, 15f, 0f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on x-axis
                break;
            case "left": t3d.rotZ(-Math.PI/2);
                t3d.setTranslation(new Vector3f(-15f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on y-axis
                break;
            case "right": t3d.rotZ(Math.PI/2);
                t3d.setTranslation(new Vector3f(15f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.rotX(-Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, 15f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.rotX(Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, -15f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
//         
//         switch (face) {
//             case "floor": qa.setCoordinate(0, corner5);
//                 qa.setCoordinate(1, corner6);
//                 qa.setCoordinate(2, corner2);
//                 qa.setCoordinate(3, corner1);
//                 break;
//             case "ceiling": qa.setCoordinate(0, corner8);
//                 qa.setCoordinate(1, corner7);
//                 qa.setCoordinate(2, corner3);
//                 qa.setCoordinate(3, corner4);
//                 // transform 180 on x-axis
//                 break;
//             case "left": qa.setCoordinate(0, corner5);
//                 qa.setCoordinate(1, corner8);
//                 qa.setCoordinate(2, corner4);
//                 qa.setCoordinate(3, corner1);
//                 // transform 180 on y-axis
//                 break;
//             case "right": qa.setCoordinate(0, corner6);
//                 qa.setCoordinate(1, corner7);
//                 qa.setCoordinate(2, corner3);
//                 qa.setCoordinate(3, corner2);
//                 break;
//             case "front": qa.setCoordinate(0, corner5);
//                 qa.setCoordinate(1, corner6);
//                 qa.setCoordinate(2, corner7);
//                 qa.setCoordinate(3, corner8);
//                 break;
//             case "back": qa.setCoordinate(0, corner1);
//                 qa.setCoordinate(1, corner2);
//                 qa.setCoordinate(2, corner3);
//                 qa.setCoordinate(3, corner4);
//                 break;
//             default: return null;
//         }
        
//         ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
//         Appearance appear = new Appearance();
//         appear.setColoringAttributes(ca);
//         Shape3D shape = new Shape3D(qa, appear);
//         return shape;
        return tg;
    }
    
    // convert arraylists to arrays
    private Point3f[] AListToArray(ArrayList in) {
        Point3f[] out = new Point3f[in.size()];
        
        for(int i = 0; i < in.size(); i++) {
            out[i] = (Point3f)in.get(i);
        }
        return out;
    }
    
    private void orbitControls(Canvas3D c)
  /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
  {
    OrbitBehavior orbit = 
        new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
    orbit.setSchedulingBounds(bounds);

    ViewingPlatform vp = su.getViewingPlatform();
    vp.setViewPlatformBehavior(orbit);      
  }  // end of orbitControls()



  private void initUserPosition()
  // Set the user's initial viewpoint using lookAt()
  {
    ViewingPlatform vp = su.getViewingPlatform();
    TransformGroup steerTG = vp.getViewPlatformTransform();

    Transform3D t3d = new Transform3D();
    steerTG.getTransform(t3d);

    // args are: viewer posn, where looking, up direction
    t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
    t3d.invert();

    steerTG.setTransform(t3d);
  }  // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3Dv2(), 256, 256);
//         new MyOwn3Dv2();
    }

}

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				6623718
			</iTime>
			<fName>
				MyOwn3Dv2.java
			</fName>
			<fSize>
				10568.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;



public class MyOwn3Dv2 extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere();   // for environment nodes
    private SimpleUniverse su;
    
    // points for 8 corners of the room
    Point3f corner1 = new Point3f(-15f, 0f, -15f);
    Point3f corner2 = new Point3f(15f, 0f, -15f);
    Point3f corner3 = new Point3f(15f, 0f, -15f);
    Point3f corner4 = new Point3f(-15f, 0f, -15f);
    Point3f corner5 = new Point3f(-15f, 0f, 15f);
    Point3f corner6 = new Point3f(15f, 0f, 15f);
    Point3f corner7 = new Point3f(15f, 0f, 15f);
    Point3f corner8 = new Point3f(-15f, 0f, 15f);
    
    public MyOwn3Dv2() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
//         Point3f a1 = new Point3f(-15f, -15f, -15f);
//         Point3f a2 = new Point3f(15f, -15f, -15f);
//         Point3f a3 = new Point3f(15f, 15f, -15f);
//         Point3f a4 = new Point3f(-15f, 15f, -15f);
//         
//         QuadArray floorCoord = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord.setCoordinate(0, a1);
//         floorCoord.setCoordinate(1, a2);
//         floorCoord.setCoordinate(2, a3);
//         floorCoord.setCoordinate(3, a4);
//         
//         Point3f b1 = new Point3f(-15f, -15f, 15f);
//         Point3f b2 = new Point3f(15f, -15f, 15f);
//         Point3f b3 = new Point3f(15f, 15f, 15f);
//         Point3f b4 = new Point3f(-15f, 15f, 15f);
//         
//         QuadArray floorCoord2 = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord2.setCoordinate(0, b1);
//         floorCoord2.setCoordinate(1, b2);
//         floorCoord2.setCoordinate(2, b3);
//         floorCoord2.setCoordinate(3, b4);
//         
//         Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
//         Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
//         ColoringAttributes greenFloor = new ColoringAttributes(green, 1);
//         ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
// 
//         Appearance fa = new Appearance();
//         Appearance fb = new Appearance();
// 
//         fa.setColoringAttributes(blueFloor);
//         fb.setColoringAttributes(greenFloor);
//         
//         Shape3D fs3d = new Shape3D(floorCoord, fa);
//         Shape3D fs3d2 = new Shape3D(floorCoord2, fb);
        
//         BranchGroup scene = new BranchGroup();
        BranchGroup scene = createSceneGraph();
//         scene.addChild(fs3d);
//         scene.addChild(fs3d2);
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        //su.getViewingPlatform().setNominalViewingTransform();
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor
    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();
        
//         // points for 8 corners of the room
//         Point3f corner1 = new Point3f(-15f, -15f, -15f);
//         Point3f corner2 = new Point3f(15f, -15f, -15f);
//         Point3f corner3 = new Point3f(15f, 15f, -15f);
//         Point3f corner4 = new Point3f(-15f, 15f, -15f);
//         Point3f corner5 = new Point3f(-15f, -15f, 15f);
//         Point3f corner6 = new Point3f(15f, -15f, 15f);
//         Point3f corner7 = new Point3f(15f, 15f, 15f);
//         Point3f corner8 = new Point3f(-15f, 15f, 15f);
//         
        // colours for walls and floor
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
        Color3f medRed = new Color3f(0.8f, 0.4f, 0.3f);
        Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
        Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
        
        
        TransformGroup floor = makeQuad("floor", blue);
        TransformGroup back = makeQuad("back", green);
        TransformGroup left = makeQuad("left", medRed);
        TransformGroup right = makeQuad("right", white);
        TransformGroup front = makeQuad("front", new Color3f(0.8f, 0.1f, 0.7f));
        TransformGroup ceiling = makeQuad("ceiling", new Color3f(0.9f, 0.9f, 0f));
        
        objRoot.addChild(floor);
        objRoot.addChild(back);
        objRoot.addChild(left);
        objRoot.addChild(right);
        objRoot.addChild(front);
        objRoot.addChild(ceiling);
        
        return objRoot;
    } // end of method

    private TransformGroup makeQuad(String face, Color3f faceColor) {
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        qa.setCoordinate(0, corner5);
        qa.setCoordinate(1, corner6);
        qa.setCoordinate(2, corner2);
        qa.setCoordinate(3, corner1);
        
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.rotX(Math.PI);
                t3d.setTranslation(new Vector3f(0f, 15f, 0f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on x-axis
                break;
            case "left": t3d.rotZ(-Math.PI/2);
                t3d.setTranslation(new Vector3f(-15f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on y-axis
                break;
            case "right": t3d.rotZ(Math.PI/2);
                t3d.setTranslation(new Vector3f(15f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.rotX(-Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, 15f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.rotX(Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, -15f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
//         
//         switch (face) {
//             case "floor": qa.setCoordinate(0, corner5);
//                 qa.setCoordinate(1, corner6);
//                 qa.setCoordinate(2, corner2);
//                 qa.setCoordinate(3, corner1);
//                 break;
//             case "ceiling": qa.setCoordinate(0, corner8);
//                 qa.setCoordinate(1, corner7);
//                 qa.setCoordinate(2, corner3);
//                 qa.setCoordinate(3, corner4);
//                 // transform 180 on x-axis
//                 break;
//             case "left": qa.setCoordinate(0, corner5);
//                 qa.setCoordinate(1, corner8);
//                 qa.setCoordinate(2, corner4);
//                 qa.setCoordinate(3, corner1);
//                 // transform 180 on y-axis
//                 break;
//             case "right": qa.setCoordinate(0, corner6);
//                 qa.setCoordinate(1, corner7);
//                 qa.setCoordinate(2, corner3);
//                 qa.setCoordinate(3, corner2);
//                 break;
//             case "front": qa.setCoordinate(0, corner5);
//                 qa.setCoordinate(1, corner6);
//                 qa.setCoordinate(2, corner7);
//                 qa.setCoordinate(3, corner8);
//                 break;
//             case "back": qa.setCoordinate(0, corner1);
//                 qa.setCoordinate(1, corner2);
//                 qa.setCoordinate(2, corner3);
//                 qa.setCoordinate(3, corner4);
//                 break;
//             default: return null;
//         }
        
//         ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
//         Appearance appear = new Appearance();
//         appear.setColoringAttributes(ca);
//         Shape3D shape = new Shape3D(qa, appear);
//         return shape;
        return tg;
    }
    
    // convert arraylists to arrays
    private Point3f[] AListToArray(ArrayList in) {
        Point3f[] out = new Point3f[in.size()];
        
        for(int i = 0; i < in.size(); i++) {
            out[i] = (Point3f)in.get(i);
        }
        return out;
    }
    
    private void orbitControls(Canvas3D c)
  /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
  {
    OrbitBehavior orbit = 
        new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
    orbit.setSchedulingBounds(bounds);

    ViewingPlatform vp = su.getViewingPlatform();
    vp.setViewPlatformBehavior(orbit);      
  }  // end of orbitControls()



  private void initUserPosition()
  // Set the user's initial viewpoint using lookAt()
  {
    ViewingPlatform vp = su.getViewingPlatform();
    TransformGroup steerTG = vp.getViewPlatformTransform();

    Transform3D t3d = new Transform3D();
    steerTG.getTransform(t3d);

    // args are: viewer posn, where looking, up direction
    t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
    t3d.invert();

    steerTG.setTransform(t3d);
  }  // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3Dv2(), 256, 256);
//         new MyOwn3Dv2();
    }

}

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				6900000
			</iTime>
			<fName>
				MyOwn3D.java
			</fName>
			<fSize>
				10560.0
			</fSize>
			<fData>

/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.util.ArrayList;
import java.applet.Applet;
// import java.awt.BorderLayout;
// import java.awt.Frame;
// import java.awt.event.*;
// import java.awt.GraphicsConfiguration;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;



public class MyOwn3D extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere();   // for environment nodes
    private SimpleUniverse su;
    
    // points for 8 corners of the room
    Point3f corner1 = new Point3f(-15f, 0f, -15f);
    Point3f corner2 = new Point3f(15f, 0f, -15f);
    Point3f corner3 = new Point3f(15f, 0f, -15f);
    Point3f corner4 = new Point3f(-15f, 0f, -15f);
    Point3f corner5 = new Point3f(-15f, 0f, 15f);
    Point3f corner6 = new Point3f(15f, 0f, 15f);
    Point3f corner7 = new Point3f(15f, 0f, 15f);
    Point3f corner8 = new Point3f(-15f, 0f, 15f);
    
    public MyOwn3D() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
//         Point3f a1 = new Point3f(-15f, -15f, -15f);
//         Point3f a2 = new Point3f(15f, -15f, -15f);
//         Point3f a3 = new Point3f(15f, 15f, -15f);
//         Point3f a4 = new Point3f(-15f, 15f, -15f);
//         
//         QuadArray floorCoord = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord.setCoordinate(0, a1);
//         floorCoord.setCoordinate(1, a2);
//         floorCoord.setCoordinate(2, a3);
//         floorCoord.setCoordinate(3, a4);
//         
//         Point3f b1 = new Point3f(-15f, -15f, 15f);
//         Point3f b2 = new Point3f(15f, -15f, 15f);
//         Point3f b3 = new Point3f(15f, 15f, 15f);
//         Point3f b4 = new Point3f(-15f, 15f, 15f);
//         
//         QuadArray floorCoord2 = new QuadArray(4, QuadArray.COORDINATES);
//         floorCoord2.setCoordinate(0, b1);
//         floorCoord2.setCoordinate(1, b2);
//         floorCoord2.setCoordinate(2, b3);
//         floorCoord2.setCoordinate(3, b4);
//         
//         Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
//         Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
//         ColoringAttributes greenFloor = new ColoringAttributes(green, 1);
//         ColoringAttributes blueFloor = new ColoringAttributes(blue, 1);
// 
//         Appearance fa = new Appearance();
//         Appearance fb = new Appearance();
// 
//         fa.setColoringAttributes(blueFloor);
//         fb.setColoringAttributes(greenFloor);
//         
//         Shape3D fs3d = new Shape3D(floorCoord, fa);
//         Shape3D fs3d2 = new Shape3D(floorCoord2, fb);
        
//         BranchGroup scene = new BranchGroup();
        BranchGroup scene = createSceneGraph();
//         scene.addChild(fs3d);
//         scene.addChild(fs3d2);
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        //su.getViewingPlatform().setNominalViewingTransform();
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor
    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();
        
//         // points for 8 corners of the room
//         Point3f corner1 = new Point3f(-15f, -15f, -15f);
//         Point3f corner2 = new Point3f(15f, -15f, -15f);
//         Point3f corner3 = new Point3f(15f, 15f, -15f);
//         Point3f corner4 = new Point3f(-15f, 15f, -15f);
//         Point3f corner5 = new Point3f(-15f, -15f, 15f);
//         Point3f corner6 = new Point3f(15f, -15f, 15f);
//         Point3f corner7 = new Point3f(15f, 15f, 15f);
//         Point3f corner8 = new Point3f(-15f, 15f, 15f);
//         
        // colours for walls and floor
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);
        Color3f green = new Color3f(0.0f, 0.5f, 0.1f);
        Color3f medRed = new Color3f(0.8f, 0.4f, 0.3f);
        Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
        Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
        
        
        TransformGroup floor = makeQuad("floor", blue);
        TransformGroup back = makeQuad("back", green);
        TransformGroup left = makeQuad("left", medRed);
        TransformGroup right = makeQuad("right", white);
        TransformGroup front = makeQuad("front", new Color3f(0.8f, 0.1f, 0.7f));
        TransformGroup ceiling = makeQuad("ceiling", new Color3f(0.9f, 0.9f, 0f));
        
        objRoot.addChild(floor);
        objRoot.addChild(back);
        objRoot.addChild(left);
        objRoot.addChild(right);
        objRoot.addChild(front);
        objRoot.addChild(ceiling);
        
        return objRoot;
    } // end of method

    private TransformGroup makeQuad(String face, Color3f faceColor) {
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        qa.setCoordinate(0, corner5);
        qa.setCoordinate(1, corner6);
        qa.setCoordinate(2, corner2);
        qa.setCoordinate(3, corner1);
        
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.rotX(Math.PI);
                t3d.setTranslation(new Vector3f(0f, 15f, 0f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on x-axis
                break;
            case "left": t3d.rotZ(-Math.PI/2);
                t3d.setTranslation(new Vector3f(-15f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                // transform 180 on y-axis
                break;
            case "right": t3d.rotZ(Math.PI/2);
                t3d.setTranslation(new Vector3f(15f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.rotX(-Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, 15f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.rotX(Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, -15f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
//         
//         switch (face) {
//             case "floor": qa.setCoordinate(0, corner5);
//                 qa.setCoordinate(1, corner6);
//                 qa.setCoordinate(2, corner2);
//                 qa.setCoordinate(3, corner1);
//                 break;
//             case "ceiling": qa.setCoordinate(0, corner8);
//                 qa.setCoordinate(1, corner7);
//                 qa.setCoordinate(2, corner3);
//                 qa.setCoordinate(3, corner4);
//                 // transform 180 on x-axis
//                 break;
//             case "left": qa.setCoordinate(0, corner5);
//                 qa.setCoordinate(1, corner8);
//                 qa.setCoordinate(2, corner4);
//                 qa.setCoordinate(3, corner1);
//                 // transform 180 on y-axis
//                 break;
//             case "right": qa.setCoordinate(0, corner6);
//                 qa.setCoordinate(1, corner7);
//                 qa.setCoordinate(2, corner3);
//                 qa.setCoordinate(3, corner2);
//                 break;
//             case "front": qa.setCoordinate(0, corner5);
//                 qa.setCoordinate(1, corner6);
//                 qa.setCoordinate(2, corner7);
//                 qa.setCoordinate(3, corner8);
//                 break;
//             case "back": qa.setCoordinate(0, corner1);
//                 qa.setCoordinate(1, corner2);
//                 qa.setCoordinate(2, corner3);
//                 qa.setCoordinate(3, corner4);
//                 break;
//             default: return null;
//         }
        
//         ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
//         Appearance appear = new Appearance();
//         appear.setColoringAttributes(ca);
//         Shape3D shape = new Shape3D(qa, appear);
//         return shape;
        return tg;
    }
    
    // convert arraylists to arrays
    private Point3f[] AListToArray(ArrayList in) {
        Point3f[] out = new Point3f[in.size()];
        
        for(int i = 0; i < in.size(); i++) {
            out[i] = (Point3f)in.get(i);
        }
        return out;
    }
    
    private void orbitControls(Canvas3D c)
  /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
  {
    OrbitBehavior orbit = 
        new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
    orbit.setSchedulingBounds(bounds);

    ViewingPlatform vp = su.getViewingPlatform();
    vp.setViewPlatformBehavior(orbit);      
  }  // end of orbitControls()



  private void initUserPosition()
  // Set the user's initial viewpoint using lookAt()
  {
    ViewingPlatform vp = su.getViewingPlatform();
    TransformGroup steerTG = vp.getViewPlatformTransform();

    Transform3D t3d = new Transform3D();
    steerTG.getTransform(t3d);

    // args are: viewer posn, where looking, up direction
    t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
    t3d.invert();

    steerTG.setTransform(t3d);
  }  // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3D(), 256, 256);
//         new MyOwn3D();
    }

}

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
</mile>
