<?xml version="1.0" encoding="UTF-8"?>
<mile>
	<session_info>
		<session_id>
			1422362812875
		</session_id>
		<student_id>
			3042012
		</student_id>
		<assignment>
			TME1
		</assignment>
		<local_path>
			C:\Documents and Settings\Jason Bishop\My Documents\Dropbox\COMP382\TME1\Question1
		</local_path>
	</session_info>
	<session_data>
		<compile_instance>
			<iTime>
				2893109
			</iTime>
			<fName>
				MyOwn3D.java
			</fName>
			<fSize>
				8669.0
			</fSize>
			<fData>
/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor with grid lines
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 2.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.applet.Applet;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;

public class MyOwn3D extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere();   // for environment nodes
    private SimpleUniverse su;
    
    // constructor
    public MyOwn3D() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
        BranchGroup scene = createSceneGraph();
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor

    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();  // root of visual objects in scene graph
        
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);  // solid color blue for coloring sides and floor
        
        // create the sides and floor
        TransformGroup floor = makeFace("floor", blue);
        TransformGroup back = makeFace("back", blue);
        TransformGroup front = makeFace("front", blue);
        TransformGroup left = makeFace("left", blue);
        TransformGroup right = makeFace("right", blue);
        // TransformGroup ceiling = makeFace("ceiling", new Color3f(1.0f, 1.0f, 1.0f));  // white
        
        // create lines to divide surfaces into 3x3 grids
        Shape3D grid = makeGrid();
        
        // add children to root branch graph
        objRoot.addChild(floor);
        objRoot.addChild(back);
        objRoot.addChild(left);
        objRoot.addChild(right);
        objRoot.addChild(front);
        // objRoot.addChild(ceiling);
        objRoot.addChild(grid);
        
        Population shapes = new Population();
        objRoot.addChild(shapes.getShapes());
        
        return objRoot;
    } // end of method

    // method to create sides and floor of a room
    private TransformGroup makeFace(String face, Color3f faceColor) {
        
        // create standard QuadArray with coordinates for basic surface
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-15f, 0f, 15f));
        qa.setCoordinate(1, new Point3f(15f, 0f, 15f));
        qa.setCoordinate(2, new Point3f(15f, 0f, -15f));
        qa.setCoordinate(3, new Point3f(-15f, 0f, -15f));
        
        // set color for created quad
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        // create ability to transform and translate surface to correct position
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        // create surface based on input paramaters
        // surfaces are off by a factor of 0.005 to allow grid lines to be more visible
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15.005f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.rotX(Math.PI);
                t3d.setTranslation(new Vector3f(0f, 15.005f, 0f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "left": t3d.rotZ(-Math.PI/2);
                t3d.setTranslation(new Vector3f(-15.005f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "right": t3d.rotZ(Math.PI/2);
                t3d.setTranslation(new Vector3f(15.005f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.rotX(-Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, 15.005f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.rotX(Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, -15.005f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
        return tg;
    } // end of makeFace method
    
    // makes lines to divide constructed area into 3x3 grid for each side
    private Shape3D makeGrid() {
        
        // set up initial coordinates for z plane grid lines
        Point3f[] gridCoords = new Point3f[47];
        gridCoords[0] = new Point3f(-15f, 15f, 15f);
        gridCoords[1] = new Point3f(-15f, -15f, 15f);
        gridCoords[2] = new Point3f(15f, -15f, 15f);
        gridCoords[3] = new Point3f(15f, 15f, 15f);
        
        // create remaining grid lines through z plane
        Point3f adjust = new Point3f(0, 0, -10);
        for (int i = 4; i < 16; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        // set up initial coordinates for x plane grid lines
        gridCoords[16] = new Point3f(gridCoords[3]);
        gridCoords[17] = new Point3f(gridCoords[2]);
        gridCoords[18] = new Point3f(gridCoords[14]);
        gridCoords[19] = new Point3f(gridCoords[15]);
        
        // create remaining grid lines through x plane
        adjust = new Point3f(-10, 0, 0);
        for (int i = 20; i < 32; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        // set up initial coordinates for y plane grid lines
        gridCoords[32] = new Point3f(gridCoords[0]);
        gridCoords[33] = new Point3f(gridCoords[3]);
        gridCoords[34] = new Point3f(gridCoords[15]);
        gridCoords[35] = new Point3f(gridCoords[12]);
        gridCoords[36] = new Point3f(gridCoords[0]);
        
        // create remaining grid lines through y plane
        adjust = new Point3f(0, -10, 0);
        for (int i = 37; i < 47; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 5]);
            gridCoords[i].add(adjust);
        }
        
        // create array for vertex counts in LineStripArray
        int[] lineCounts = new int[11];
        for (int i = 0; i < lineCounts.length; i++) {
            if (i < 8) {lineCounts[i] = 4;}
            else {lineCounts[i] = 5;}
        }
        
        // create LineStripArray object to create lines
        LineStripArray grid = new LineStripArray(47, LineStripArray.COORDINATES, lineCounts);
        for (int i = 0; i < gridCoords.length; i++) {
            grid.setCoordinate(i, gridCoords[i]);
        }
        
        return new Shape3D(grid);
    } // end of makeGrid method
    
    private void orbitControls(Canvas3D c)
    /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
    {
        OrbitBehavior orbit = 
            new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
        orbit.setSchedulingBounds(bounds);

        ViewingPlatform vp = su.getViewingPlatform();
        vp.setViewPlatformBehavior(orbit);      
    } // end of orbitControls()

    private void initUserPosition()
    // Set the user's initial viewpoint using lookAt()
    {
        ViewingPlatform vp = su.getViewingPlatform();
        TransformGroup steerTG = vp.getViewPlatformTransform();

        Transform3D t3d = new Transform3D();
        steerTG.getTransform(t3d);

        // args are: viewer posn, where looking, up direction
        t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
        t3d.invert();

        steerTG.setTransform(t3d);
    } // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3D(), 256, 256);
    } // end of main
} // end of class

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				26
			<iErrLine>
			<iErrMessage>
				';' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				30
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				33
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				33
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				33
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				33
			<iErrLine>
			<iErrMessage>
				')' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				33
			<iErrLine>
			<iErrMessage>
				';' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				33
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				33
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				33
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				33
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				33
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				33
			<iErrLine>
			<iErrMessage>
				';' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				33
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				33
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				33
			<iErrLine>
			<iErrMessage>
				';' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				34
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				34
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				34
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				34
			<iErrLine>
			<iErrMessage>
				')' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				34
			<iErrLine>
			<iErrMessage>
				';' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				34
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				34
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				34
			<iErrLine>
			<iErrMessage>
				';' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				34
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				34
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				34
			<iErrLine>
			<iErrMessage>
				';' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				34
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				34
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				34
			<iErrLine>
			<iErrMessage>
				';' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				35
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				35
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				35
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				35
			<iErrLine>
			<iErrMessage>
				')' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				35
			<iErrLine>
			<iErrMessage>
				';' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				35
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				35
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				35
			<iErrLine>
			<iErrMessage>
				';' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				35
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				35
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				35
			<iErrLine>
			<iErrMessage>
				';' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				35
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				35
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				36
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				36
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				36
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				36
			<iErrLine>
			<iErrMessage>
				')' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				36
			<iErrLine>
			<iErrMessage>
				';' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				36
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				36
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				36
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				36
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				36
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				36
			<iErrLine>
			<iErrMessage>
				';' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				36
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				36
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				38
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				38
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				38
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				38
			<iErrLine>
			<iErrMessage>
				')' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				38
			<iErrLine>
			<iErrMessage>
				';' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				38
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				38
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				38
			<iErrLine>
			<iErrMessage>
				';' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				38
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				38
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				38
			<iErrLine>
			<iErrMessage>
				';' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				38
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				38
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				39
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				39
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				39
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				39
			<iErrLine>
			<iErrMessage>
				')' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				39
			<iErrLine>
			<iErrMessage>
				';' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				39
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				39
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				39
			<iErrLine>
			<iErrMessage>
				';' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				39
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				39
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				39
			<iErrLine>
			<iErrMessage>
				';' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				39
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				39
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				40
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				40
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				40
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				40
			<iErrLine>
			<iErrMessage>
				')' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				40
			<iErrLine>
			<iErrMessage>
				';' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				40
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				40
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				40
			<iErrLine>
			<iErrMessage>
				';' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				40
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				40
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				40
			<iErrLine>
			<iErrMessage>
				';' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				40
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				40
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				41
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				41
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				41
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				41
			<iErrLine>
			<iErrMessage>
				')' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				41
			<iErrLine>
			<iErrMessage>
				';' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				3009562
			</iTime>
			<fName>
				Population.java
			</fName>
			<fSize>
				4785.0
			</fSize>
			<fData>
/**
*   Title: Population.java
*   Description: A collection of various objects for display in a 3D envirionment
*   Date: January 26, 2015
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import com.sun.j3d.utils.geometry.*;
import javax.vecmath.*;

public class Population
{
    private Population {
        // create various inclined planes
        QuadArray qa = new QuadArray(12, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-0.5, 0.1f, 0.5f));
        qa.setCoordinate(1, new Point3f(0.5f, 0.1f, 0.5f));
        qa.setCoordinate(2, new Point3f(0.5f, 0.1f, -0.5f));
        qa.setCoordinate(3, new Point3f(-0.5f, 0.1f, -0.5f));
        
        qa.setCoordinate(4, new Point3f(8f, 3f, -13f));
        qa.setCoordinate(5, new Point3f(10f, 3f, -13f));
        qa.setCoordinate(6, new Point3f(10f, 10f, -15f));
        qa.setCoordinate(7, new Point3f(8f, 10f, -15f));
        
        qa.setCoordinate(8, new Point3f(-3, 4f, 12f));
        qa.setCoordinate(9, new Point3f(-6f, 3f, 9f));
        qa.setCoordinate(10, new Point3f(-3f, 1f, 6f));
        qa.setCoordinate(11, new Point3f(-1f, 0.5f, 9f));
        
        
        
        // create sphere objects
        Sphere sph1 = new Sphere();  // defalut sphere radius 1
        TransformGroup tgSphere1 = new TransformGroup();
        Transform3D t3dSphere1 = new Transform3D();
        t3dSphere1.setTranslation(new Vector3f(-14.005f, 5f, 5f));
        tgSphere1.setTransform(t3dSphere1);
        tgSphere1.addChild(sph1);
        
        Appearance appsph2 = new Appearance();
        appsph2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 0f), 1));
        Sphere sph2 = new Sphere(1.5f, sph2app);  // sphere radius 1.5, colour red
        TransformGroup tgSphere2 = new TransformGroup();
        Transform3D t3dSphere2 = new Transform3D();
        t3dSphere2.setTranslation(new Vector3f(5f, 5f, 10f));
        tgSphere2.setTransform(t3dSphere2);
        tgSphere2.addChild(sph2);
        
        // create cube objects
        Box cube1 = new Box();  // default box with side length of 2
        TransformGroup tgc1 = new TransformGroup();
        Transform3D t3dc1 = new Transform3D();
        t3dc1.setTranslation(new Vector3f(10f, 2f, 10f));
        tgc1.setTranslation(t3dc1);
        tgc1.addChild(cube1);
        
        Appearance appc2 = new Appearance();
        appc2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 0f), 1));
        Box cube2 = new Box(3f, 3f, 3f);  // box with side length 3, color green
        TransformGroup tgc2 = new TransformGroup();
        Transform3D t3dc2 = new Transform3D();
        t3dc2.setTranslation(new Vector3f(-7f, 10f, -12f));
        tgc2.setTranslation(t3dc2);
        tgc2.addChild(cube2);
        
        // create column objects
        Appearance appcol = new Appearance();
        appcol.setColoringAttributes(new ColoringAttributes(new Color3f(0f, 1f, 1f), 1));
        Box column = new Box(1f, 4f, 1f);  // rectangular column with specified dimensions, color cyan
        TransformGroup tgcol = new TransformGroup();
        Transform3D t3dcol = new Transform3D();
        t3dcol.setTranslation(new Vector3f(-7f, 10f, -12f));
        t3dcol.rotX(Math.PI/4);
        t3dcol.rotY(Math.PI/6);
        tgcol.setTranslation(t3dccol);
        tgcol.addChild(column);
        
        // create pole objects
        Cylinder cyl1 = new Cylinder();  // default cylinder radius 1, height 2
        TransformGroup tgccyl1 = new TransformGroup();
        Transform3D t3dcyl1 = new Transform3D();
        t3dcyl1.setTranslation(new Vector3f(9f, 1f, 0f));
        tgccyl1.setTranslation(t3dcyl1);
        tgcyl1.addChild(cyl1);
        
        Appearance appcyl2 = new Appearance();
        appcyl2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 1f), 1));
        Cylinder cyl2 = new Cylinder(1.5f, 7f);  // cylinder with specified dimensions, color magenta
        TransformGroup tgcyl2 = new TransformGroup();
        Transform3D t3dcyl2 = new Transform3D();
        t3dcyl2.setTranslation(new Vector3f(6f, 6f, -6f));
        t3dcyl2.rotZ(Math.PI/2);
        tgcyl2.setTranslation(t3dcyl2);
        tgcyl2.addChild(cyl2);
        
        Shape3D planes = new Shape3D();
        planes.setGeometry(qa);
        planes.setGeometry(sph1);
        planes.setGeometry(sph2);
        planes.setGeometry(box1);
        planes.setGeometry(box2);
        planes.setGeometry(column);
        planes.setGeometry(cyl1);
        planes.setGeometry(cyl2);
    }
    
    public Shape3D getShapes () {
        return planes;
    }
}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				31
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				34
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				34
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				34
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				34
			<iErrLine>
			<iErrMessage>
				')' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				34
			<iErrLine>
			<iErrMessage>
				';' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				34
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				34
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				34
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				34
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				34
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				34
			<iErrLine>
			<iErrMessage>
				';' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				34
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				34
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				34
			<iErrLine>
			<iErrMessage>
				';' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				35
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				35
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				35
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				35
			<iErrLine>
			<iErrMessage>
				')' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				35
			<iErrLine>
			<iErrMessage>
				';' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				35
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				35
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				35
			<iErrLine>
			<iErrMessage>
				';' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				35
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				35
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				35
			<iErrLine>
			<iErrMessage>
				';' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				35
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				35
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				35
			<iErrLine>
			<iErrMessage>
				';' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				36
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				36
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				36
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				36
			<iErrLine>
			<iErrMessage>
				')' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				36
			<iErrLine>
			<iErrMessage>
				';' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				36
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				36
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				36
			<iErrLine>
			<iErrMessage>
				';' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				36
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				36
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				36
			<iErrLine>
			<iErrMessage>
				';' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				36
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				36
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				37
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				37
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				37
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				37
			<iErrLine>
			<iErrMessage>
				')' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				37
			<iErrLine>
			<iErrMessage>
				';' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				37
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				37
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				37
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				37
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				37
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				37
			<iErrLine>
			<iErrMessage>
				';' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				37
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				37
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				39
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				39
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				39
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				39
			<iErrLine>
			<iErrMessage>
				')' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				39
			<iErrLine>
			<iErrMessage>
				';' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				39
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				39
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				39
			<iErrLine>
			<iErrMessage>
				';' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				39
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				39
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				39
			<iErrLine>
			<iErrMessage>
				';' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				39
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				39
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				40
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				40
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				40
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				40
			<iErrLine>
			<iErrMessage>
				')' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				40
			<iErrLine>
			<iErrMessage>
				';' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				40
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				40
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				40
			<iErrLine>
			<iErrMessage>
				';' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				40
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				40
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				40
			<iErrLine>
			<iErrMessage>
				';' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				40
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				40
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				41
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				41
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				41
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				41
			<iErrLine>
			<iErrMessage>
				')' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				41
			<iErrLine>
			<iErrMessage>
				';' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				41
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				41
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				41
			<iErrLine>
			<iErrMessage>
				';' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				41
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				41
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				41
			<iErrLine>
			<iErrMessage>
				';' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				41
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				41
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				42
			<iErrLine>
			<iErrMessage>
				<identifier> expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				42
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				42
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				42
			<iErrLine>
			<iErrMessage>
				')' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				42
			<iErrLine>
			<iErrMessage>
				';' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				42
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				3029437
			</iTime>
			<fName>
				Population.java
			</fName>
			<fSize>
				4788.0
			</fSize>
			<fData>
/**
*   Title: Population.java
*   Description: A collection of various objects for display in a 3D envirionment
*   Date: January 26, 2015
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import com.sun.j3d.utils.geometry.*;
import javax.vecmath.*;

public class Population
{
    private Population () {
        // create various inclined planes
        QuadArray qa = new QuadArray(12, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-0.5, 0.1f, 0.5f));
        qa.setCoordinate(1, new Point3f(0.5f, 0.1f, 0.5f));
        qa.setCoordinate(2, new Point3f(0.5f, 0.1f, -0.5f));
        qa.setCoordinate(3, new Point3f(-0.5f, 0.1f, -0.5f));
        
        qa.setCoordinate(4, new Point3f(8f, 3f, -13f));
        qa.setCoordinate(5, new Point3f(10f, 3f, -13f));
        qa.setCoordinate(6, new Point3f(10f, 10f, -15f));
        qa.setCoordinate(7, new Point3f(8f, 10f, -15f));
        
        qa.setCoordinate(8, new Point3f(-3, 4f, 12f));
        qa.setCoordinate(9, new Point3f(-6f, 3f, 9f));
        qa.setCoordinate(10, new Point3f(-3f, 1f, 6f));
        qa.setCoordinate(11, new Point3f(-1f, 0.5f, 9f));
        
        
        
        // create sphere objects
        Sphere sph1 = new Sphere();  // defalut sphere radius 1
        TransformGroup tgSphere1 = new TransformGroup();
        Transform3D t3dSphere1 = new Transform3D();
        t3dSphere1.setTranslation(new Vector3f(-14.005f, 5f, 5f));
        tgSphere1.setTransform(t3dSphere1);
        tgSphere1.addChild(sph1);
        
        Appearance appsph2 = new Appearance();
        appsph2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 0f), 1));
        Sphere sph2 = new Sphere(1.5f, sph2app);  // sphere radius 1.5, colour red
        TransformGroup tgSphere2 = new TransformGroup();
        Transform3D t3dSphere2 = new Transform3D();
        t3dSphere2.setTranslation(new Vector3f(5f, 5f, 10f));
        tgSphere2.setTransform(t3dSphere2);
        tgSphere2.addChild(sph2);
        
        // create cube objects
        Box cube1 = new Box();  // default box with side length of 2
        TransformGroup tgc1 = new TransformGroup();
        Transform3D t3dc1 = new Transform3D();
        t3dc1.setTranslation(new Vector3f(10f, 2f, 10f));
        tgc1.setTranslation(t3dc1);
        tgc1.addChild(cube1);
        
        Appearance appc2 = new Appearance();
        appc2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 0f), 1));
        Box cube2 = new Box(3f, 3f, 3f);  // box with side length 3, color green
        TransformGroup tgc2 = new TransformGroup();
        Transform3D t3dc2 = new Transform3D();
        t3dc2.setTranslation(new Vector3f(-7f, 10f, -12f));
        tgc2.setTranslation(t3dc2);
        tgc2.addChild(cube2);
        
        // create column objects
        Appearance appcol = new Appearance();
        appcol.setColoringAttributes(new ColoringAttributes(new Color3f(0f, 1f, 1f), 1));
        Box column = new Box(1f, 4f, 1f);  // rectangular column with specified dimensions, color cyan
        TransformGroup tgcol = new TransformGroup();
        Transform3D t3dcol = new Transform3D();
        t3dcol.setTranslation(new Vector3f(-7f, 10f, -12f));
        t3dcol.rotX(Math.PI/4);
        t3dcol.rotY(Math.PI/6);
        tgcol.setTranslation(t3dccol);
        tgcol.addChild(column);
        
        // create pole objects
        Cylinder cyl1 = new Cylinder();  // default cylinder radius 1, height 2
        TransformGroup tgccyl1 = new TransformGroup();
        Transform3D t3dcyl1 = new Transform3D();
        t3dcyl1.setTranslation(new Vector3f(9f, 1f, 0f));
        tgccyl1.setTranslation(t3dcyl1);
        tgcyl1.addChild(cyl1);
        
        Appearance appcyl2 = new Appearance();
        appcyl2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 1f), 1));
        Cylinder cyl2 = new Cylinder(1.5f, 7f);  // cylinder with specified dimensions, color magenta
        TransformGroup tgcyl2 = new TransformGroup();
        Transform3D t3dcyl2 = new Transform3D();
        t3dcyl2.setTranslation(new Vector3f(6f, 6f, -6f));
        t3dcyl2.rotZ(Math.PI/2);
        tgcyl2.setTranslation(t3dcyl2);
        tgcyl2.addChild(cyl2);
        
        Shape3D planes = new Shape3D();
        planes.setGeometry(qa);
        planes.setGeometry(sph1);
        planes.setGeometry(sph2);
        planes.setGeometry(box1);
        planes.setGeometry(box2);
        planes.setGeometry(column);
        planes.setGeometry(cyl1);
        planes.setGeometry(cyl2);
    }
    
    public Shape3D getShapes () {
        return planes;
    }
}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				126
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class Shape3D
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				33
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class QuadArray
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				33
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class QuadArray
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				33
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable QuadArray
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				34
			<iErrLine>
			<iErrMessage>
				no suitable constructor found for Point3f(double,float,float)
    constructor javax.vecmath.Point3f.Point3f() is not applicable
      (actual and formal argument lists differ in length)
    constructor javax.vecmath.Point3f.Point3f(javax.vecmath.Tuple3d) is not applicable
      (actual and formal argument lists differ in length)
    constructor javax.vecmath.Point3f.Point3f(javax.vecmath.Tuple3f) is not applicable
      (actual and formal argument lists differ in length)
    constructor javax.vecmath.Point3f.Point3f(javax.vecmath.Point3d) is not applicable
      (actual and formal argument lists differ in length)
    constructor javax.vecmath.Point3f.Point3f(javax.vecmath.Point3f) is not applicable
      (actual and formal argument lists differ in length)
    constructor javax.vecmath.Point3f.Point3f(float[]) is not applicable
      (actual and formal argument lists differ in length)
    constructor javax.vecmath.Point3f.Point3f(float,float,float) is not applicable
      (actual argument double cannot be converted to float by method invocation conversion)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				53
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class TransformGroup
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				53
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class TransformGroup
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				54
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class Transform3D
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				54
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class Transform3D
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				59
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class Appearance
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				59
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class Appearance
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				60
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class ColoringAttributes
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				61
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable sph2app
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				62
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class TransformGroup
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				62
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class TransformGroup
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				63
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class Transform3D
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				63
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class Transform3D
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				70
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class TransformGroup
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				70
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class TransformGroup
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				71
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class Transform3D
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				71
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class Transform3D
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				76
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class Appearance
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				76
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class Appearance
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				77
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class ColoringAttributes
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				78
			<iErrLine>
			<iErrMessage>
				no suitable constructor found for Box(float,float,float)
    constructor com.sun.j3d.utils.geometry.Box.Box(float,float,float,int,javax.media.j3d.Appearance) is not applicable
      (actual and formal argument lists differ in length)
    constructor com.sun.j3d.utils.geometry.Box.Box(float,float,float,int,javax.media.j3d.Appearance,int) is not applicable
      (actual and formal argument lists differ in length)
    constructor com.sun.j3d.utils.geometry.Box.Box(float,float,float,javax.media.j3d.Appearance) is not applicable
      (actual and formal argument lists differ in length)
    constructor com.sun.j3d.utils.geometry.Box.Box() is not applicable
      (actual and formal argument lists differ in length)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				79
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class TransformGroup
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				79
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class TransformGroup
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				80
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class Transform3D
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				80
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class Transform3D
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				86
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class Appearance
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				86
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class Appearance
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				87
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class ColoringAttributes
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				88
			<iErrLine>
			<iErrMessage>
				no suitable constructor found for Box(float,float,float)
    constructor com.sun.j3d.utils.geometry.Box.Box(float,float,float,int,javax.media.j3d.Appearance) is not applicable
      (actual and formal argument lists differ in length)
    constructor com.sun.j3d.utils.geometry.Box.Box(float,float,float,int,javax.media.j3d.Appearance,int) is not applicable
      (actual and formal argument lists differ in length)
    constructor com.sun.j3d.utils.geometry.Box.Box(float,float,float,javax.media.j3d.Appearance) is not applicable
      (actual and formal argument lists differ in length)
    constructor com.sun.j3d.utils.geometry.Box.Box() is not applicable
      (actual and formal argument lists differ in length)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				89
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class TransformGroup
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				89
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class TransformGroup
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				90
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class Transform3D
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				90
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class Transform3D
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				94
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable t3dccol
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				99
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class TransformGroup
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				99
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class TransformGroup
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				100
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class Transform3D
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				100
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class Transform3D
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				103
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable tgcyl1
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				105
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class Appearance
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				105
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class Appearance
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				106
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class ColoringAttributes
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				108
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class TransformGroup
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				108
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class TransformGroup
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				109
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class Transform3D
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				109
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class Transform3D
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				115
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class Shape3D
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				115
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class Shape3D
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				119
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable box1
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				120
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable box2
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				127
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable planes
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				3209187
			</iTime>
			<fName>
				Population.java
			</fName>
			<fSize>
				4814.0
			</fSize>
			<fData>
/**
*   Title: Population.java
*   Description: A collection of various objects for display in a 3D envirionment
*   Date: January 26, 2015
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import com.sun.j3d.utils.geometry.*;
import javax.vecmath.*;
import javax.media.j3d.*;

public class Population
{
    private Population () {
        // create various inclined planes
        QuadArray qa = new QuadArray(12, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-0.5, 0.1f, 0.5f));
        qa.setCoordinate(1, new Point3f(0.5f, 0.1f, 0.5f));
        qa.setCoordinate(2, new Point3f(0.5f, 0.1f, -0.5f));
        qa.setCoordinate(3, new Point3f(-0.5f, 0.1f, -0.5f));
        
        qa.setCoordinate(4, new Point3f(8f, 3f, -13f));
        qa.setCoordinate(5, new Point3f(10f, 3f, -13f));
        qa.setCoordinate(6, new Point3f(10f, 10f, -15f));
        qa.setCoordinate(7, new Point3f(8f, 10f, -15f));
        
        qa.setCoordinate(8, new Point3f(-3, 4f, 12f));
        qa.setCoordinate(9, new Point3f(-6f, 3f, 9f));
        qa.setCoordinate(10, new Point3f(-3f, 1f, 6f));
        qa.setCoordinate(11, new Point3f(-1f, 0.5f, 9f));
        
        
        
        // create sphere objects
        Sphere sph1 = new Sphere();  // defalut sphere radius 1
        TransformGroup tgSphere1 = new TransformGroup();
        Transform3D t3dSphere1 = new Transform3D();
        t3dSphere1.setTranslation(new Vector3f(-14.005f, 5f, 5f));
        tgSphere1.setTransform(t3dSphere1);
        tgSphere1.addChild(sph1);
        
        Appearance appsph2 = new Appearance();
        appsph2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 0f), 1));
        Sphere sph2 = new Sphere(1.5f, sph2app);  // sphere radius 1.5, colour red
        TransformGroup tgSphere2 = new TransformGroup();
        Transform3D t3dSphere2 = new Transform3D();
        t3dSphere2.setTranslation(new Vector3f(5f, 5f, 10f));
        tgSphere2.setTransform(t3dSphere2);
        tgSphere2.addChild(sph2);
        
        // create cube objects
        Box cube1 = new Box();  // default box with side length of 2
        TransformGroup tgc1 = new TransformGroup();
        Transform3D t3dc1 = new Transform3D();
        t3dc1.setTranslation(new Vector3f(10f, 2f, 10f));
        tgc1.setTranslation(t3dc1);
        tgc1.addChild(cube1);
        
        Appearance appc2 = new Appearance();
        appc2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 0f), 1));
        Box cube2 = new Box(3f, 3f, 3f);  // box with side length 3, color green
        TransformGroup tgc2 = new TransformGroup();
        Transform3D t3dc2 = new Transform3D();
        t3dc2.setTranslation(new Vector3f(-7f, 10f, -12f));
        tgc2.setTranslation(t3dc2);
        tgc2.addChild(cube2);
        
        // create column objects
        Appearance appcol = new Appearance();
        appcol.setColoringAttributes(new ColoringAttributes(new Color3f(0f, 1f, 1f), 1));
        Box column = new Box(1f, 4f, 1f);  // rectangular column with specified dimensions, color cyan
        TransformGroup tgcol = new TransformGroup();
        Transform3D t3dcol = new Transform3D();
        t3dcol.setTranslation(new Vector3f(-7f, 10f, -12f));
        t3dcol.rotX(Math.PI/4);
        t3dcol.rotY(Math.PI/6);
        tgcol.setTranslation(t3dccol);
        tgcol.addChild(column);
        
        // create pole objects
        Cylinder cyl1 = new Cylinder();  // default cylinder radius 1, height 2
        TransformGroup tgccyl1 = new TransformGroup();
        Transform3D t3dcyl1 = new Transform3D();
        t3dcyl1.setTranslation(new Vector3f(9f, 1f, 0f));
        tgccyl1.setTranslation(t3dcyl1);
        tgcyl1.addChild(cyl1);
        
        Appearance appcyl2 = new Appearance();
        appcyl2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 1f), 1));
        Cylinder cyl2 = new Cylinder(1.5f, 7f);  // cylinder with specified dimensions, color magenta
        TransformGroup tgcyl2 = new TransformGroup();
        Transform3D t3dcyl2 = new Transform3D();
        t3dcyl2.setTranslation(new Vector3f(6f, 6f, -6f));
        t3dcyl2.rotZ(Math.PI/2);
        tgcyl2.setTranslation(t3dcyl2);
        tgcyl2.addChild(cyl2);
        
        Shape3D planes = new Shape3D();
        planes.setGeometry(qa);
        planes.setGeometry(sph1);
        planes.setGeometry(sph2);
        planes.setGeometry(box1);
        planes.setGeometry(box2);
        planes.setGeometry(column);
        planes.setGeometry(cyl1);
        planes.setGeometry(cyl2);
    }
    
    public Shape3D getShapes () {
        return planes;
    }
}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				35
			<iErrLine>
			<iErrMessage>
				no suitable constructor found for Point3f(double,float,float)
    constructor javax.vecmath.Point3f.Point3f() is not applicable
      (actual and formal argument lists differ in length)
    constructor javax.vecmath.Point3f.Point3f(javax.vecmath.Tuple3d) is not applicable
      (actual and formal argument lists differ in length)
    constructor javax.vecmath.Point3f.Point3f(javax.vecmath.Tuple3f) is not applicable
      (actual and formal argument lists differ in length)
    constructor javax.vecmath.Point3f.Point3f(javax.vecmath.Point3d) is not applicable
      (actual and formal argument lists differ in length)
    constructor javax.vecmath.Point3f.Point3f(javax.vecmath.Point3f) is not applicable
      (actual and formal argument lists differ in length)
    constructor javax.vecmath.Point3f.Point3f(float[]) is not applicable
      (actual and formal argument lists differ in length)
    constructor javax.vecmath.Point3f.Point3f(float,float,float) is not applicable
      (actual argument double cannot be converted to float by method invocation conversion)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				62
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable sph2app
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				74
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   method setTranslation(javax.media.j3d.Transform3D)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				79
			<iErrLine>
			<iErrMessage>
				no suitable constructor found for Box(float,float,float)
    constructor com.sun.j3d.utils.geometry.Box.Box(float,float,float,int,javax.media.j3d.Appearance) is not applicable
      (actual and formal argument lists differ in length)
    constructor com.sun.j3d.utils.geometry.Box.Box(float,float,float,int,javax.media.j3d.Appearance,int) is not applicable
      (actual and formal argument lists differ in length)
    constructor com.sun.j3d.utils.geometry.Box.Box(float,float,float,javax.media.j3d.Appearance) is not applicable
      (actual and formal argument lists differ in length)
    constructor com.sun.j3d.utils.geometry.Box.Box() is not applicable
      (actual and formal argument lists differ in length)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				83
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   method setTranslation(javax.media.j3d.Transform3D)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				89
			<iErrLine>
			<iErrMessage>
				no suitable constructor found for Box(float,float,float)
    constructor com.sun.j3d.utils.geometry.Box.Box(float,float,float,int,javax.media.j3d.Appearance) is not applicable
      (actual and formal argument lists differ in length)
    constructor com.sun.j3d.utils.geometry.Box.Box(float,float,float,int,javax.media.j3d.Appearance,int) is not applicable
      (actual and formal argument lists differ in length)
    constructor com.sun.j3d.utils.geometry.Box.Box(float,float,float,javax.media.j3d.Appearance) is not applicable
      (actual and formal argument lists differ in length)
    constructor com.sun.j3d.utils.geometry.Box.Box() is not applicable
      (actual and formal argument lists differ in length)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				95
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable t3dccol
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				103
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   method setTranslation(javax.media.j3d.Transform3D)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				104
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable tgcyl1
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				113
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   method setTranslation(javax.media.j3d.Transform3D)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				118
			<iErrLine>
			<iErrMessage>
				no suitable method found for setGeometry(com.sun.j3d.utils.geometry.Sphere)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry,int) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry) is not applicable
      (actual argument com.sun.j3d.utils.geometry.Sphere cannot be converted to javax.media.j3d.Geometry by method invocation conversion)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				119
			<iErrLine>
			<iErrMessage>
				no suitable method found for setGeometry(com.sun.j3d.utils.geometry.Sphere)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry,int) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry) is not applicable
      (actual argument com.sun.j3d.utils.geometry.Sphere cannot be converted to javax.media.j3d.Geometry by method invocation conversion)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				120
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable box1
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				121
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable box2
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				122
			<iErrLine>
			<iErrMessage>
				no suitable method found for setGeometry(com.sun.j3d.utils.geometry.Box)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry,int) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry) is not applicable
      (actual argument com.sun.j3d.utils.geometry.Box cannot be converted to javax.media.j3d.Geometry by method invocation conversion)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				123
			<iErrLine>
			<iErrMessage>
				no suitable method found for setGeometry(com.sun.j3d.utils.geometry.Cylinder)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry,int) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry) is not applicable
      (actual argument com.sun.j3d.utils.geometry.Cylinder cannot be converted to javax.media.j3d.Geometry by method invocation conversion)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				124
			<iErrLine>
			<iErrMessage>
				no suitable method found for setGeometry(com.sun.j3d.utils.geometry.Cylinder)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry,int) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry) is not applicable
      (actual argument com.sun.j3d.utils.geometry.Cylinder cannot be converted to javax.media.j3d.Geometry by method invocation conversion)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				128
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable planes
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				3219406
			</iTime>
			<fName>
				Population.java
			</fName>
			<fSize>
				4815.0
			</fSize>
			<fData>
/**
*   Title: Population.java
*   Description: A collection of various objects for display in a 3D envirionment
*   Date: January 26, 2015
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import com.sun.j3d.utils.geometry.*;
import javax.vecmath.*;
import javax.media.j3d.*;

public class Population
{
    private Population () {
        // create various inclined planes
        QuadArray qa = new QuadArray(12, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-0.5f, 0.1f, 0.5f));
        qa.setCoordinate(1, new Point3f(0.5f, 0.1f, 0.5f));
        qa.setCoordinate(2, new Point3f(0.5f, 0.1f, -0.5f));
        qa.setCoordinate(3, new Point3f(-0.5f, 0.1f, -0.5f));
        
        qa.setCoordinate(4, new Point3f(8f, 3f, -13f));
        qa.setCoordinate(5, new Point3f(10f, 3f, -13f));
        qa.setCoordinate(6, new Point3f(10f, 10f, -15f));
        qa.setCoordinate(7, new Point3f(8f, 10f, -15f));
        
        qa.setCoordinate(8, new Point3f(-3, 4f, 12f));
        qa.setCoordinate(9, new Point3f(-6f, 3f, 9f));
        qa.setCoordinate(10, new Point3f(-3f, 1f, 6f));
        qa.setCoordinate(11, new Point3f(-1f, 0.5f, 9f));
        
        
        
        // create sphere objects
        Sphere sph1 = new Sphere();  // defalut sphere radius 1
        TransformGroup tgSphere1 = new TransformGroup();
        Transform3D t3dSphere1 = new Transform3D();
        t3dSphere1.setTranslation(new Vector3f(-14.005f, 5f, 5f));
        tgSphere1.setTransform(t3dSphere1);
        tgSphere1.addChild(sph1);
        
        Appearance appsph2 = new Appearance();
        appsph2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 0f), 1));
        Sphere sph2 = new Sphere(1.5f, sph2app);  // sphere radius 1.5, colour red
        TransformGroup tgSphere2 = new TransformGroup();
        Transform3D t3dSphere2 = new Transform3D();
        t3dSphere2.setTranslation(new Vector3f(5f, 5f, 10f));
        tgSphere2.setTransform(t3dSphere2);
        tgSphere2.addChild(sph2);
        
        // create cube objects
        Box cube1 = new Box();  // default box with side length of 2
        TransformGroup tgc1 = new TransformGroup();
        Transform3D t3dc1 = new Transform3D();
        t3dc1.setTranslation(new Vector3f(10f, 2f, 10f));
        tgc1.setTranslation(t3dc1);
        tgc1.addChild(cube1);
        
        Appearance appc2 = new Appearance();
        appc2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 0f), 1));
        Box cube2 = new Box(3f, 3f, 3f);  // box with side length 3, color green
        TransformGroup tgc2 = new TransformGroup();
        Transform3D t3dc2 = new Transform3D();
        t3dc2.setTranslation(new Vector3f(-7f, 10f, -12f));
        tgc2.setTranslation(t3dc2);
        tgc2.addChild(cube2);
        
        // create column objects
        Appearance appcol = new Appearance();
        appcol.setColoringAttributes(new ColoringAttributes(new Color3f(0f, 1f, 1f), 1));
        Box column = new Box(1f, 4f, 1f);  // rectangular column with specified dimensions, color cyan
        TransformGroup tgcol = new TransformGroup();
        Transform3D t3dcol = new Transform3D();
        t3dcol.setTranslation(new Vector3f(-7f, 10f, -12f));
        t3dcol.rotX(Math.PI/4);
        t3dcol.rotY(Math.PI/6);
        tgcol.setTranslation(t3dccol);
        tgcol.addChild(column);
        
        // create pole objects
        Cylinder cyl1 = new Cylinder();  // default cylinder radius 1, height 2
        TransformGroup tgccyl1 = new TransformGroup();
        Transform3D t3dcyl1 = new Transform3D();
        t3dcyl1.setTranslation(new Vector3f(9f, 1f, 0f));
        tgccyl1.setTranslation(t3dcyl1);
        tgcyl1.addChild(cyl1);
        
        Appearance appcyl2 = new Appearance();
        appcyl2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 1f), 1));
        Cylinder cyl2 = new Cylinder(1.5f, 7f);  // cylinder with specified dimensions, color magenta
        TransformGroup tgcyl2 = new TransformGroup();
        Transform3D t3dcyl2 = new Transform3D();
        t3dcyl2.setTranslation(new Vector3f(6f, 6f, -6f));
        t3dcyl2.rotZ(Math.PI/2);
        tgcyl2.setTranslation(t3dcyl2);
        tgcyl2.addChild(cyl2);
        
        Shape3D planes = new Shape3D();
        planes.setGeometry(qa);
        planes.setGeometry(sph1);
        planes.setGeometry(sph2);
        planes.setGeometry(box1);
        planes.setGeometry(box2);
        planes.setGeometry(column);
        planes.setGeometry(cyl1);
        planes.setGeometry(cyl2);
    }
    
    public Shape3D getShapes () {
        return planes;
    }
}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				62
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable sph2app
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				74
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   method setTranslation(javax.media.j3d.Transform3D)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				79
			<iErrLine>
			<iErrMessage>
				no suitable constructor found for Box(float,float,float)
    constructor com.sun.j3d.utils.geometry.Box.Box(float,float,float,int,javax.media.j3d.Appearance) is not applicable
      (actual and formal argument lists differ in length)
    constructor com.sun.j3d.utils.geometry.Box.Box(float,float,float,int,javax.media.j3d.Appearance,int) is not applicable
      (actual and formal argument lists differ in length)
    constructor com.sun.j3d.utils.geometry.Box.Box(float,float,float,javax.media.j3d.Appearance) is not applicable
      (actual and formal argument lists differ in length)
    constructor com.sun.j3d.utils.geometry.Box.Box() is not applicable
      (actual and formal argument lists differ in length)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				83
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   method setTranslation(javax.media.j3d.Transform3D)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				89
			<iErrLine>
			<iErrMessage>
				no suitable constructor found for Box(float,float,float)
    constructor com.sun.j3d.utils.geometry.Box.Box(float,float,float,int,javax.media.j3d.Appearance) is not applicable
      (actual and formal argument lists differ in length)
    constructor com.sun.j3d.utils.geometry.Box.Box(float,float,float,int,javax.media.j3d.Appearance,int) is not applicable
      (actual and formal argument lists differ in length)
    constructor com.sun.j3d.utils.geometry.Box.Box(float,float,float,javax.media.j3d.Appearance) is not applicable
      (actual and formal argument lists differ in length)
    constructor com.sun.j3d.utils.geometry.Box.Box() is not applicable
      (actual and formal argument lists differ in length)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				95
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable t3dccol
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				103
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   method setTranslation(javax.media.j3d.Transform3D)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				104
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable tgcyl1
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				113
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   method setTranslation(javax.media.j3d.Transform3D)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				118
			<iErrLine>
			<iErrMessage>
				no suitable method found for setGeometry(com.sun.j3d.utils.geometry.Sphere)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry,int) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry) is not applicable
      (actual argument com.sun.j3d.utils.geometry.Sphere cannot be converted to javax.media.j3d.Geometry by method invocation conversion)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				119
			<iErrLine>
			<iErrMessage>
				no suitable method found for setGeometry(com.sun.j3d.utils.geometry.Sphere)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry,int) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry) is not applicable
      (actual argument com.sun.j3d.utils.geometry.Sphere cannot be converted to javax.media.j3d.Geometry by method invocation conversion)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				120
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable box1
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				121
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable box2
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				122
			<iErrLine>
			<iErrMessage>
				no suitable method found for setGeometry(com.sun.j3d.utils.geometry.Box)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry,int) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry) is not applicable
      (actual argument com.sun.j3d.utils.geometry.Box cannot be converted to javax.media.j3d.Geometry by method invocation conversion)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				123
			<iErrLine>
			<iErrMessage>
				no suitable method found for setGeometry(com.sun.j3d.utils.geometry.Cylinder)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry,int) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry) is not applicable
      (actual argument com.sun.j3d.utils.geometry.Cylinder cannot be converted to javax.media.j3d.Geometry by method invocation conversion)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				124
			<iErrLine>
			<iErrMessage>
				no suitable method found for setGeometry(com.sun.j3d.utils.geometry.Cylinder)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry,int) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry) is not applicable
      (actual argument com.sun.j3d.utils.geometry.Cylinder cannot be converted to javax.media.j3d.Geometry by method invocation conversion)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				128
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable planes
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				3234828
			</iTime>
			<fName>
				Population.java
			</fName>
			<fSize>
				4815.0
			</fSize>
			<fData>
/**
*   Title: Population.java
*   Description: A collection of various objects for display in a 3D envirionment
*   Date: January 26, 2015
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import com.sun.j3d.utils.geometry.*;
import javax.vecmath.*;
import javax.media.j3d.*;

public class Population
{
    private Population () {
        // create various inclined planes
        QuadArray qa = new QuadArray(12, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-0.5f, 0.1f, 0.5f));
        qa.setCoordinate(1, new Point3f(0.5f, 0.1f, 0.5f));
        qa.setCoordinate(2, new Point3f(0.5f, 0.1f, -0.5f));
        qa.setCoordinate(3, new Point3f(-0.5f, 0.1f, -0.5f));
        
        qa.setCoordinate(4, new Point3f(8f, 3f, -13f));
        qa.setCoordinate(5, new Point3f(10f, 3f, -13f));
        qa.setCoordinate(6, new Point3f(10f, 10f, -15f));
        qa.setCoordinate(7, new Point3f(8f, 10f, -15f));
        
        qa.setCoordinate(8, new Point3f(-3, 4f, 12f));
        qa.setCoordinate(9, new Point3f(-6f, 3f, 9f));
        qa.setCoordinate(10, new Point3f(-3f, 1f, 6f));
        qa.setCoordinate(11, new Point3f(-1f, 0.5f, 9f));
        
        
        
        // create sphere objects
        Sphere sph1 = new Sphere();  // defalut sphere radius 1
        TransformGroup tgSphere1 = new TransformGroup();
        Transform3D t3dSphere1 = new Transform3D();
        t3dSphere1.setTranslation(new Vector3f(-14.005f, 5f, 5f));
        tgSphere1.setTransform(t3dSphere1);
        tgSphere1.addChild(sph1);
        
        Appearance appsph2 = new Appearance();
        appsph2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 0f), 1));
        Sphere sph2 = new Sphere(1.5f, appsph2);  // sphere radius 1.5, colour red
        TransformGroup tgSphere2 = new TransformGroup();
        Transform3D t3dSphere2 = new Transform3D();
        t3dSphere2.setTranslation(new Vector3f(5f, 5f, 10f));
        tgSphere2.setTransform(t3dSphere2);
        tgSphere2.addChild(sph2);
        
        // create cube objects
        Box cube1 = new Box();  // default box with side length of 2
        TransformGroup tgc1 = new TransformGroup();
        Transform3D t3dc1 = new Transform3D();
        t3dc1.setTranslation(new Vector3f(10f, 2f, 10f));
        tgc1.setTranslation(t3dc1);
        tgc1.addChild(cube1);
        
        Appearance appc2 = new Appearance();
        appc2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 0f), 1));
        Box cube2 = new Box(3f, 3f, 3f);  // box with side length 3, color green
        TransformGroup tgc2 = new TransformGroup();
        Transform3D t3dc2 = new Transform3D();
        t3dc2.setTranslation(new Vector3f(-7f, 10f, -12f));
        tgc2.setTranslation(t3dc2);
        tgc2.addChild(cube2);
        
        // create column objects
        Appearance appcol = new Appearance();
        appcol.setColoringAttributes(new ColoringAttributes(new Color3f(0f, 1f, 1f), 1));
        Box column = new Box(1f, 4f, 1f);  // rectangular column with specified dimensions, color cyan
        TransformGroup tgcol = new TransformGroup();
        Transform3D t3dcol = new Transform3D();
        t3dcol.setTranslation(new Vector3f(-7f, 10f, -12f));
        t3dcol.rotX(Math.PI/4);
        t3dcol.rotY(Math.PI/6);
        tgcol.setTranslation(t3dccol);
        tgcol.addChild(column);
        
        // create pole objects
        Cylinder cyl1 = new Cylinder();  // default cylinder radius 1, height 2
        TransformGroup tgccyl1 = new TransformGroup();
        Transform3D t3dcyl1 = new Transform3D();
        t3dcyl1.setTranslation(new Vector3f(9f, 1f, 0f));
        tgccyl1.setTranslation(t3dcyl1);
        tgcyl1.addChild(cyl1);
        
        Appearance appcyl2 = new Appearance();
        appcyl2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 1f), 1));
        Cylinder cyl2 = new Cylinder(1.5f, 7f);  // cylinder with specified dimensions, color magenta
        TransformGroup tgcyl2 = new TransformGroup();
        Transform3D t3dcyl2 = new Transform3D();
        t3dcyl2.setTranslation(new Vector3f(6f, 6f, -6f));
        t3dcyl2.rotZ(Math.PI/2);
        tgcyl2.setTranslation(t3dcyl2);
        tgcyl2.addChild(cyl2);
        
        Shape3D planes = new Shape3D();
        planes.setGeometry(qa);
        planes.setGeometry(sph1);
        planes.setGeometry(sph2);
        planes.setGeometry(box1);
        planes.setGeometry(box2);
        planes.setGeometry(column);
        planes.setGeometry(cyl1);
        planes.setGeometry(cyl2);
    }
    
    public Shape3D getShapes () {
        return planes;
    }
}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				74
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   method setTranslation(javax.media.j3d.Transform3D)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				79
			<iErrLine>
			<iErrMessage>
				no suitable constructor found for Box(float,float,float)
    constructor com.sun.j3d.utils.geometry.Box.Box(float,float,float,int,javax.media.j3d.Appearance) is not applicable
      (actual and formal argument lists differ in length)
    constructor com.sun.j3d.utils.geometry.Box.Box(float,float,float,int,javax.media.j3d.Appearance,int) is not applicable
      (actual and formal argument lists differ in length)
    constructor com.sun.j3d.utils.geometry.Box.Box(float,float,float,javax.media.j3d.Appearance) is not applicable
      (actual and formal argument lists differ in length)
    constructor com.sun.j3d.utils.geometry.Box.Box() is not applicable
      (actual and formal argument lists differ in length)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				83
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   method setTranslation(javax.media.j3d.Transform3D)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				89
			<iErrLine>
			<iErrMessage>
				no suitable constructor found for Box(float,float,float)
    constructor com.sun.j3d.utils.geometry.Box.Box(float,float,float,int,javax.media.j3d.Appearance) is not applicable
      (actual and formal argument lists differ in length)
    constructor com.sun.j3d.utils.geometry.Box.Box(float,float,float,int,javax.media.j3d.Appearance,int) is not applicable
      (actual and formal argument lists differ in length)
    constructor com.sun.j3d.utils.geometry.Box.Box(float,float,float,javax.media.j3d.Appearance) is not applicable
      (actual and formal argument lists differ in length)
    constructor com.sun.j3d.utils.geometry.Box.Box() is not applicable
      (actual and formal argument lists differ in length)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				95
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable t3dccol
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				103
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   method setTranslation(javax.media.j3d.Transform3D)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				104
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable tgcyl1
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				113
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   method setTranslation(javax.media.j3d.Transform3D)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				118
			<iErrLine>
			<iErrMessage>
				no suitable method found for setGeometry(com.sun.j3d.utils.geometry.Sphere)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry,int) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry) is not applicable
      (actual argument com.sun.j3d.utils.geometry.Sphere cannot be converted to javax.media.j3d.Geometry by method invocation conversion)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				119
			<iErrLine>
			<iErrMessage>
				no suitable method found for setGeometry(com.sun.j3d.utils.geometry.Sphere)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry,int) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry) is not applicable
      (actual argument com.sun.j3d.utils.geometry.Sphere cannot be converted to javax.media.j3d.Geometry by method invocation conversion)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				120
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable box1
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				121
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable box2
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				122
			<iErrLine>
			<iErrMessage>
				no suitable method found for setGeometry(com.sun.j3d.utils.geometry.Box)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry,int) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry) is not applicable
      (actual argument com.sun.j3d.utils.geometry.Box cannot be converted to javax.media.j3d.Geometry by method invocation conversion)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				123
			<iErrLine>
			<iErrMessage>
				no suitable method found for setGeometry(com.sun.j3d.utils.geometry.Cylinder)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry,int) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry) is not applicable
      (actual argument com.sun.j3d.utils.geometry.Cylinder cannot be converted to javax.media.j3d.Geometry by method invocation conversion)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				124
			<iErrLine>
			<iErrMessage>
				no suitable method found for setGeometry(com.sun.j3d.utils.geometry.Cylinder)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry,int) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry) is not applicable
      (actual argument com.sun.j3d.utils.geometry.Cylinder cannot be converted to javax.media.j3d.Geometry by method invocation conversion)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				128
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable planes
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				3255328
			</iTime>
			<fName>
				Population.java
			</fName>
			<fSize>
				4813.0
			</fSize>
			<fData>
/**
*   Title: Population.java
*   Description: A collection of various objects for display in a 3D envirionment
*   Date: January 26, 2015
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import com.sun.j3d.utils.geometry.*;
import javax.vecmath.*;
import javax.media.j3d.*;

public class Population
{
    private Population () {
        // create various inclined planes
        QuadArray qa = new QuadArray(12, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-0.5f, 0.1f, 0.5f));
        qa.setCoordinate(1, new Point3f(0.5f, 0.1f, 0.5f));
        qa.setCoordinate(2, new Point3f(0.5f, 0.1f, -0.5f));
        qa.setCoordinate(3, new Point3f(-0.5f, 0.1f, -0.5f));
        
        qa.setCoordinate(4, new Point3f(8f, 3f, -13f));
        qa.setCoordinate(5, new Point3f(10f, 3f, -13f));
        qa.setCoordinate(6, new Point3f(10f, 10f, -15f));
        qa.setCoordinate(7, new Point3f(8f, 10f, -15f));
        
        qa.setCoordinate(8, new Point3f(-3, 4f, 12f));
        qa.setCoordinate(9, new Point3f(-6f, 3f, 9f));
        qa.setCoordinate(10, new Point3f(-3f, 1f, 6f));
        qa.setCoordinate(11, new Point3f(-1f, 0.5f, 9f));
        
        
        
        // create sphere objects
        Sphere sph1 = new Sphere();  // defalut sphere radius 1
        TransformGroup tgSphere1 = new TransformGroup();
        Transform3D t3dSphere1 = new Transform3D();
        t3dSphere1.setTranslation(new Vector3f(-14.005f, 5f, 5f));
        tgSphere1.setTransform(t3dSphere1);
        tgSphere1.addChild(sph1);
        
        Appearance appsph2 = new Appearance();
        appsph2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 0f), 1));
        Sphere sph2 = new Sphere(1.5f, appsph2);  // sphere radius 1.5, colour red
        TransformGroup tgSphere2 = new TransformGroup();
        Transform3D t3dSphere2 = new Transform3D();
        t3dSphere2.setTranslation(new Vector3f(5f, 5f, 10f));
        tgSphere2.setTransform(t3dSphere2);
        tgSphere2.addChild(sph2);
        
        // create cube objects
        Box cube1 = new Box();  // default box with side length of 2
        TransformGroup tgc1 = new TransformGroup();
        Transform3D t3dc1 = new Transform3D();
        t3dc1.setTranslation(new Vector3f(10f, 2f, 10f));
        tgc1.setTransform(t3dc1);
        tgc1.addChild(cube1);
        
        Appearance appc2 = new Appearance();
        appc2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 0f), 1));
        Box cube2 = new Box(3f, 3f, 3f);  // box with side length 3, color green
        TransformGroup tgc2 = new TransformGroup();
        Transform3D t3dc2 = new Transform3D();
        t3dc2.setTranslation(new Vector3f(-7f, 10f, -12f));
        tgc2.setTranslation(t3dc2);
        tgc2.addChild(cube2);
        
        // create column objects
        Appearance appcol = new Appearance();
        appcol.setColoringAttributes(new ColoringAttributes(new Color3f(0f, 1f, 1f), 1));
        Box column = new Box(1f, 4f, 1f);  // rectangular column with specified dimensions, color cyan
        TransformGroup tgcol = new TransformGroup();
        Transform3D t3dcol = new Transform3D();
        t3dcol.setTranslation(new Vector3f(-7f, 10f, -12f));
        t3dcol.rotX(Math.PI/4);
        t3dcol.rotY(Math.PI/6);
        tgcol.setTranslation(t3dccol);
        tgcol.addChild(column);
        
        // create pole objects
        Cylinder cyl1 = new Cylinder();  // default cylinder radius 1, height 2
        TransformGroup tgccyl1 = new TransformGroup();
        Transform3D t3dcyl1 = new Transform3D();
        t3dcyl1.setTranslation(new Vector3f(9f, 1f, 0f));
        tgccyl1.setTranslation(t3dcyl1);
        tgcyl1.addChild(cyl1);
        
        Appearance appcyl2 = new Appearance();
        appcyl2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 1f), 1));
        Cylinder cyl2 = new Cylinder(1.5f, 7f);  // cylinder with specified dimensions, color magenta
        TransformGroup tgcyl2 = new TransformGroup();
        Transform3D t3dcyl2 = new Transform3D();
        t3dcyl2.setTranslation(new Vector3f(6f, 6f, -6f));
        t3dcyl2.rotZ(Math.PI/2);
        tgcyl2.setTranslation(t3dcyl2);
        tgcyl2.addChild(cyl2);
        
        Shape3D planes = new Shape3D();
        planes.setGeometry(qa);
        planes.setGeometry(sph1);
        planes.setGeometry(sph2);
        planes.setGeometry(box1);
        planes.setGeometry(box2);
        planes.setGeometry(column);
        planes.setGeometry(cyl1);
        planes.setGeometry(cyl2);
    }
    
    public Shape3D getShapes () {
        return planes;
    }
}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				79
			<iErrLine>
			<iErrMessage>
				no suitable constructor found for Box(float,float,float)
    constructor com.sun.j3d.utils.geometry.Box.Box(float,float,float,int,javax.media.j3d.Appearance) is not applicable
      (actual and formal argument lists differ in length)
    constructor com.sun.j3d.utils.geometry.Box.Box(float,float,float,int,javax.media.j3d.Appearance,int) is not applicable
      (actual and formal argument lists differ in length)
    constructor com.sun.j3d.utils.geometry.Box.Box(float,float,float,javax.media.j3d.Appearance) is not applicable
      (actual and formal argument lists differ in length)
    constructor com.sun.j3d.utils.geometry.Box.Box() is not applicable
      (actual and formal argument lists differ in length)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				83
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   method setTranslation(javax.media.j3d.Transform3D)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				89
			<iErrLine>
			<iErrMessage>
				no suitable constructor found for Box(float,float,float)
    constructor com.sun.j3d.utils.geometry.Box.Box(float,float,float,int,javax.media.j3d.Appearance) is not applicable
      (actual and formal argument lists differ in length)
    constructor com.sun.j3d.utils.geometry.Box.Box(float,float,float,int,javax.media.j3d.Appearance,int) is not applicable
      (actual and formal argument lists differ in length)
    constructor com.sun.j3d.utils.geometry.Box.Box(float,float,float,javax.media.j3d.Appearance) is not applicable
      (actual and formal argument lists differ in length)
    constructor com.sun.j3d.utils.geometry.Box.Box() is not applicable
      (actual and formal argument lists differ in length)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				95
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable t3dccol
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				103
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   method setTranslation(javax.media.j3d.Transform3D)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				104
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable tgcyl1
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				113
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   method setTranslation(javax.media.j3d.Transform3D)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				118
			<iErrLine>
			<iErrMessage>
				no suitable method found for setGeometry(com.sun.j3d.utils.geometry.Sphere)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry,int) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry) is not applicable
      (actual argument com.sun.j3d.utils.geometry.Sphere cannot be converted to javax.media.j3d.Geometry by method invocation conversion)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				119
			<iErrLine>
			<iErrMessage>
				no suitable method found for setGeometry(com.sun.j3d.utils.geometry.Sphere)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry,int) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry) is not applicable
      (actual argument com.sun.j3d.utils.geometry.Sphere cannot be converted to javax.media.j3d.Geometry by method invocation conversion)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				120
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable box1
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				121
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable box2
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				122
			<iErrLine>
			<iErrMessage>
				no suitable method found for setGeometry(com.sun.j3d.utils.geometry.Box)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry,int) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry) is not applicable
      (actual argument com.sun.j3d.utils.geometry.Box cannot be converted to javax.media.j3d.Geometry by method invocation conversion)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				123
			<iErrLine>
			<iErrMessage>
				no suitable method found for setGeometry(com.sun.j3d.utils.geometry.Cylinder)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry,int) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry) is not applicable
      (actual argument com.sun.j3d.utils.geometry.Cylinder cannot be converted to javax.media.j3d.Geometry by method invocation conversion)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				124
			<iErrLine>
			<iErrMessage>
				no suitable method found for setGeometry(com.sun.j3d.utils.geometry.Cylinder)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry,int) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry) is not applicable
      (actual argument com.sun.j3d.utils.geometry.Cylinder cannot be converted to javax.media.j3d.Geometry by method invocation conversion)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				128
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable planes
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				3273640
			</iTime>
			<fName>
				Population.java
			</fName>
			<fSize>
				4820.0
			</fSize>
			<fData>
/**
*   Title: Population.java
*   Description: A collection of various objects for display in a 3D envirionment
*   Date: January 26, 2015
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import com.sun.j3d.utils.geometry.*;
import javax.vecmath.*;
import javax.media.j3d.*;

public class Population
{
    private Population () {
        // create various inclined planes
        QuadArray qa = new QuadArray(12, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-0.5f, 0.1f, 0.5f));
        qa.setCoordinate(1, new Point3f(0.5f, 0.1f, 0.5f));
        qa.setCoordinate(2, new Point3f(0.5f, 0.1f, -0.5f));
        qa.setCoordinate(3, new Point3f(-0.5f, 0.1f, -0.5f));
        
        qa.setCoordinate(4, new Point3f(8f, 3f, -13f));
        qa.setCoordinate(5, new Point3f(10f, 3f, -13f));
        qa.setCoordinate(6, new Point3f(10f, 10f, -15f));
        qa.setCoordinate(7, new Point3f(8f, 10f, -15f));
        
        qa.setCoordinate(8, new Point3f(-3, 4f, 12f));
        qa.setCoordinate(9, new Point3f(-6f, 3f, 9f));
        qa.setCoordinate(10, new Point3f(-3f, 1f, 6f));
        qa.setCoordinate(11, new Point3f(-1f, 0.5f, 9f));
        
        
        
        // create sphere objects
        Sphere sph1 = new Sphere();  // defalut sphere radius 1
        TransformGroup tgSphere1 = new TransformGroup();
        Transform3D t3dSphere1 = new Transform3D();
        t3dSphere1.setTranslation(new Vector3f(-14.005f, 5f, 5f));
        tgSphere1.setTransform(t3dSphere1);
        tgSphere1.addChild(sph1);
        
        Appearance appsph2 = new Appearance();
        appsph2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 0f), 1));
        Sphere sph2 = new Sphere(1.5f, appsph2);  // sphere radius 1.5, colour red
        TransformGroup tgSphere2 = new TransformGroup();
        Transform3D t3dSphere2 = new Transform3D();
        t3dSphere2.setTranslation(new Vector3f(5f, 5f, 10f));
        tgSphere2.setTransform(t3dSphere2);
        tgSphere2.addChild(sph2);
        
        // create cube objects
        Box cube1 = new Box();  // default box with side length of 2
        TransformGroup tgc1 = new TransformGroup();
        Transform3D t3dc1 = new Transform3D();
        t3dc1.setTranslation(new Vector3f(10f, 2f, 10f));
        tgc1.setTransform(t3dc1);
        tgc1.addChild(cube1);
        
        Appearance appc2 = new Appearance();
        appc2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 0f), 1));
        Box cube2 = new Box(3f, 3f, 3f, appc2);  // box with side length 3, color green
        TransformGroup tgc2 = new TransformGroup();
        Transform3D t3dc2 = new Transform3D();
        t3dc2.setTranslation(new Vector3f(-7f, 10f, -12f));
        tgc2.setTranslation(t3dc2);
        tgc2.addChild(cube2);
        
        // create column objects
        Appearance appcol = new Appearance();
        appcol.setColoringAttributes(new ColoringAttributes(new Color3f(0f, 1f, 1f), 1));
        Box column = new Box(1f, 4f, 1f);  // rectangular column with specified dimensions, color cyan
        TransformGroup tgcol = new TransformGroup();
        Transform3D t3dcol = new Transform3D();
        t3dcol.setTranslation(new Vector3f(-7f, 10f, -12f));
        t3dcol.rotX(Math.PI/4);
        t3dcol.rotY(Math.PI/6);
        tgcol.setTranslation(t3dccol);
        tgcol.addChild(column);
        
        // create pole objects
        Cylinder cyl1 = new Cylinder();  // default cylinder radius 1, height 2
        TransformGroup tgccyl1 = new TransformGroup();
        Transform3D t3dcyl1 = new Transform3D();
        t3dcyl1.setTranslation(new Vector3f(9f, 1f, 0f));
        tgccyl1.setTranslation(t3dcyl1);
        tgcyl1.addChild(cyl1);
        
        Appearance appcyl2 = new Appearance();
        appcyl2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 1f), 1));
        Cylinder cyl2 = new Cylinder(1.5f, 7f);  // cylinder with specified dimensions, color magenta
        TransformGroup tgcyl2 = new TransformGroup();
        Transform3D t3dcyl2 = new Transform3D();
        t3dcyl2.setTranslation(new Vector3f(6f, 6f, -6f));
        t3dcyl2.rotZ(Math.PI/2);
        tgcyl2.setTranslation(t3dcyl2);
        tgcyl2.addChild(cyl2);
        
        Shape3D planes = new Shape3D();
        planes.setGeometry(qa);
        planes.setGeometry(sph1);
        planes.setGeometry(sph2);
        planes.setGeometry(box1);
        planes.setGeometry(box2);
        planes.setGeometry(column);
        planes.setGeometry(cyl1);
        planes.setGeometry(cyl2);
    }
    
    public Shape3D getShapes () {
        return planes;
    }
}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				83
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   method setTranslation(javax.media.j3d.Transform3D)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				89
			<iErrLine>
			<iErrMessage>
				no suitable constructor found for Box(float,float,float)
    constructor com.sun.j3d.utils.geometry.Box.Box(float,float,float,int,javax.media.j3d.Appearance) is not applicable
      (actual and formal argument lists differ in length)
    constructor com.sun.j3d.utils.geometry.Box.Box(float,float,float,int,javax.media.j3d.Appearance,int) is not applicable
      (actual and formal argument lists differ in length)
    constructor com.sun.j3d.utils.geometry.Box.Box(float,float,float,javax.media.j3d.Appearance) is not applicable
      (actual and formal argument lists differ in length)
    constructor com.sun.j3d.utils.geometry.Box.Box() is not applicable
      (actual and formal argument lists differ in length)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				95
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable t3dccol
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				103
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   method setTranslation(javax.media.j3d.Transform3D)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				104
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable tgcyl1
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				113
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   method setTranslation(javax.media.j3d.Transform3D)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				118
			<iErrLine>
			<iErrMessage>
				no suitable method found for setGeometry(com.sun.j3d.utils.geometry.Sphere)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry,int) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry) is not applicable
      (actual argument com.sun.j3d.utils.geometry.Sphere cannot be converted to javax.media.j3d.Geometry by method invocation conversion)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				119
			<iErrLine>
			<iErrMessage>
				no suitable method found for setGeometry(com.sun.j3d.utils.geometry.Sphere)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry,int) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry) is not applicable
      (actual argument com.sun.j3d.utils.geometry.Sphere cannot be converted to javax.media.j3d.Geometry by method invocation conversion)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				120
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable box1
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				121
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable box2
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				122
			<iErrLine>
			<iErrMessage>
				no suitable method found for setGeometry(com.sun.j3d.utils.geometry.Box)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry,int) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry) is not applicable
      (actual argument com.sun.j3d.utils.geometry.Box cannot be converted to javax.media.j3d.Geometry by method invocation conversion)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				123
			<iErrLine>
			<iErrMessage>
				no suitable method found for setGeometry(com.sun.j3d.utils.geometry.Cylinder)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry,int) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry) is not applicable
      (actual argument com.sun.j3d.utils.geometry.Cylinder cannot be converted to javax.media.j3d.Geometry by method invocation conversion)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				124
			<iErrLine>
			<iErrMessage>
				no suitable method found for setGeometry(com.sun.j3d.utils.geometry.Cylinder)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry,int) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry) is not applicable
      (actual argument com.sun.j3d.utils.geometry.Cylinder cannot be converted to javax.media.j3d.Geometry by method invocation conversion)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				128
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable planes
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				3281640
			</iTime>
			<fName>
				Population.java
			</fName>
			<fSize>
				4818.0
			</fSize>
			<fData>
/**
*   Title: Population.java
*   Description: A collection of various objects for display in a 3D envirionment
*   Date: January 26, 2015
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import com.sun.j3d.utils.geometry.*;
import javax.vecmath.*;
import javax.media.j3d.*;

public class Population
{
    private Population () {
        // create various inclined planes
        QuadArray qa = new QuadArray(12, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-0.5f, 0.1f, 0.5f));
        qa.setCoordinate(1, new Point3f(0.5f, 0.1f, 0.5f));
        qa.setCoordinate(2, new Point3f(0.5f, 0.1f, -0.5f));
        qa.setCoordinate(3, new Point3f(-0.5f, 0.1f, -0.5f));
        
        qa.setCoordinate(4, new Point3f(8f, 3f, -13f));
        qa.setCoordinate(5, new Point3f(10f, 3f, -13f));
        qa.setCoordinate(6, new Point3f(10f, 10f, -15f));
        qa.setCoordinate(7, new Point3f(8f, 10f, -15f));
        
        qa.setCoordinate(8, new Point3f(-3, 4f, 12f));
        qa.setCoordinate(9, new Point3f(-6f, 3f, 9f));
        qa.setCoordinate(10, new Point3f(-3f, 1f, 6f));
        qa.setCoordinate(11, new Point3f(-1f, 0.5f, 9f));
        
        
        
        // create sphere objects
        Sphere sph1 = new Sphere();  // defalut sphere radius 1
        TransformGroup tgSphere1 = new TransformGroup();
        Transform3D t3dSphere1 = new Transform3D();
        t3dSphere1.setTranslation(new Vector3f(-14.005f, 5f, 5f));
        tgSphere1.setTransform(t3dSphere1);
        tgSphere1.addChild(sph1);
        
        Appearance appsph2 = new Appearance();
        appsph2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 0f), 1));
        Sphere sph2 = new Sphere(1.5f, appsph2);  // sphere radius 1.5, colour red
        TransformGroup tgSphere2 = new TransformGroup();
        Transform3D t3dSphere2 = new Transform3D();
        t3dSphere2.setTranslation(new Vector3f(5f, 5f, 10f));
        tgSphere2.setTransform(t3dSphere2);
        tgSphere2.addChild(sph2);
        
        // create cube objects
        Box cube1 = new Box();  // default box with side length of 2
        TransformGroup tgc1 = new TransformGroup();
        Transform3D t3dc1 = new Transform3D();
        t3dc1.setTranslation(new Vector3f(10f, 2f, 10f));
        tgc1.setTransform(t3dc1);
        tgc1.addChild(cube1);
        
        Appearance appc2 = new Appearance();
        appc2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 0f), 1));
        Box cube2 = new Box(3f, 3f, 3f, appc2);  // box with side length 3, color green
        TransformGroup tgc2 = new TransformGroup();
        Transform3D t3dc2 = new Transform3D();
        t3dc2.setTranslation(new Vector3f(-7f, 10f, -12f));
        tgc2.setTransform(t3dc2);
        tgc2.addChild(cube2);
        
        // create column objects
        Appearance appcol = new Appearance();
        appcol.setColoringAttributes(new ColoringAttributes(new Color3f(0f, 1f, 1f), 1));
        Box column = new Box(1f, 4f, 1f);  // rectangular column with specified dimensions, color cyan
        TransformGroup tgcol = new TransformGroup();
        Transform3D t3dcol = new Transform3D();
        t3dcol.setTranslation(new Vector3f(-7f, 10f, -12f));
        t3dcol.rotX(Math.PI/4);
        t3dcol.rotY(Math.PI/6);
        tgcol.setTranslation(t3dccol);
        tgcol.addChild(column);
        
        // create pole objects
        Cylinder cyl1 = new Cylinder();  // default cylinder radius 1, height 2
        TransformGroup tgccyl1 = new TransformGroup();
        Transform3D t3dcyl1 = new Transform3D();
        t3dcyl1.setTranslation(new Vector3f(9f, 1f, 0f));
        tgccyl1.setTranslation(t3dcyl1);
        tgcyl1.addChild(cyl1);
        
        Appearance appcyl2 = new Appearance();
        appcyl2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 1f), 1));
        Cylinder cyl2 = new Cylinder(1.5f, 7f);  // cylinder with specified dimensions, color magenta
        TransformGroup tgcyl2 = new TransformGroup();
        Transform3D t3dcyl2 = new Transform3D();
        t3dcyl2.setTranslation(new Vector3f(6f, 6f, -6f));
        t3dcyl2.rotZ(Math.PI/2);
        tgcyl2.setTranslation(t3dcyl2);
        tgcyl2.addChild(cyl2);
        
        Shape3D planes = new Shape3D();
        planes.setGeometry(qa);
        planes.setGeometry(sph1);
        planes.setGeometry(sph2);
        planes.setGeometry(box1);
        planes.setGeometry(box2);
        planes.setGeometry(column);
        planes.setGeometry(cyl1);
        planes.setGeometry(cyl2);
    }
    
    public Shape3D getShapes () {
        return planes;
    }
}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				89
			<iErrLine>
			<iErrMessage>
				no suitable constructor found for Box(float,float,float)
    constructor com.sun.j3d.utils.geometry.Box.Box(float,float,float,int,javax.media.j3d.Appearance) is not applicable
      (actual and formal argument lists differ in length)
    constructor com.sun.j3d.utils.geometry.Box.Box(float,float,float,int,javax.media.j3d.Appearance,int) is not applicable
      (actual and formal argument lists differ in length)
    constructor com.sun.j3d.utils.geometry.Box.Box(float,float,float,javax.media.j3d.Appearance) is not applicable
      (actual and formal argument lists differ in length)
    constructor com.sun.j3d.utils.geometry.Box.Box() is not applicable
      (actual and formal argument lists differ in length)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				95
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable t3dccol
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				103
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   method setTranslation(javax.media.j3d.Transform3D)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				104
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable tgcyl1
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				113
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   method setTranslation(javax.media.j3d.Transform3D)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				118
			<iErrLine>
			<iErrMessage>
				no suitable method found for setGeometry(com.sun.j3d.utils.geometry.Sphere)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry,int) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry) is not applicable
      (actual argument com.sun.j3d.utils.geometry.Sphere cannot be converted to javax.media.j3d.Geometry by method invocation conversion)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				119
			<iErrLine>
			<iErrMessage>
				no suitable method found for setGeometry(com.sun.j3d.utils.geometry.Sphere)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry,int) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry) is not applicable
      (actual argument com.sun.j3d.utils.geometry.Sphere cannot be converted to javax.media.j3d.Geometry by method invocation conversion)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				120
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable box1
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				121
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable box2
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				122
			<iErrLine>
			<iErrMessage>
				no suitable method found for setGeometry(com.sun.j3d.utils.geometry.Box)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry,int) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry) is not applicable
      (actual argument com.sun.j3d.utils.geometry.Box cannot be converted to javax.media.j3d.Geometry by method invocation conversion)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				123
			<iErrLine>
			<iErrMessage>
				no suitable method found for setGeometry(com.sun.j3d.utils.geometry.Cylinder)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry,int) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry) is not applicable
      (actual argument com.sun.j3d.utils.geometry.Cylinder cannot be converted to javax.media.j3d.Geometry by method invocation conversion)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				124
			<iErrLine>
			<iErrMessage>
				no suitable method found for setGeometry(com.sun.j3d.utils.geometry.Cylinder)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry,int) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry) is not applicable
      (actual argument com.sun.j3d.utils.geometry.Cylinder cannot be converted to javax.media.j3d.Geometry by method invocation conversion)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				128
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable planes
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				3295109
			</iTime>
			<fName>
				Population.java
			</fName>
			<fSize>
				4826.0
			</fSize>
			<fData>
/**
*   Title: Population.java
*   Description: A collection of various objects for display in a 3D envirionment
*   Date: January 26, 2015
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import com.sun.j3d.utils.geometry.*;
import javax.vecmath.*;
import javax.media.j3d.*;

public class Population
{
    private Population () {
        // create various inclined planes
        QuadArray qa = new QuadArray(12, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-0.5f, 0.1f, 0.5f));
        qa.setCoordinate(1, new Point3f(0.5f, 0.1f, 0.5f));
        qa.setCoordinate(2, new Point3f(0.5f, 0.1f, -0.5f));
        qa.setCoordinate(3, new Point3f(-0.5f, 0.1f, -0.5f));
        
        qa.setCoordinate(4, new Point3f(8f, 3f, -13f));
        qa.setCoordinate(5, new Point3f(10f, 3f, -13f));
        qa.setCoordinate(6, new Point3f(10f, 10f, -15f));
        qa.setCoordinate(7, new Point3f(8f, 10f, -15f));
        
        qa.setCoordinate(8, new Point3f(-3, 4f, 12f));
        qa.setCoordinate(9, new Point3f(-6f, 3f, 9f));
        qa.setCoordinate(10, new Point3f(-3f, 1f, 6f));
        qa.setCoordinate(11, new Point3f(-1f, 0.5f, 9f));
        
        
        
        // create sphere objects
        Sphere sph1 = new Sphere();  // defalut sphere radius 1
        TransformGroup tgSphere1 = new TransformGroup();
        Transform3D t3dSphere1 = new Transform3D();
        t3dSphere1.setTranslation(new Vector3f(-14.005f, 5f, 5f));
        tgSphere1.setTransform(t3dSphere1);
        tgSphere1.addChild(sph1);
        
        Appearance appsph2 = new Appearance();
        appsph2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 0f), 1));
        Sphere sph2 = new Sphere(1.5f, appsph2);  // sphere radius 1.5, colour red
        TransformGroup tgSphere2 = new TransformGroup();
        Transform3D t3dSphere2 = new Transform3D();
        t3dSphere2.setTranslation(new Vector3f(5f, 5f, 10f));
        tgSphere2.setTransform(t3dSphere2);
        tgSphere2.addChild(sph2);
        
        // create cube objects
        Box cube1 = new Box();  // default box with side length of 2
        TransformGroup tgc1 = new TransformGroup();
        Transform3D t3dc1 = new Transform3D();
        t3dc1.setTranslation(new Vector3f(10f, 2f, 10f));
        tgc1.setTransform(t3dc1);
        tgc1.addChild(cube1);
        
        Appearance appc2 = new Appearance();
        appc2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 0f), 1));
        Box cube2 = new Box(3f, 3f, 3f, appc2);  // box with side length 3, color green
        TransformGroup tgc2 = new TransformGroup();
        Transform3D t3dc2 = new Transform3D();
        t3dc2.setTranslation(new Vector3f(-7f, 10f, -12f));
        tgc2.setTransform(t3dc2);
        tgc2.addChild(cube2);
        
        // create column objects
        Appearance appcol = new Appearance();
        appcol.setColoringAttributes(new ColoringAttributes(new Color3f(0f, 1f, 1f), 1));
        Box column = new Box(1f, 4f, 1f, appcol);  // rectangular column with specified dimensions, color cyan
        TransformGroup tgcol = new TransformGroup();
        Transform3D t3dcol = new Transform3D();
        t3dcol.setTranslation(new Vector3f(-7f, 10f, -12f));
        t3dcol.rotX(Math.PI/4);
        t3dcol.rotY(Math.PI/6);
        tgcol.setTranslation(t3dccol);
        tgcol.addChild(column);
        
        // create pole objects
        Cylinder cyl1 = new Cylinder();  // default cylinder radius 1, height 2
        TransformGroup tgccyl1 = new TransformGroup();
        Transform3D t3dcyl1 = new Transform3D();
        t3dcyl1.setTranslation(new Vector3f(9f, 1f, 0f));
        tgccyl1.setTranslation(t3dcyl1);
        tgcyl1.addChild(cyl1);
        
        Appearance appcyl2 = new Appearance();
        appcyl2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 1f), 1));
        Cylinder cyl2 = new Cylinder(1.5f, 7f);  // cylinder with specified dimensions, color magenta
        TransformGroup tgcyl2 = new TransformGroup();
        Transform3D t3dcyl2 = new Transform3D();
        t3dcyl2.setTranslation(new Vector3f(6f, 6f, -6f));
        t3dcyl2.rotZ(Math.PI/2);
        tgcyl2.setTranslation(t3dcyl2);
        tgcyl2.addChild(cyl2);
        
        Shape3D planes = new Shape3D();
        planes.setGeometry(qa);
        planes.setGeometry(sph1);
        planes.setGeometry(sph2);
        planes.setGeometry(box1);
        planes.setGeometry(box2);
        planes.setGeometry(column);
        planes.setGeometry(cyl1);
        planes.setGeometry(cyl2);
    }
    
    public Shape3D getShapes () {
        return planes;
    }
}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				95
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable t3dccol
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				103
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   method setTranslation(javax.media.j3d.Transform3D)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				104
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable tgcyl1
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				113
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   method setTranslation(javax.media.j3d.Transform3D)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				118
			<iErrLine>
			<iErrMessage>
				no suitable method found for setGeometry(com.sun.j3d.utils.geometry.Sphere)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry,int) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry) is not applicable
      (actual argument com.sun.j3d.utils.geometry.Sphere cannot be converted to javax.media.j3d.Geometry by method invocation conversion)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				119
			<iErrLine>
			<iErrMessage>
				no suitable method found for setGeometry(com.sun.j3d.utils.geometry.Sphere)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry,int) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry) is not applicable
      (actual argument com.sun.j3d.utils.geometry.Sphere cannot be converted to javax.media.j3d.Geometry by method invocation conversion)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				120
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable box1
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				121
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable box2
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				122
			<iErrLine>
			<iErrMessage>
				no suitable method found for setGeometry(com.sun.j3d.utils.geometry.Box)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry,int) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry) is not applicable
      (actual argument com.sun.j3d.utils.geometry.Box cannot be converted to javax.media.j3d.Geometry by method invocation conversion)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				123
			<iErrLine>
			<iErrMessage>
				no suitable method found for setGeometry(com.sun.j3d.utils.geometry.Cylinder)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry,int) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry) is not applicable
      (actual argument com.sun.j3d.utils.geometry.Cylinder cannot be converted to javax.media.j3d.Geometry by method invocation conversion)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				124
			<iErrLine>
			<iErrMessage>
				no suitable method found for setGeometry(com.sun.j3d.utils.geometry.Cylinder)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry,int) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry) is not applicable
      (actual argument com.sun.j3d.utils.geometry.Cylinder cannot be converted to javax.media.j3d.Geometry by method invocation conversion)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				128
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable planes
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				3305875
			</iTime>
			<fName>
				Population.java
			</fName>
			<fSize>
				4825.0
			</fSize>
			<fData>
/**
*   Title: Population.java
*   Description: A collection of various objects for display in a 3D envirionment
*   Date: January 26, 2015
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import com.sun.j3d.utils.geometry.*;
import javax.vecmath.*;
import javax.media.j3d.*;

public class Population
{
    private Population () {
        // create various inclined planes
        QuadArray qa = new QuadArray(12, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-0.5f, 0.1f, 0.5f));
        qa.setCoordinate(1, new Point3f(0.5f, 0.1f, 0.5f));
        qa.setCoordinate(2, new Point3f(0.5f, 0.1f, -0.5f));
        qa.setCoordinate(3, new Point3f(-0.5f, 0.1f, -0.5f));
        
        qa.setCoordinate(4, new Point3f(8f, 3f, -13f));
        qa.setCoordinate(5, new Point3f(10f, 3f, -13f));
        qa.setCoordinate(6, new Point3f(10f, 10f, -15f));
        qa.setCoordinate(7, new Point3f(8f, 10f, -15f));
        
        qa.setCoordinate(8, new Point3f(-3, 4f, 12f));
        qa.setCoordinate(9, new Point3f(-6f, 3f, 9f));
        qa.setCoordinate(10, new Point3f(-3f, 1f, 6f));
        qa.setCoordinate(11, new Point3f(-1f, 0.5f, 9f));
        
        
        
        // create sphere objects
        Sphere sph1 = new Sphere();  // defalut sphere radius 1
        TransformGroup tgSphere1 = new TransformGroup();
        Transform3D t3dSphere1 = new Transform3D();
        t3dSphere1.setTranslation(new Vector3f(-14.005f, 5f, 5f));
        tgSphere1.setTransform(t3dSphere1);
        tgSphere1.addChild(sph1);
        
        Appearance appsph2 = new Appearance();
        appsph2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 0f), 1));
        Sphere sph2 = new Sphere(1.5f, appsph2);  // sphere radius 1.5, colour red
        TransformGroup tgSphere2 = new TransformGroup();
        Transform3D t3dSphere2 = new Transform3D();
        t3dSphere2.setTranslation(new Vector3f(5f, 5f, 10f));
        tgSphere2.setTransform(t3dSphere2);
        tgSphere2.addChild(sph2);
        
        // create cube objects
        Box cube1 = new Box();  // default box with side length of 2
        TransformGroup tgc1 = new TransformGroup();
        Transform3D t3dc1 = new Transform3D();
        t3dc1.setTranslation(new Vector3f(10f, 2f, 10f));
        tgc1.setTransform(t3dc1);
        tgc1.addChild(cube1);
        
        Appearance appc2 = new Appearance();
        appc2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 0f), 1));
        Box cube2 = new Box(3f, 3f, 3f, appc2);  // box with side length 3, color green
        TransformGroup tgc2 = new TransformGroup();
        Transform3D t3dc2 = new Transform3D();
        t3dc2.setTranslation(new Vector3f(-7f, 10f, -12f));
        tgc2.setTransform(t3dc2);
        tgc2.addChild(cube2);
        
        // create column objects
        Appearance appcol = new Appearance();
        appcol.setColoringAttributes(new ColoringAttributes(new Color3f(0f, 1f, 1f), 1));
        Box column = new Box(1f, 4f, 1f, appcol);  // rectangular column with specified dimensions, color cyan
        TransformGroup tgcol = new TransformGroup();
        Transform3D t3dcol = new Transform3D();
        t3dcol.setTranslation(new Vector3f(-7f, 10f, -12f));
        t3dcol.rotX(Math.PI/4);
        t3dcol.rotY(Math.PI/6);
        tgcol.setTranslation(t3dcol);
        tgcol.addChild(column);
        
        // create pole objects
        Cylinder cyl1 = new Cylinder();  // default cylinder radius 1, height 2
        TransformGroup tgccyl1 = new TransformGroup();
        Transform3D t3dcyl1 = new Transform3D();
        t3dcyl1.setTranslation(new Vector3f(9f, 1f, 0f));
        tgccyl1.setTranslation(t3dcyl1);
        tgcyl1.addChild(cyl1);
        
        Appearance appcyl2 = new Appearance();
        appcyl2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 1f), 1));
        Cylinder cyl2 = new Cylinder(1.5f, 7f);  // cylinder with specified dimensions, color magenta
        TransformGroup tgcyl2 = new TransformGroup();
        Transform3D t3dcyl2 = new Transform3D();
        t3dcyl2.setTranslation(new Vector3f(6f, 6f, -6f));
        t3dcyl2.rotZ(Math.PI/2);
        tgcyl2.setTranslation(t3dcyl2);
        tgcyl2.addChild(cyl2);
        
        Shape3D planes = new Shape3D();
        planes.setGeometry(qa);
        planes.setGeometry(sph1);
        planes.setGeometry(sph2);
        planes.setGeometry(box1);
        planes.setGeometry(box2);
        planes.setGeometry(column);
        planes.setGeometry(cyl1);
        planes.setGeometry(cyl2);
    }
    
    public Shape3D getShapes () {
        return planes;
    }
}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				95
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   method setTranslation(javax.media.j3d.Transform3D)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				103
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   method setTranslation(javax.media.j3d.Transform3D)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				104
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable tgcyl1
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				113
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   method setTranslation(javax.media.j3d.Transform3D)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				118
			<iErrLine>
			<iErrMessage>
				no suitable method found for setGeometry(com.sun.j3d.utils.geometry.Sphere)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry,int) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry) is not applicable
      (actual argument com.sun.j3d.utils.geometry.Sphere cannot be converted to javax.media.j3d.Geometry by method invocation conversion)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				119
			<iErrLine>
			<iErrMessage>
				no suitable method found for setGeometry(com.sun.j3d.utils.geometry.Sphere)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry,int) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry) is not applicable
      (actual argument com.sun.j3d.utils.geometry.Sphere cannot be converted to javax.media.j3d.Geometry by method invocation conversion)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				120
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable box1
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				121
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable box2
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				122
			<iErrLine>
			<iErrMessage>
				no suitable method found for setGeometry(com.sun.j3d.utils.geometry.Box)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry,int) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry) is not applicable
      (actual argument com.sun.j3d.utils.geometry.Box cannot be converted to javax.media.j3d.Geometry by method invocation conversion)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				123
			<iErrLine>
			<iErrMessage>
				no suitable method found for setGeometry(com.sun.j3d.utils.geometry.Cylinder)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry,int) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry) is not applicable
      (actual argument com.sun.j3d.utils.geometry.Cylinder cannot be converted to javax.media.j3d.Geometry by method invocation conversion)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				124
			<iErrLine>
			<iErrMessage>
				no suitable method found for setGeometry(com.sun.j3d.utils.geometry.Cylinder)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry,int) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry) is not applicable
      (actual argument com.sun.j3d.utils.geometry.Cylinder cannot be converted to javax.media.j3d.Geometry by method invocation conversion)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				128
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable planes
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				3315015
			</iTime>
			<fName>
				Population.java
			</fName>
			<fSize>
				4823.0
			</fSize>
			<fData>
/**
*   Title: Population.java
*   Description: A collection of various objects for display in a 3D envirionment
*   Date: January 26, 2015
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import com.sun.j3d.utils.geometry.*;
import javax.vecmath.*;
import javax.media.j3d.*;

public class Population
{
    private Population () {
        // create various inclined planes
        QuadArray qa = new QuadArray(12, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-0.5f, 0.1f, 0.5f));
        qa.setCoordinate(1, new Point3f(0.5f, 0.1f, 0.5f));
        qa.setCoordinate(2, new Point3f(0.5f, 0.1f, -0.5f));
        qa.setCoordinate(3, new Point3f(-0.5f, 0.1f, -0.5f));
        
        qa.setCoordinate(4, new Point3f(8f, 3f, -13f));
        qa.setCoordinate(5, new Point3f(10f, 3f, -13f));
        qa.setCoordinate(6, new Point3f(10f, 10f, -15f));
        qa.setCoordinate(7, new Point3f(8f, 10f, -15f));
        
        qa.setCoordinate(8, new Point3f(-3, 4f, 12f));
        qa.setCoordinate(9, new Point3f(-6f, 3f, 9f));
        qa.setCoordinate(10, new Point3f(-3f, 1f, 6f));
        qa.setCoordinate(11, new Point3f(-1f, 0.5f, 9f));
        
        
        
        // create sphere objects
        Sphere sph1 = new Sphere();  // defalut sphere radius 1
        TransformGroup tgSphere1 = new TransformGroup();
        Transform3D t3dSphere1 = new Transform3D();
        t3dSphere1.setTranslation(new Vector3f(-14.005f, 5f, 5f));
        tgSphere1.setTransform(t3dSphere1);
        tgSphere1.addChild(sph1);
        
        Appearance appsph2 = new Appearance();
        appsph2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 0f), 1));
        Sphere sph2 = new Sphere(1.5f, appsph2);  // sphere radius 1.5, colour red
        TransformGroup tgSphere2 = new TransformGroup();
        Transform3D t3dSphere2 = new Transform3D();
        t3dSphere2.setTranslation(new Vector3f(5f, 5f, 10f));
        tgSphere2.setTransform(t3dSphere2);
        tgSphere2.addChild(sph2);
        
        // create cube objects
        Box cube1 = new Box();  // default box with side length of 2
        TransformGroup tgc1 = new TransformGroup();
        Transform3D t3dc1 = new Transform3D();
        t3dc1.setTranslation(new Vector3f(10f, 2f, 10f));
        tgc1.setTransform(t3dc1);
        tgc1.addChild(cube1);
        
        Appearance appc2 = new Appearance();
        appc2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 0f), 1));
        Box cube2 = new Box(3f, 3f, 3f, appc2);  // box with side length 3, color green
        TransformGroup tgc2 = new TransformGroup();
        Transform3D t3dc2 = new Transform3D();
        t3dc2.setTranslation(new Vector3f(-7f, 10f, -12f));
        tgc2.setTransform(t3dc2);
        tgc2.addChild(cube2);
        
        // create column objects
        Appearance appcol = new Appearance();
        appcol.setColoringAttributes(new ColoringAttributes(new Color3f(0f, 1f, 1f), 1));
        Box column = new Box(1f, 4f, 1f, appcol);  // rectangular column with specified dimensions, color cyan
        TransformGroup tgcol = new TransformGroup();
        Transform3D t3dcol = new Transform3D();
        t3dcol.setTranslation(new Vector3f(-7f, 10f, -12f));
        t3dcol.rotX(Math.PI/4);
        t3dcol.rotY(Math.PI/6);
        tgcol.setTransform(t3dcol);
        tgcol.addChild(column);
        
        // create pole objects
        Cylinder cyl1 = new Cylinder();  // default cylinder radius 1, height 2
        TransformGroup tgccyl1 = new TransformGroup();
        Transform3D t3dcyl1 = new Transform3D();
        t3dcyl1.setTranslation(new Vector3f(9f, 1f, 0f));
        tgccyl1.setTranslation(t3dcyl1);
        tgcyl1.addChild(cyl1);
        
        Appearance appcyl2 = new Appearance();
        appcyl2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 1f), 1));
        Cylinder cyl2 = new Cylinder(1.5f, 7f);  // cylinder with specified dimensions, color magenta
        TransformGroup tgcyl2 = new TransformGroup();
        Transform3D t3dcyl2 = new Transform3D();
        t3dcyl2.setTranslation(new Vector3f(6f, 6f, -6f));
        t3dcyl2.rotZ(Math.PI/2);
        tgcyl2.setTranslation(t3dcyl2);
        tgcyl2.addChild(cyl2);
        
        Shape3D planes = new Shape3D();
        planes.setGeometry(qa);
        planes.setGeometry(sph1);
        planes.setGeometry(sph2);
        planes.setGeometry(box1);
        planes.setGeometry(box2);
        planes.setGeometry(column);
        planes.setGeometry(cyl1);
        planes.setGeometry(cyl2);
    }
    
    public Shape3D getShapes () {
        return planes;
    }
}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				103
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   method setTranslation(javax.media.j3d.Transform3D)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				104
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable tgcyl1
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				113
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   method setTranslation(javax.media.j3d.Transform3D)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				118
			<iErrLine>
			<iErrMessage>
				no suitable method found for setGeometry(com.sun.j3d.utils.geometry.Sphere)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry,int) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry) is not applicable
      (actual argument com.sun.j3d.utils.geometry.Sphere cannot be converted to javax.media.j3d.Geometry by method invocation conversion)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				119
			<iErrLine>
			<iErrMessage>
				no suitable method found for setGeometry(com.sun.j3d.utils.geometry.Sphere)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry,int) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry) is not applicable
      (actual argument com.sun.j3d.utils.geometry.Sphere cannot be converted to javax.media.j3d.Geometry by method invocation conversion)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				120
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable box1
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				121
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable box2
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				122
			<iErrLine>
			<iErrMessage>
				no suitable method found for setGeometry(com.sun.j3d.utils.geometry.Box)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry,int) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry) is not applicable
      (actual argument com.sun.j3d.utils.geometry.Box cannot be converted to javax.media.j3d.Geometry by method invocation conversion)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				123
			<iErrLine>
			<iErrMessage>
				no suitable method found for setGeometry(com.sun.j3d.utils.geometry.Cylinder)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry,int) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry) is not applicable
      (actual argument com.sun.j3d.utils.geometry.Cylinder cannot be converted to javax.media.j3d.Geometry by method invocation conversion)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				124
			<iErrLine>
			<iErrMessage>
				no suitable method found for setGeometry(com.sun.j3d.utils.geometry.Cylinder)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry,int) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry) is not applicable
      (actual argument com.sun.j3d.utils.geometry.Cylinder cannot be converted to javax.media.j3d.Geometry by method invocation conversion)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				128
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable planes
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				3323437
			</iTime>
			<fName>
				Population.java
			</fName>
			<fSize>
				4821.0
			</fSize>
			<fData>
/**
*   Title: Population.java
*   Description: A collection of various objects for display in a 3D envirionment
*   Date: January 26, 2015
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import com.sun.j3d.utils.geometry.*;
import javax.vecmath.*;
import javax.media.j3d.*;

public class Population
{
    private Population () {
        // create various inclined planes
        QuadArray qa = new QuadArray(12, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-0.5f, 0.1f, 0.5f));
        qa.setCoordinate(1, new Point3f(0.5f, 0.1f, 0.5f));
        qa.setCoordinate(2, new Point3f(0.5f, 0.1f, -0.5f));
        qa.setCoordinate(3, new Point3f(-0.5f, 0.1f, -0.5f));
        
        qa.setCoordinate(4, new Point3f(8f, 3f, -13f));
        qa.setCoordinate(5, new Point3f(10f, 3f, -13f));
        qa.setCoordinate(6, new Point3f(10f, 10f, -15f));
        qa.setCoordinate(7, new Point3f(8f, 10f, -15f));
        
        qa.setCoordinate(8, new Point3f(-3, 4f, 12f));
        qa.setCoordinate(9, new Point3f(-6f, 3f, 9f));
        qa.setCoordinate(10, new Point3f(-3f, 1f, 6f));
        qa.setCoordinate(11, new Point3f(-1f, 0.5f, 9f));
        
        
        
        // create sphere objects
        Sphere sph1 = new Sphere();  // defalut sphere radius 1
        TransformGroup tgSphere1 = new TransformGroup();
        Transform3D t3dSphere1 = new Transform3D();
        t3dSphere1.setTranslation(new Vector3f(-14.005f, 5f, 5f));
        tgSphere1.setTransform(t3dSphere1);
        tgSphere1.addChild(sph1);
        
        Appearance appsph2 = new Appearance();
        appsph2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 0f), 1));
        Sphere sph2 = new Sphere(1.5f, appsph2);  // sphere radius 1.5, colour red
        TransformGroup tgSphere2 = new TransformGroup();
        Transform3D t3dSphere2 = new Transform3D();
        t3dSphere2.setTranslation(new Vector3f(5f, 5f, 10f));
        tgSphere2.setTransform(t3dSphere2);
        tgSphere2.addChild(sph2);
        
        // create cube objects
        Box cube1 = new Box();  // default box with side length of 2
        TransformGroup tgc1 = new TransformGroup();
        Transform3D t3dc1 = new Transform3D();
        t3dc1.setTranslation(new Vector3f(10f, 2f, 10f));
        tgc1.setTransform(t3dc1);
        tgc1.addChild(cube1);
        
        Appearance appc2 = new Appearance();
        appc2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 0f), 1));
        Box cube2 = new Box(3f, 3f, 3f, appc2);  // box with side length 3, color green
        TransformGroup tgc2 = new TransformGroup();
        Transform3D t3dc2 = new Transform3D();
        t3dc2.setTranslation(new Vector3f(-7f, 10f, -12f));
        tgc2.setTransform(t3dc2);
        tgc2.addChild(cube2);
        
        // create column objects
        Appearance appcol = new Appearance();
        appcol.setColoringAttributes(new ColoringAttributes(new Color3f(0f, 1f, 1f), 1));
        Box column = new Box(1f, 4f, 1f, appcol);  // rectangular column with specified dimensions, color cyan
        TransformGroup tgcol = new TransformGroup();
        Transform3D t3dcol = new Transform3D();
        t3dcol.setTranslation(new Vector3f(-7f, 10f, -12f));
        t3dcol.rotX(Math.PI/4);
        t3dcol.rotY(Math.PI/6);
        tgcol.setTransform(t3dcol);
        tgcol.addChild(column);
        
        // create pole objects
        Cylinder cyl1 = new Cylinder();  // default cylinder radius 1, height 2
        TransformGroup tgccyl1 = new TransformGroup();
        Transform3D t3dcyl1 = new Transform3D();
        t3dcyl1.setTranslation(new Vector3f(9f, 1f, 0f));
        tgccyl1.setTransform(t3dcyl1);
        tgcyl1.addChild(cyl1);
        
        Appearance appcyl2 = new Appearance();
        appcyl2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 1f), 1));
        Cylinder cyl2 = new Cylinder(1.5f, 7f);  // cylinder with specified dimensions, color magenta
        TransformGroup tgcyl2 = new TransformGroup();
        Transform3D t3dcyl2 = new Transform3D();
        t3dcyl2.setTranslation(new Vector3f(6f, 6f, -6f));
        t3dcyl2.rotZ(Math.PI/2);
        tgcyl2.setTranslation(t3dcyl2);
        tgcyl2.addChild(cyl2);
        
        Shape3D planes = new Shape3D();
        planes.setGeometry(qa);
        planes.setGeometry(sph1);
        planes.setGeometry(sph2);
        planes.setGeometry(box1);
        planes.setGeometry(box2);
        planes.setGeometry(column);
        planes.setGeometry(cyl1);
        planes.setGeometry(cyl2);
    }
    
    public Shape3D getShapes () {
        return planes;
    }
}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				104
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable tgcyl1
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				113
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   method setTranslation(javax.media.j3d.Transform3D)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				118
			<iErrLine>
			<iErrMessage>
				no suitable method found for setGeometry(com.sun.j3d.utils.geometry.Sphere)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry,int) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry) is not applicable
      (actual argument com.sun.j3d.utils.geometry.Sphere cannot be converted to javax.media.j3d.Geometry by method invocation conversion)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				119
			<iErrLine>
			<iErrMessage>
				no suitable method found for setGeometry(com.sun.j3d.utils.geometry.Sphere)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry,int) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry) is not applicable
      (actual argument com.sun.j3d.utils.geometry.Sphere cannot be converted to javax.media.j3d.Geometry by method invocation conversion)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				120
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable box1
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				121
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable box2
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				122
			<iErrLine>
			<iErrMessage>
				no suitable method found for setGeometry(com.sun.j3d.utils.geometry.Box)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry,int) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry) is not applicable
      (actual argument com.sun.j3d.utils.geometry.Box cannot be converted to javax.media.j3d.Geometry by method invocation conversion)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				123
			<iErrLine>
			<iErrMessage>
				no suitable method found for setGeometry(com.sun.j3d.utils.geometry.Cylinder)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry,int) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry) is not applicable
      (actual argument com.sun.j3d.utils.geometry.Cylinder cannot be converted to javax.media.j3d.Geometry by method invocation conversion)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				124
			<iErrLine>
			<iErrMessage>
				no suitable method found for setGeometry(com.sun.j3d.utils.geometry.Cylinder)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry,int) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry) is not applicable
      (actual argument com.sun.j3d.utils.geometry.Cylinder cannot be converted to javax.media.j3d.Geometry by method invocation conversion)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				128
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable planes
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				3349328
			</iTime>
			<fName>
				Population.java
			</fName>
			<fSize>
				4819.0
			</fSize>
			<fData>
/**
*   Title: Population.java
*   Description: A collection of various objects for display in a 3D envirionment
*   Date: January 26, 2015
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import com.sun.j3d.utils.geometry.*;
import javax.vecmath.*;
import javax.media.j3d.*;

public class Population
{
    private Population () {
        // create various inclined planes
        QuadArray qa = new QuadArray(12, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-0.5f, 0.1f, 0.5f));
        qa.setCoordinate(1, new Point3f(0.5f, 0.1f, 0.5f));
        qa.setCoordinate(2, new Point3f(0.5f, 0.1f, -0.5f));
        qa.setCoordinate(3, new Point3f(-0.5f, 0.1f, -0.5f));
        
        qa.setCoordinate(4, new Point3f(8f, 3f, -13f));
        qa.setCoordinate(5, new Point3f(10f, 3f, -13f));
        qa.setCoordinate(6, new Point3f(10f, 10f, -15f));
        qa.setCoordinate(7, new Point3f(8f, 10f, -15f));
        
        qa.setCoordinate(8, new Point3f(-3, 4f, 12f));
        qa.setCoordinate(9, new Point3f(-6f, 3f, 9f));
        qa.setCoordinate(10, new Point3f(-3f, 1f, 6f));
        qa.setCoordinate(11, new Point3f(-1f, 0.5f, 9f));
        
        
        
        // create sphere objects
        Sphere sph1 = new Sphere();  // defalut sphere radius 1
        TransformGroup tgSphere1 = new TransformGroup();
        Transform3D t3dSphere1 = new Transform3D();
        t3dSphere1.setTranslation(new Vector3f(-14.005f, 5f, 5f));
        tgSphere1.setTransform(t3dSphere1);
        tgSphere1.addChild(sph1);
        
        Appearance appsph2 = new Appearance();
        appsph2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 0f), 1));
        Sphere sph2 = new Sphere(1.5f, appsph2);  // sphere radius 1.5, colour red
        TransformGroup tgSphere2 = new TransformGroup();
        Transform3D t3dSphere2 = new Transform3D();
        t3dSphere2.setTranslation(new Vector3f(5f, 5f, 10f));
        tgSphere2.setTransform(t3dSphere2);
        tgSphere2.addChild(sph2);
        
        // create cube objects
        Box cube1 = new Box();  // default box with side length of 2
        TransformGroup tgc1 = new TransformGroup();
        Transform3D t3dc1 = new Transform3D();
        t3dc1.setTranslation(new Vector3f(10f, 2f, 10f));
        tgc1.setTransform(t3dc1);
        tgc1.addChild(cube1);
        
        Appearance appc2 = new Appearance();
        appc2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 0f), 1));
        Box cube2 = new Box(3f, 3f, 3f, appc2);  // box with side length 3, color green
        TransformGroup tgc2 = new TransformGroup();
        Transform3D t3dc2 = new Transform3D();
        t3dc2.setTranslation(new Vector3f(-7f, 10f, -12f));
        tgc2.setTransform(t3dc2);
        tgc2.addChild(cube2);
        
        // create column objects
        Appearance appcol = new Appearance();
        appcol.setColoringAttributes(new ColoringAttributes(new Color3f(0f, 1f, 1f), 1));
        Box column = new Box(1f, 4f, 1f, appcol);  // rectangular column with specified dimensions, color cyan
        TransformGroup tgcol = new TransformGroup();
        Transform3D t3dcol = new Transform3D();
        t3dcol.setTranslation(new Vector3f(-7f, 10f, -12f));
        t3dcol.rotX(Math.PI/4);
        t3dcol.rotY(Math.PI/6);
        tgcol.setTransform(t3dcol);
        tgcol.addChild(column);
        
        // create pole objects
        Cylinder cyl1 = new Cylinder();  // default cylinder radius 1, height 2
        TransformGroup tgcyl1 = new TransformGroup();
        Transform3D t3dcyl1 = new Transform3D();
        t3dcyl1.setTranslation(new Vector3f(9f, 1f, 0f));
        tgcyl1.setTransform(t3dcyl1);
        tgcyl1.addChild(cyl1);
        
        Appearance appcyl2 = new Appearance();
        appcyl2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 1f), 1));
        Cylinder cyl2 = new Cylinder(1.5f, 7f);  // cylinder with specified dimensions, color magenta
        TransformGroup tgcyl2 = new TransformGroup();
        Transform3D t3dcyl2 = new Transform3D();
        t3dcyl2.setTranslation(new Vector3f(6f, 6f, -6f));
        t3dcyl2.rotZ(Math.PI/2);
        tgcyl2.setTranslation(t3dcyl2);
        tgcyl2.addChild(cyl2);
        
        Shape3D planes = new Shape3D();
        planes.setGeometry(qa);
        planes.setGeometry(sph1);
        planes.setGeometry(sph2);
        planes.setGeometry(box1);
        planes.setGeometry(box2);
        planes.setGeometry(column);
        planes.setGeometry(cyl1);
        planes.setGeometry(cyl2);
    }
    
    public Shape3D getShapes () {
        return planes;
    }
}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				113
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   method setTranslation(javax.media.j3d.Transform3D)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				118
			<iErrLine>
			<iErrMessage>
				no suitable method found for setGeometry(com.sun.j3d.utils.geometry.Sphere)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry,int) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry) is not applicable
      (actual argument com.sun.j3d.utils.geometry.Sphere cannot be converted to javax.media.j3d.Geometry by method invocation conversion)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				119
			<iErrLine>
			<iErrMessage>
				no suitable method found for setGeometry(com.sun.j3d.utils.geometry.Sphere)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry,int) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry) is not applicable
      (actual argument com.sun.j3d.utils.geometry.Sphere cannot be converted to javax.media.j3d.Geometry by method invocation conversion)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				120
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable box1
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				121
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable box2
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				122
			<iErrLine>
			<iErrMessage>
				no suitable method found for setGeometry(com.sun.j3d.utils.geometry.Box)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry,int) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry) is not applicable
      (actual argument com.sun.j3d.utils.geometry.Box cannot be converted to javax.media.j3d.Geometry by method invocation conversion)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				123
			<iErrLine>
			<iErrMessage>
				no suitable method found for setGeometry(com.sun.j3d.utils.geometry.Cylinder)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry,int) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry) is not applicable
      (actual argument com.sun.j3d.utils.geometry.Cylinder cannot be converted to javax.media.j3d.Geometry by method invocation conversion)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				124
			<iErrLine>
			<iErrMessage>
				no suitable method found for setGeometry(com.sun.j3d.utils.geometry.Cylinder)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry,int) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry) is not applicable
      (actual argument com.sun.j3d.utils.geometry.Cylinder cannot be converted to javax.media.j3d.Geometry by method invocation conversion)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				128
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable planes
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				3359593
			</iTime>
			<fName>
				Population.java
			</fName>
			<fSize>
				4817.0
			</fSize>
			<fData>
/**
*   Title: Population.java
*   Description: A collection of various objects for display in a 3D envirionment
*   Date: January 26, 2015
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import com.sun.j3d.utils.geometry.*;
import javax.vecmath.*;
import javax.media.j3d.*;

public class Population
{
    private Population () {
        // create various inclined planes
        QuadArray qa = new QuadArray(12, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-0.5f, 0.1f, 0.5f));
        qa.setCoordinate(1, new Point3f(0.5f, 0.1f, 0.5f));
        qa.setCoordinate(2, new Point3f(0.5f, 0.1f, -0.5f));
        qa.setCoordinate(3, new Point3f(-0.5f, 0.1f, -0.5f));
        
        qa.setCoordinate(4, new Point3f(8f, 3f, -13f));
        qa.setCoordinate(5, new Point3f(10f, 3f, -13f));
        qa.setCoordinate(6, new Point3f(10f, 10f, -15f));
        qa.setCoordinate(7, new Point3f(8f, 10f, -15f));
        
        qa.setCoordinate(8, new Point3f(-3, 4f, 12f));
        qa.setCoordinate(9, new Point3f(-6f, 3f, 9f));
        qa.setCoordinate(10, new Point3f(-3f, 1f, 6f));
        qa.setCoordinate(11, new Point3f(-1f, 0.5f, 9f));
        
        
        
        // create sphere objects
        Sphere sph1 = new Sphere();  // defalut sphere radius 1
        TransformGroup tgSphere1 = new TransformGroup();
        Transform3D t3dSphere1 = new Transform3D();
        t3dSphere1.setTranslation(new Vector3f(-14.005f, 5f, 5f));
        tgSphere1.setTransform(t3dSphere1);
        tgSphere1.addChild(sph1);
        
        Appearance appsph2 = new Appearance();
        appsph2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 0f), 1));
        Sphere sph2 = new Sphere(1.5f, appsph2);  // sphere radius 1.5, colour red
        TransformGroup tgSphere2 = new TransformGroup();
        Transform3D t3dSphere2 = new Transform3D();
        t3dSphere2.setTranslation(new Vector3f(5f, 5f, 10f));
        tgSphere2.setTransform(t3dSphere2);
        tgSphere2.addChild(sph2);
        
        // create cube objects
        Box cube1 = new Box();  // default box with side length of 2
        TransformGroup tgc1 = new TransformGroup();
        Transform3D t3dc1 = new Transform3D();
        t3dc1.setTranslation(new Vector3f(10f, 2f, 10f));
        tgc1.setTransform(t3dc1);
        tgc1.addChild(cube1);
        
        Appearance appc2 = new Appearance();
        appc2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 0f), 1));
        Box cube2 = new Box(3f, 3f, 3f, appc2);  // box with side length 3, color green
        TransformGroup tgc2 = new TransformGroup();
        Transform3D t3dc2 = new Transform3D();
        t3dc2.setTranslation(new Vector3f(-7f, 10f, -12f));
        tgc2.setTransform(t3dc2);
        tgc2.addChild(cube2);
        
        // create column objects
        Appearance appcol = new Appearance();
        appcol.setColoringAttributes(new ColoringAttributes(new Color3f(0f, 1f, 1f), 1));
        Box column = new Box(1f, 4f, 1f, appcol);  // rectangular column with specified dimensions, color cyan
        TransformGroup tgcol = new TransformGroup();
        Transform3D t3dcol = new Transform3D();
        t3dcol.setTranslation(new Vector3f(-7f, 10f, -12f));
        t3dcol.rotX(Math.PI/4);
        t3dcol.rotY(Math.PI/6);
        tgcol.setTransform(t3dcol);
        tgcol.addChild(column);
        
        // create pole objects
        Cylinder cyl1 = new Cylinder();  // default cylinder radius 1, height 2
        TransformGroup tgcyl1 = new TransformGroup();
        Transform3D t3dcyl1 = new Transform3D();
        t3dcyl1.setTranslation(new Vector3f(9f, 1f, 0f));
        tgcyl1.setTransform(t3dcyl1);
        tgcyl1.addChild(cyl1);
        
        Appearance appcyl2 = new Appearance();
        appcyl2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 1f), 1));
        Cylinder cyl2 = new Cylinder(1.5f, 7f);  // cylinder with specified dimensions, color magenta
        TransformGroup tgcyl2 = new TransformGroup();
        Transform3D t3dcyl2 = new Transform3D();
        t3dcyl2.setTranslation(new Vector3f(6f, 6f, -6f));
        t3dcyl2.rotZ(Math.PI/2);
        tgcyl2.setTransform(t3dcyl2);
        tgcyl2.addChild(cyl2);
        
        Shape3D planes = new Shape3D();
        planes.setGeometry(qa);
        planes.setGeometry(sph1);
        planes.setGeometry(sph2);
        planes.setGeometry(box1);
        planes.setGeometry(box2);
        planes.setGeometry(column);
        planes.setGeometry(cyl1);
        planes.setGeometry(cyl2);
    }
    
    public Shape3D getShapes () {
        return planes;
    }
}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				118
			<iErrLine>
			<iErrMessage>
				no suitable method found for setGeometry(com.sun.j3d.utils.geometry.Sphere)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry,int) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry) is not applicable
      (actual argument com.sun.j3d.utils.geometry.Sphere cannot be converted to javax.media.j3d.Geometry by method invocation conversion)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				119
			<iErrLine>
			<iErrMessage>
				no suitable method found for setGeometry(com.sun.j3d.utils.geometry.Sphere)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry,int) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry) is not applicable
      (actual argument com.sun.j3d.utils.geometry.Sphere cannot be converted to javax.media.j3d.Geometry by method invocation conversion)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				120
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable box1
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				121
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable box2
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				122
			<iErrLine>
			<iErrMessage>
				no suitable method found for setGeometry(com.sun.j3d.utils.geometry.Box)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry,int) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry) is not applicable
      (actual argument com.sun.j3d.utils.geometry.Box cannot be converted to javax.media.j3d.Geometry by method invocation conversion)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				123
			<iErrLine>
			<iErrMessage>
				no suitable method found for setGeometry(com.sun.j3d.utils.geometry.Cylinder)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry,int) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry) is not applicable
      (actual argument com.sun.j3d.utils.geometry.Cylinder cannot be converted to javax.media.j3d.Geometry by method invocation conversion)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				124
			<iErrLine>
			<iErrMessage>
				no suitable method found for setGeometry(com.sun.j3d.utils.geometry.Cylinder)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry,int) is not applicable
      (actual and formal argument lists differ in length)
    method javax.media.j3d.Shape3D.setGeometry(javax.media.j3d.Geometry) is not applicable
      (actual argument com.sun.j3d.utils.geometry.Cylinder cannot be converted to javax.media.j3d.Geometry by method invocation conversion)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				128
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable planes
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				3530015
			</iTime>
			<fName>
				Population.java
			</fName>
			<fSize>
				4850.0
			</fSize>
			<fData>
/**
*   Title: Population.java
*   Description: A collection of various objects for display in a 3D envirionment
*   Date: January 26, 2015
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import com.sun.j3d.utils.geometry.*;
import javax.vecmath.*;
import javax.media.j3d.*;

public class Population
{
    private Population () {
        // create various inclined planes
        QuadArray qa = new QuadArray(12, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-0.5f, 0.1f, 0.5f));
        qa.setCoordinate(1, new Point3f(0.5f, 0.1f, 0.5f));
        qa.setCoordinate(2, new Point3f(0.5f, 0.1f, -0.5f));
        qa.setCoordinate(3, new Point3f(-0.5f, 0.1f, -0.5f));
        
        qa.setCoordinate(4, new Point3f(8f, 3f, -13f));
        qa.setCoordinate(5, new Point3f(10f, 3f, -13f));
        qa.setCoordinate(6, new Point3f(10f, 10f, -15f));
        qa.setCoordinate(7, new Point3f(8f, 10f, -15f));
        
        qa.setCoordinate(8, new Point3f(-3, 4f, 12f));
        qa.setCoordinate(9, new Point3f(-6f, 3f, 9f));
        qa.setCoordinate(10, new Point3f(-3f, 1f, 6f));
        qa.setCoordinate(11, new Point3f(-1f, 0.5f, 9f));
        
        
        
        // create sphere objects
        Sphere sph1 = new Sphere();  // defalut sphere radius 1
        TransformGroup tgSphere1 = new TransformGroup();
        Transform3D t3dSphere1 = new Transform3D();
        t3dSphere1.setTranslation(new Vector3f(-14.005f, 5f, 5f));
        tgSphere1.setTransform(t3dSphere1);
        tgSphere1.addChild(sph1);
        
        Appearance appsph2 = new Appearance();
        appsph2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 0f), 1));
        Sphere sph2 = new Sphere(1.5f, appsph2);  // sphere radius 1.5, colour red
        TransformGroup tgSphere2 = new TransformGroup();
        Transform3D t3dSphere2 = new Transform3D();
        t3dSphere2.setTranslation(new Vector3f(5f, 5f, 10f));
        tgSphere2.setTransform(t3dSphere2);
        tgSphere2.addChild(sph2);
        
        // create cube objects
        Box cube1 = new Box();  // default box with side length of 2
        TransformGroup tgc1 = new TransformGroup();
        Transform3D t3dc1 = new Transform3D();
        t3dc1.setTranslation(new Vector3f(10f, 2f, 10f));
        tgc1.setTransform(t3dc1);
        tgc1.addChild(cube1);
        
        Appearance appc2 = new Appearance();
        appc2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 0f), 1));
        Box cube2 = new Box(3f, 3f, 3f, appc2);  // box with side length 3, color green
        TransformGroup tgc2 = new TransformGroup();
        Transform3D t3dc2 = new Transform3D();
        t3dc2.setTranslation(new Vector3f(-7f, 10f, -12f));
        tgc2.setTransform(t3dc2);
        tgc2.addChild(cube2);
        
        // create column objects
        Appearance appcol = new Appearance();
        appcol.setColoringAttributes(new ColoringAttributes(new Color3f(0f, 1f, 1f), 1));
        Box column = new Box(1f, 4f, 1f, appcol);  // rectangular column with specified dimensions, color cyan
        TransformGroup tgcol = new TransformGroup();
        Transform3D t3dcol = new Transform3D();
        t3dcol.setTranslation(new Vector3f(-7f, 10f, -12f));
        t3dcol.rotX(Math.PI/4);
        t3dcol.rotY(Math.PI/6);
        tgcol.setTransform(t3dcol);
        tgcol.addChild(column);
        
        // create pole objects
        Cylinder cyl1 = new Cylinder();  // default cylinder radius 1, height 2
        TransformGroup tgcyl1 = new TransformGroup();
        Transform3D t3dcyl1 = new Transform3D();
        t3dcyl1.setTranslation(new Vector3f(9f, 1f, 0f));
        tgcyl1.setTransform(t3dcyl1);
        tgcyl1.addChild(cyl1);
        
        Appearance appcyl2 = new Appearance();
        appcyl2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 1f), 1));
        Cylinder cyl2 = new Cylinder(1.5f, 7f);  // cylinder with specified dimensions, color magenta
        TransformGroup tgcyl2 = new TransformGroup();
        Transform3D t3dcyl2 = new Transform3D();
        t3dcyl2.setTranslation(new Vector3f(6f, 6f, -6f));
        t3dcyl2.rotZ(Math.PI/2);
        tgcyl2.setTransform(t3dcyl2);
        tgcyl2.addChild(cyl2);
        
        Shape3D planes = new Shape3D();
        planes.setGeometry(qa);
        
        BranchGroup bg = new BranchGroup();
        bg.addChild(planes);
        bg.addChild(sph1);
        bg.addChild(sph2);
        bg.addChild(box1);
        bg.addChild(box2);
        bg.addChild(column);
        bg.addChild(cyl1);
        bg.addChild(cyl2);
    }
    
    public Shape3D getShapes () {
        return planes;
    }
}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				123
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable box1
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				124
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable box2
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				131
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable planes
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				3555500
			</iTime>
			<fName>
				Population.java
			</fName>
			<fSize>
				4852.0
			</fSize>
			<fData>
/**
*   Title: Population.java
*   Description: A collection of various objects for display in a 3D envirionment
*   Date: January 26, 2015
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import com.sun.j3d.utils.geometry.*;
import javax.vecmath.*;
import javax.media.j3d.*;

public class Population
{
    private Population () {
        // create various inclined planes
        QuadArray qa = new QuadArray(12, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-0.5f, 0.1f, 0.5f));
        qa.setCoordinate(1, new Point3f(0.5f, 0.1f, 0.5f));
        qa.setCoordinate(2, new Point3f(0.5f, 0.1f, -0.5f));
        qa.setCoordinate(3, new Point3f(-0.5f, 0.1f, -0.5f));
        
        qa.setCoordinate(4, new Point3f(8f, 3f, -13f));
        qa.setCoordinate(5, new Point3f(10f, 3f, -13f));
        qa.setCoordinate(6, new Point3f(10f, 10f, -15f));
        qa.setCoordinate(7, new Point3f(8f, 10f, -15f));
        
        qa.setCoordinate(8, new Point3f(-3, 4f, 12f));
        qa.setCoordinate(9, new Point3f(-6f, 3f, 9f));
        qa.setCoordinate(10, new Point3f(-3f, 1f, 6f));
        qa.setCoordinate(11, new Point3f(-1f, 0.5f, 9f));
        
        
        
        // create sphere objects
        Sphere sph1 = new Sphere();  // defalut sphere radius 1
        TransformGroup tgSphere1 = new TransformGroup();
        Transform3D t3dSphere1 = new Transform3D();
        t3dSphere1.setTranslation(new Vector3f(-14.005f, 5f, 5f));
        tgSphere1.setTransform(t3dSphere1);
        tgSphere1.addChild(sph1);
        
        Appearance appsph2 = new Appearance();
        appsph2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 0f), 1));
        Sphere sph2 = new Sphere(1.5f, appsph2);  // sphere radius 1.5, colour red
        TransformGroup tgSphere2 = new TransformGroup();
        Transform3D t3dSphere2 = new Transform3D();
        t3dSphere2.setTranslation(new Vector3f(5f, 5f, 10f));
        tgSphere2.setTransform(t3dSphere2);
        tgSphere2.addChild(sph2);
        
        // create cube objects
        Box cube1 = new Box();  // default box with side length of 2
        TransformGroup tgc1 = new TransformGroup();
        Transform3D t3dc1 = new Transform3D();
        t3dc1.setTranslation(new Vector3f(10f, 2f, 10f));
        tgc1.setTransform(t3dc1);
        tgc1.addChild(cube1);
        
        Appearance appc2 = new Appearance();
        appc2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 0f), 1));
        Box cube2 = new Box(3f, 3f, 3f, appc2);  // box with side length 3, color green
        TransformGroup tgc2 = new TransformGroup();
        Transform3D t3dc2 = new Transform3D();
        t3dc2.setTranslation(new Vector3f(-7f, 10f, -12f));
        tgc2.setTransform(t3dc2);
        tgc2.addChild(cube2);
        
        // create column objects
        Appearance appcol = new Appearance();
        appcol.setColoringAttributes(new ColoringAttributes(new Color3f(0f, 1f, 1f), 1));
        Box column = new Box(1f, 4f, 1f, appcol);  // rectangular column with specified dimensions, color cyan
        TransformGroup tgcol = new TransformGroup();
        Transform3D t3dcol = new Transform3D();
        t3dcol.setTranslation(new Vector3f(-7f, 10f, -12f));
        t3dcol.rotX(Math.PI/4);
        t3dcol.rotY(Math.PI/6);
        tgcol.setTransform(t3dcol);
        tgcol.addChild(column);
        
        // create pole objects
        Cylinder cyl1 = new Cylinder();  // default cylinder radius 1, height 2
        TransformGroup tgcyl1 = new TransformGroup();
        Transform3D t3dcyl1 = new Transform3D();
        t3dcyl1.setTranslation(new Vector3f(9f, 1f, 0f));
        tgcyl1.setTransform(t3dcyl1);
        tgcyl1.addChild(cyl1);
        
        Appearance appcyl2 = new Appearance();
        appcyl2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 1f), 1));
        Cylinder cyl2 = new Cylinder(1.5f, 7f);  // cylinder with specified dimensions, color magenta
        TransformGroup tgcyl2 = new TransformGroup();
        Transform3D t3dcyl2 = new Transform3D();
        t3dcyl2.setTranslation(new Vector3f(6f, 6f, -6f));
        t3dcyl2.rotZ(Math.PI/2);
        tgcyl2.setTransform(t3dcyl2);
        tgcyl2.addChild(cyl2);
        
        Shape3D planes = new Shape3D();
        planes.setGeometry(qa);
        
        BranchGroup bg = new BranchGroup();
        bg.addChild(planes);
        bg.addChild(sph1);
        bg.addChild(sph2);
        bg.addChild(cube1);
        bg.addChild(cube2);
        bg.addChild(column);
        bg.addChild(cyl1);
        bg.addChild(cyl2);
    }
    
    public Shape3D getShapes () {
        return planes;
    }
}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				131
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable planes
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				3576171
			</iTime>
			<fName>
				Population.java
			</fName>
			<fSize>
				4852.0
			</fSize>
			<fData>
/**
*   Title: Population.java
*   Description: A collection of various objects for display in a 3D envirionment
*   Date: January 26, 2015
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import com.sun.j3d.utils.geometry.*;
import javax.vecmath.*;
import javax.media.j3d.*;

public class Population
{
    private Population () {
        // create various inclined planes
        QuadArray qa = new QuadArray(12, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-0.5f, 0.1f, 0.5f));
        qa.setCoordinate(1, new Point3f(0.5f, 0.1f, 0.5f));
        qa.setCoordinate(2, new Point3f(0.5f, 0.1f, -0.5f));
        qa.setCoordinate(3, new Point3f(-0.5f, 0.1f, -0.5f));
        
        qa.setCoordinate(4, new Point3f(8f, 3f, -13f));
        qa.setCoordinate(5, new Point3f(10f, 3f, -13f));
        qa.setCoordinate(6, new Point3f(10f, 10f, -15f));
        qa.setCoordinate(7, new Point3f(8f, 10f, -15f));
        
        qa.setCoordinate(8, new Point3f(-3, 4f, 12f));
        qa.setCoordinate(9, new Point3f(-6f, 3f, 9f));
        qa.setCoordinate(10, new Point3f(-3f, 1f, 6f));
        qa.setCoordinate(11, new Point3f(-1f, 0.5f, 9f));
        
        
        
        // create sphere objects
        Sphere sph1 = new Sphere();  // defalut sphere radius 1
        TransformGroup tgSphere1 = new TransformGroup();
        Transform3D t3dSphere1 = new Transform3D();
        t3dSphere1.setTranslation(new Vector3f(-14.005f, 5f, 5f));
        tgSphere1.setTransform(t3dSphere1);
        tgSphere1.addChild(sph1);
        
        Appearance appsph2 = new Appearance();
        appsph2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 0f), 1));
        Sphere sph2 = new Sphere(1.5f, appsph2);  // sphere radius 1.5, colour red
        TransformGroup tgSphere2 = new TransformGroup();
        Transform3D t3dSphere2 = new Transform3D();
        t3dSphere2.setTranslation(new Vector3f(5f, 5f, 10f));
        tgSphere2.setTransform(t3dSphere2);
        tgSphere2.addChild(sph2);
        
        // create cube objects
        Box cube1 = new Box();  // default box with side length of 2
        TransformGroup tgc1 = new TransformGroup();
        Transform3D t3dc1 = new Transform3D();
        t3dc1.setTranslation(new Vector3f(10f, 2f, 10f));
        tgc1.setTransform(t3dc1);
        tgc1.addChild(cube1);
        
        Appearance appc2 = new Appearance();
        appc2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 0f), 1));
        Box cube2 = new Box(3f, 3f, 3f, appc2);  // box with side length 3, color green
        TransformGroup tgc2 = new TransformGroup();
        Transform3D t3dc2 = new Transform3D();
        t3dc2.setTranslation(new Vector3f(-7f, 10f, -12f));
        tgc2.setTransform(t3dc2);
        tgc2.addChild(cube2);
        
        // create column objects
        Appearance appcol = new Appearance();
        appcol.setColoringAttributes(new ColoringAttributes(new Color3f(0f, 1f, 1f), 1));
        Box column = new Box(1f, 4f, 1f, appcol);  // rectangular column with specified dimensions, color cyan
        TransformGroup tgcol = new TransformGroup();
        Transform3D t3dcol = new Transform3D();
        t3dcol.setTranslation(new Vector3f(-7f, 10f, -12f));
        t3dcol.rotX(Math.PI/4);
        t3dcol.rotY(Math.PI/6);
        tgcol.setTransform(t3dcol);
        tgcol.addChild(column);
        
        // create pole objects
        Cylinder cyl1 = new Cylinder();  // default cylinder radius 1, height 2
        TransformGroup tgcyl1 = new TransformGroup();
        Transform3D t3dcyl1 = new Transform3D();
        t3dcyl1.setTranslation(new Vector3f(9f, 1f, 0f));
        tgcyl1.setTransform(t3dcyl1);
        tgcyl1.addChild(cyl1);
        
        Appearance appcyl2 = new Appearance();
        appcyl2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 1f), 1));
        Cylinder cyl2 = new Cylinder(1.5f, 7f);  // cylinder with specified dimensions, color magenta
        TransformGroup tgcyl2 = new TransformGroup();
        Transform3D t3dcyl2 = new Transform3D();
        t3dcyl2.setTranslation(new Vector3f(6f, 6f, -6f));
        t3dcyl2.rotZ(Math.PI/2);
        tgcyl2.setTransform(t3dcyl2);
        tgcyl2.addChild(cyl2);
        
        Shape3D planes = new Shape3D();
        planes.setGeometry(qa);
        
        BranchGroup bg = new BranchGroup();
        bg.addChild(planes);
        bg.addChild(sph1);
        bg.addChild(sph2);
        bg.addChild(cube1);
        bg.addChild(cube2);
        bg.addChild(column);
        bg.addChild(cyl1);
        bg.addChild(cyl2);
    }
    
    public BranchGroup getShapes () {
        return bg;
    }
}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				131
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable bg
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				3675062
			</iTime>
			<fName>
				Population.java
			</fName>
			<fSize>
				4866.0
			</fSize>
			<fData>
/**
*   Title: Population.java
*   Description: A collection of various objects for display in a 3D envirionment
*   Date: January 26, 2015
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import com.sun.j3d.utils.geometry.*;
import javax.vecmath.*;
import javax.media.j3d.*;

public class Population
{
    private Population () {
        BranchGroup bg = new BranchGroup();
    }
    public BranchGroup getShapes () {    
        // create various inclined planes
        QuadArray qa = new QuadArray(12, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-0.5f, 0.1f, 0.5f));
        qa.setCoordinate(1, new Point3f(0.5f, 0.1f, 0.5f));
        qa.setCoordinate(2, new Point3f(0.5f, 0.1f, -0.5f));
        qa.setCoordinate(3, new Point3f(-0.5f, 0.1f, -0.5f));
        
        qa.setCoordinate(4, new Point3f(8f, 3f, -13f));
        qa.setCoordinate(5, new Point3f(10f, 3f, -13f));
        qa.setCoordinate(6, new Point3f(10f, 10f, -15f));
        qa.setCoordinate(7, new Point3f(8f, 10f, -15f));
        
        qa.setCoordinate(8, new Point3f(-3, 4f, 12f));
        qa.setCoordinate(9, new Point3f(-6f, 3f, 9f));
        qa.setCoordinate(10, new Point3f(-3f, 1f, 6f));
        qa.setCoordinate(11, new Point3f(-1f, 0.5f, 9f));
        
        
        
        // create sphere objects
        Sphere sph1 = new Sphere();  // defalut sphere radius 1
        TransformGroup tgSphere1 = new TransformGroup();
        Transform3D t3dSphere1 = new Transform3D();
        t3dSphere1.setTranslation(new Vector3f(-14.005f, 5f, 5f));
        tgSphere1.setTransform(t3dSphere1);
        tgSphere1.addChild(sph1);
        
        Appearance appsph2 = new Appearance();
        appsph2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 0f), 1));
        Sphere sph2 = new Sphere(1.5f, appsph2);  // sphere radius 1.5, colour red
        TransformGroup tgSphere2 = new TransformGroup();
        Transform3D t3dSphere2 = new Transform3D();
        t3dSphere2.setTranslation(new Vector3f(5f, 5f, 10f));
        tgSphere2.setTransform(t3dSphere2);
        tgSphere2.addChild(sph2);
        
        // create cube objects
        Box cube1 = new Box();  // default box with side length of 2
        TransformGroup tgc1 = new TransformGroup();
        Transform3D t3dc1 = new Transform3D();
        t3dc1.setTranslation(new Vector3f(10f, 2f, 10f));
        tgc1.setTransform(t3dc1);
        tgc1.addChild(cube1);
        
        Appearance appc2 = new Appearance();
        appc2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 0f), 1));
        Box cube2 = new Box(3f, 3f, 3f, appc2);  // box with side length 3, color green
        TransformGroup tgc2 = new TransformGroup();
        Transform3D t3dc2 = new Transform3D();
        t3dc2.setTranslation(new Vector3f(-7f, 10f, -12f));
        tgc2.setTransform(t3dc2);
        tgc2.addChild(cube2);
        
        // create column objects
        Appearance appcol = new Appearance();
        appcol.setColoringAttributes(new ColoringAttributes(new Color3f(0f, 1f, 1f), 1));
        Box column = new Box(1f, 4f, 1f, appcol);  // rectangular column with specified dimensions, color cyan
        TransformGroup tgcol = new TransformGroup();
        Transform3D t3dcol = new Transform3D();
        t3dcol.setTranslation(new Vector3f(-7f, 10f, -12f));
        t3dcol.rotX(Math.PI/4);
        t3dcol.rotY(Math.PI/6);
        tgcol.setTransform(t3dcol);
        tgcol.addChild(column);
        
        // create pole objects
        Cylinder cyl1 = new Cylinder();  // default cylinder radius 1, height 2
        TransformGroup tgcyl1 = new TransformGroup();
        Transform3D t3dcyl1 = new Transform3D();
        t3dcyl1.setTranslation(new Vector3f(9f, 1f, 0f));
        tgcyl1.setTransform(t3dcyl1);
        tgcyl1.addChild(cyl1);
        
        Appearance appcyl2 = new Appearance();
        appcyl2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 1f), 1));
        Cylinder cyl2 = new Cylinder(1.5f, 7f);  // cylinder with specified dimensions, color magenta
        TransformGroup tgcyl2 = new TransformGroup();
        Transform3D t3dcyl2 = new Transform3D();
        t3dcyl2.setTranslation(new Vector3f(6f, 6f, -6f));
        t3dcyl2.rotZ(Math.PI/2);
        tgcyl2.setTransform(t3dcyl2);
        tgcyl2.addChild(cyl2);
        
        Shape3D planes = new Shape3D();
        planes.setGeometry(qa);
        
        bg.addChild(planes);
        bg.addChild(sph1);
        bg.addChild(sph2);
        bg.addChild(cube1);
        bg.addChild(cube2);
        bg.addChild(column);
        bg.addChild(cyl1);
        bg.addChild(cyl2);
    }
    
    
        return bg;
    }


			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				133
			<iErrLine>
			<iErrMessage>
				illegal start of type
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				133
			<iErrLine>
			<iErrMessage>
				';' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				3686125
			</iTime>
			<fName>
				Population.java
			</fName>
			<fSize>
				4866.0
			</fSize>
			<fData>
/**
*   Title: Population.java
*   Description: A collection of various objects for display in a 3D envirionment
*   Date: January 26, 2015
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import com.sun.j3d.utils.geometry.*;
import javax.vecmath.*;
import javax.media.j3d.*;

public class Population
{
    private Population () {
        BranchGroup bg = new BranchGroup();
    }
    public BranchGroup getShapes () {    
        // create various inclined planes
        QuadArray qa = new QuadArray(12, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-0.5f, 0.1f, 0.5f));
        qa.setCoordinate(1, new Point3f(0.5f, 0.1f, 0.5f));
        qa.setCoordinate(2, new Point3f(0.5f, 0.1f, -0.5f));
        qa.setCoordinate(3, new Point3f(-0.5f, 0.1f, -0.5f));
        
        qa.setCoordinate(4, new Point3f(8f, 3f, -13f));
        qa.setCoordinate(5, new Point3f(10f, 3f, -13f));
        qa.setCoordinate(6, new Point3f(10f, 10f, -15f));
        qa.setCoordinate(7, new Point3f(8f, 10f, -15f));
        
        qa.setCoordinate(8, new Point3f(-3, 4f, 12f));
        qa.setCoordinate(9, new Point3f(-6f, 3f, 9f));
        qa.setCoordinate(10, new Point3f(-3f, 1f, 6f));
        qa.setCoordinate(11, new Point3f(-1f, 0.5f, 9f));
        
        
        
        // create sphere objects
        Sphere sph1 = new Sphere();  // defalut sphere radius 1
        TransformGroup tgSphere1 = new TransformGroup();
        Transform3D t3dSphere1 = new Transform3D();
        t3dSphere1.setTranslation(new Vector3f(-14.005f, 5f, 5f));
        tgSphere1.setTransform(t3dSphere1);
        tgSphere1.addChild(sph1);
        
        Appearance appsph2 = new Appearance();
        appsph2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 0f), 1));
        Sphere sph2 = new Sphere(1.5f, appsph2);  // sphere radius 1.5, colour red
        TransformGroup tgSphere2 = new TransformGroup();
        Transform3D t3dSphere2 = new Transform3D();
        t3dSphere2.setTranslation(new Vector3f(5f, 5f, 10f));
        tgSphere2.setTransform(t3dSphere2);
        tgSphere2.addChild(sph2);
        
        // create cube objects
        Box cube1 = new Box();  // default box with side length of 2
        TransformGroup tgc1 = new TransformGroup();
        Transform3D t3dc1 = new Transform3D();
        t3dc1.setTranslation(new Vector3f(10f, 2f, 10f));
        tgc1.setTransform(t3dc1);
        tgc1.addChild(cube1);
        
        Appearance appc2 = new Appearance();
        appc2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 0f), 1));
        Box cube2 = new Box(3f, 3f, 3f, appc2);  // box with side length 3, color green
        TransformGroup tgc2 = new TransformGroup();
        Transform3D t3dc2 = new Transform3D();
        t3dc2.setTranslation(new Vector3f(-7f, 10f, -12f));
        tgc2.setTransform(t3dc2);
        tgc2.addChild(cube2);
        
        // create column objects
        Appearance appcol = new Appearance();
        appcol.setColoringAttributes(new ColoringAttributes(new Color3f(0f, 1f, 1f), 1));
        Box column = new Box(1f, 4f, 1f, appcol);  // rectangular column with specified dimensions, color cyan
        TransformGroup tgcol = new TransformGroup();
        Transform3D t3dcol = new Transform3D();
        t3dcol.setTranslation(new Vector3f(-7f, 10f, -12f));
        t3dcol.rotX(Math.PI/4);
        t3dcol.rotY(Math.PI/6);
        tgcol.setTransform(t3dcol);
        tgcol.addChild(column);
        
        // create pole objects
        Cylinder cyl1 = new Cylinder();  // default cylinder radius 1, height 2
        TransformGroup tgcyl1 = new TransformGroup();
        Transform3D t3dcyl1 = new Transform3D();
        t3dcyl1.setTranslation(new Vector3f(9f, 1f, 0f));
        tgcyl1.setTransform(t3dcyl1);
        tgcyl1.addChild(cyl1);
        
        Appearance appcyl2 = new Appearance();
        appcyl2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 1f), 1));
        Cylinder cyl2 = new Cylinder(1.5f, 7f);  // cylinder with specified dimensions, color magenta
        TransformGroup tgcyl2 = new TransformGroup();
        Transform3D t3dcyl2 = new Transform3D();
        t3dcyl2.setTranslation(new Vector3f(6f, 6f, -6f));
        t3dcyl2.rotZ(Math.PI/2);
        tgcyl2.setTransform(t3dcyl2);
        tgcyl2.addChild(cyl2);
        
        Shape3D planes = new Shape3D();
        planes.setGeometry(qa);
        
        bg.addChild(planes);
        bg.addChild(sph1);
        bg.addChild(sph2);
        bg.addChild(cube1);
        bg.addChild(cube2);
        bg.addChild(column);
        bg.addChild(cyl1);
        bg.addChild(cyl2);
    
    
    
        return bg;
    }
}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				122
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable bg
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				123
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable bg
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				124
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable bg
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				125
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable bg
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				126
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable bg
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				127
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable bg
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				128
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable bg
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				129
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable bg
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				133
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable bg
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				3700375
			</iTime>
			<fName>
				Population.java
			</fName>
			<fSize>
				4874.0
			</fSize>
			<fData>
/**
*   Title: Population.java
*   Description: A collection of various objects for display in a 3D envirionment
*   Date: January 26, 2015
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import com.sun.j3d.utils.geometry.*;
import javax.vecmath.*;
import javax.media.j3d.*;

public class Population
{
    private Population () {
        private BranchGroup bg = new BranchGroup();
    }
    public BranchGroup getShapes () {    
        // create various inclined planes
        QuadArray qa = new QuadArray(12, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-0.5f, 0.1f, 0.5f));
        qa.setCoordinate(1, new Point3f(0.5f, 0.1f, 0.5f));
        qa.setCoordinate(2, new Point3f(0.5f, 0.1f, -0.5f));
        qa.setCoordinate(3, new Point3f(-0.5f, 0.1f, -0.5f));
        
        qa.setCoordinate(4, new Point3f(8f, 3f, -13f));
        qa.setCoordinate(5, new Point3f(10f, 3f, -13f));
        qa.setCoordinate(6, new Point3f(10f, 10f, -15f));
        qa.setCoordinate(7, new Point3f(8f, 10f, -15f));
        
        qa.setCoordinate(8, new Point3f(-3, 4f, 12f));
        qa.setCoordinate(9, new Point3f(-6f, 3f, 9f));
        qa.setCoordinate(10, new Point3f(-3f, 1f, 6f));
        qa.setCoordinate(11, new Point3f(-1f, 0.5f, 9f));
        
        
        
        // create sphere objects
        Sphere sph1 = new Sphere();  // defalut sphere radius 1
        TransformGroup tgSphere1 = new TransformGroup();
        Transform3D t3dSphere1 = new Transform3D();
        t3dSphere1.setTranslation(new Vector3f(-14.005f, 5f, 5f));
        tgSphere1.setTransform(t3dSphere1);
        tgSphere1.addChild(sph1);
        
        Appearance appsph2 = new Appearance();
        appsph2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 0f), 1));
        Sphere sph2 = new Sphere(1.5f, appsph2);  // sphere radius 1.5, colour red
        TransformGroup tgSphere2 = new TransformGroup();
        Transform3D t3dSphere2 = new Transform3D();
        t3dSphere2.setTranslation(new Vector3f(5f, 5f, 10f));
        tgSphere2.setTransform(t3dSphere2);
        tgSphere2.addChild(sph2);
        
        // create cube objects
        Box cube1 = new Box();  // default box with side length of 2
        TransformGroup tgc1 = new TransformGroup();
        Transform3D t3dc1 = new Transform3D();
        t3dc1.setTranslation(new Vector3f(10f, 2f, 10f));
        tgc1.setTransform(t3dc1);
        tgc1.addChild(cube1);
        
        Appearance appc2 = new Appearance();
        appc2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 0f), 1));
        Box cube2 = new Box(3f, 3f, 3f, appc2);  // box with side length 3, color green
        TransformGroup tgc2 = new TransformGroup();
        Transform3D t3dc2 = new Transform3D();
        t3dc2.setTranslation(new Vector3f(-7f, 10f, -12f));
        tgc2.setTransform(t3dc2);
        tgc2.addChild(cube2);
        
        // create column objects
        Appearance appcol = new Appearance();
        appcol.setColoringAttributes(new ColoringAttributes(new Color3f(0f, 1f, 1f), 1));
        Box column = new Box(1f, 4f, 1f, appcol);  // rectangular column with specified dimensions, color cyan
        TransformGroup tgcol = new TransformGroup();
        Transform3D t3dcol = new Transform3D();
        t3dcol.setTranslation(new Vector3f(-7f, 10f, -12f));
        t3dcol.rotX(Math.PI/4);
        t3dcol.rotY(Math.PI/6);
        tgcol.setTransform(t3dcol);
        tgcol.addChild(column);
        
        // create pole objects
        Cylinder cyl1 = new Cylinder();  // default cylinder radius 1, height 2
        TransformGroup tgcyl1 = new TransformGroup();
        Transform3D t3dcyl1 = new Transform3D();
        t3dcyl1.setTranslation(new Vector3f(9f, 1f, 0f));
        tgcyl1.setTransform(t3dcyl1);
        tgcyl1.addChild(cyl1);
        
        Appearance appcyl2 = new Appearance();
        appcyl2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 1f), 1));
        Cylinder cyl2 = new Cylinder(1.5f, 7f);  // cylinder with specified dimensions, color magenta
        TransformGroup tgcyl2 = new TransformGroup();
        Transform3D t3dcyl2 = new Transform3D();
        t3dcyl2.setTranslation(new Vector3f(6f, 6f, -6f));
        t3dcyl2.rotZ(Math.PI/2);
        tgcyl2.setTransform(t3dcyl2);
        tgcyl2.addChild(cyl2);
        
        Shape3D planes = new Shape3D();
        planes.setGeometry(qa);
        
        bg.addChild(planes);
        bg.addChild(sph1);
        bg.addChild(sph2);
        bg.addChild(cube1);
        bg.addChild(cube2);
        bg.addChild(column);
        bg.addChild(cyl1);
        bg.addChild(cyl2);
    
    
    
        return bg;
    }
}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				33
			<iErrLine>
			<iErrMessage>
				illegal start of expression
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				3713125
			</iTime>
			<fName>
				Population.java
			</fName>
			<fSize>
				4875.0
			</fSize>
			<fData>
/**
*   Title: Population.java
*   Description: A collection of various objects for display in a 3D envirionment
*   Date: January 26, 2015
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import com.sun.j3d.utils.geometry.*;
import javax.vecmath.*;
import javax.media.j3d.*;

public class Population
{
        private BranchGroup bg = new BranchGroup();
    private Population () {

    }
    public BranchGroup getShapes () {    
        // create various inclined planes
        QuadArray qa = new QuadArray(12, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-0.5f, 0.1f, 0.5f));
        qa.setCoordinate(1, new Point3f(0.5f, 0.1f, 0.5f));
        qa.setCoordinate(2, new Point3f(0.5f, 0.1f, -0.5f));
        qa.setCoordinate(3, new Point3f(-0.5f, 0.1f, -0.5f));
        
        qa.setCoordinate(4, new Point3f(8f, 3f, -13f));
        qa.setCoordinate(5, new Point3f(10f, 3f, -13f));
        qa.setCoordinate(6, new Point3f(10f, 10f, -15f));
        qa.setCoordinate(7, new Point3f(8f, 10f, -15f));
        
        qa.setCoordinate(8, new Point3f(-3, 4f, 12f));
        qa.setCoordinate(9, new Point3f(-6f, 3f, 9f));
        qa.setCoordinate(10, new Point3f(-3f, 1f, 6f));
        qa.setCoordinate(11, new Point3f(-1f, 0.5f, 9f));
        
        
        
        // create sphere objects
        Sphere sph1 = new Sphere();  // defalut sphere radius 1
        TransformGroup tgSphere1 = new TransformGroup();
        Transform3D t3dSphere1 = new Transform3D();
        t3dSphere1.setTranslation(new Vector3f(-14.005f, 5f, 5f));
        tgSphere1.setTransform(t3dSphere1);
        tgSphere1.addChild(sph1);
        
        Appearance appsph2 = new Appearance();
        appsph2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 0f), 1));
        Sphere sph2 = new Sphere(1.5f, appsph2);  // sphere radius 1.5, colour red
        TransformGroup tgSphere2 = new TransformGroup();
        Transform3D t3dSphere2 = new Transform3D();
        t3dSphere2.setTranslation(new Vector3f(5f, 5f, 10f));
        tgSphere2.setTransform(t3dSphere2);
        tgSphere2.addChild(sph2);
        
        // create cube objects
        Box cube1 = new Box();  // default box with side length of 2
        TransformGroup tgc1 = new TransformGroup();
        Transform3D t3dc1 = new Transform3D();
        t3dc1.setTranslation(new Vector3f(10f, 2f, 10f));
        tgc1.setTransform(t3dc1);
        tgc1.addChild(cube1);
        
        Appearance appc2 = new Appearance();
        appc2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 0f), 1));
        Box cube2 = new Box(3f, 3f, 3f, appc2);  // box with side length 3, color green
        TransformGroup tgc2 = new TransformGroup();
        Transform3D t3dc2 = new Transform3D();
        t3dc2.setTranslation(new Vector3f(-7f, 10f, -12f));
        tgc2.setTransform(t3dc2);
        tgc2.addChild(cube2);
        
        // create column objects
        Appearance appcol = new Appearance();
        appcol.setColoringAttributes(new ColoringAttributes(new Color3f(0f, 1f, 1f), 1));
        Box column = new Box(1f, 4f, 1f, appcol);  // rectangular column with specified dimensions, color cyan
        TransformGroup tgcol = new TransformGroup();
        Transform3D t3dcol = new Transform3D();
        t3dcol.setTranslation(new Vector3f(-7f, 10f, -12f));
        t3dcol.rotX(Math.PI/4);
        t3dcol.rotY(Math.PI/6);
        tgcol.setTransform(t3dcol);
        tgcol.addChild(column);
        
        // create pole objects
        Cylinder cyl1 = new Cylinder();  // default cylinder radius 1, height 2
        TransformGroup tgcyl1 = new TransformGroup();
        Transform3D t3dcyl1 = new Transform3D();
        t3dcyl1.setTranslation(new Vector3f(9f, 1f, 0f));
        tgcyl1.setTransform(t3dcyl1);
        tgcyl1.addChild(cyl1);
        
        Appearance appcyl2 = new Appearance();
        appcyl2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 1f), 1));
        Cylinder cyl2 = new Cylinder(1.5f, 7f);  // cylinder with specified dimensions, color magenta
        TransformGroup tgcyl2 = new TransformGroup();
        Transform3D t3dcyl2 = new Transform3D();
        t3dcyl2.setTranslation(new Vector3f(6f, 6f, -6f));
        t3dcyl2.rotZ(Math.PI/2);
        tgcyl2.setTransform(t3dcyl2);
        tgcyl2.addChild(cyl2);
        
        Shape3D planes = new Shape3D();
        planes.setGeometry(qa);
        
        bg.addChild(planes);
        bg.addChild(sph1);
        bg.addChild(sph2);
        bg.addChild(cube1);
        bg.addChild(cube2);
        bg.addChild(column);
        bg.addChild(cyl1);
        bg.addChild(cyl2);
    
    
    
        return bg;
    }
}

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				3759218
			</iTime>
			<fName>
				Population.java
			</fName>
			<fSize>
				4875.0
			</fSize>
			<fData>
/**
*   Title: Population.java
*   Description: A collection of various objects for display in a 3D envirionment
*   Date: January 26, 2015
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import com.sun.j3d.utils.geometry.*;
import javax.vecmath.*;
import javax.media.j3d.*;

public class Population
{
        private BranchGroup bg = new BranchGroup();
    private Population () {

        // create various inclined planes
        QuadArray qa = new QuadArray(12, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-0.5f, 0.1f, 0.5f));
        qa.setCoordinate(1, new Point3f(0.5f, 0.1f, 0.5f));
        qa.setCoordinate(2, new Point3f(0.5f, 0.1f, -0.5f));
        qa.setCoordinate(3, new Point3f(-0.5f, 0.1f, -0.5f));
        
        qa.setCoordinate(4, new Point3f(8f, 3f, -13f));
        qa.setCoordinate(5, new Point3f(10f, 3f, -13f));
        qa.setCoordinate(6, new Point3f(10f, 10f, -15f));
        qa.setCoordinate(7, new Point3f(8f, 10f, -15f));
        
        qa.setCoordinate(8, new Point3f(-3, 4f, 12f));
        qa.setCoordinate(9, new Point3f(-6f, 3f, 9f));
        qa.setCoordinate(10, new Point3f(-3f, 1f, 6f));
        qa.setCoordinate(11, new Point3f(-1f, 0.5f, 9f));
        
        
        
        // create sphere objects
        Sphere sph1 = new Sphere();  // defalut sphere radius 1
        TransformGroup tgSphere1 = new TransformGroup();
        Transform3D t3dSphere1 = new Transform3D();
        t3dSphere1.setTranslation(new Vector3f(-14.005f, 5f, 5f));
        tgSphere1.setTransform(t3dSphere1);
        tgSphere1.addChild(sph1);
        
        Appearance appsph2 = new Appearance();
        appsph2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 0f), 1));
        Sphere sph2 = new Sphere(1.5f, appsph2);  // sphere radius 1.5, colour red
        TransformGroup tgSphere2 = new TransformGroup();
        Transform3D t3dSphere2 = new Transform3D();
        t3dSphere2.setTranslation(new Vector3f(5f, 5f, 10f));
        tgSphere2.setTransform(t3dSphere2);
        tgSphere2.addChild(sph2);
        
        // create cube objects
        Box cube1 = new Box();  // default box with side length of 2
        TransformGroup tgc1 = new TransformGroup();
        Transform3D t3dc1 = new Transform3D();
        t3dc1.setTranslation(new Vector3f(10f, 2f, 10f));
        tgc1.setTransform(t3dc1);
        tgc1.addChild(cube1);
        
        Appearance appc2 = new Appearance();
        appc2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 0f), 1));
        Box cube2 = new Box(3f, 3f, 3f, appc2);  // box with side length 3, color green
        TransformGroup tgc2 = new TransformGroup();
        Transform3D t3dc2 = new Transform3D();
        t3dc2.setTranslation(new Vector3f(-7f, 10f, -12f));
        tgc2.setTransform(t3dc2);
        tgc2.addChild(cube2);
        
        // create column objects
        Appearance appcol = new Appearance();
        appcol.setColoringAttributes(new ColoringAttributes(new Color3f(0f, 1f, 1f), 1));
        Box column = new Box(1f, 4f, 1f, appcol);  // rectangular column with specified dimensions, color cyan
        TransformGroup tgcol = new TransformGroup();
        Transform3D t3dcol = new Transform3D();
        t3dcol.setTranslation(new Vector3f(-7f, 10f, -12f));
        t3dcol.rotX(Math.PI/4);
        t3dcol.rotY(Math.PI/6);
        tgcol.setTransform(t3dcol);
        tgcol.addChild(column);
        
        // create pole objects
        Cylinder cyl1 = new Cylinder();  // default cylinder radius 1, height 2
        TransformGroup tgcyl1 = new TransformGroup();
        Transform3D t3dcyl1 = new Transform3D();
        t3dcyl1.setTranslation(new Vector3f(9f, 1f, 0f));
        tgcyl1.setTransform(t3dcyl1);
        tgcyl1.addChild(cyl1);
        
        Appearance appcyl2 = new Appearance();
        appcyl2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 1f), 1));
        Cylinder cyl2 = new Cylinder(1.5f, 7f);  // cylinder with specified dimensions, color magenta
        TransformGroup tgcyl2 = new TransformGroup();
        Transform3D t3dcyl2 = new Transform3D();
        t3dcyl2.setTranslation(new Vector3f(6f, 6f, -6f));
        t3dcyl2.rotZ(Math.PI/2);
        tgcyl2.setTransform(t3dcyl2);
        tgcyl2.addChild(cyl2);
        
        Shape3D planes = new Shape3D();
        planes.setGeometry(qa);
        
        bg.addChild(planes);
        bg.addChild(sph1);
        bg.addChild(sph2);
        bg.addChild(cube1);
        bg.addChild(cube2);
        bg.addChild(column);
        bg.addChild(cyl1);
        bg.addChild(cyl2);
    
    }
    
    public BranchGroup getShapes () {        
        return bg;
    }

}

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				3776265
			</iTime>
			<fName>
				MyOwn3D.java
			</fName>
			<fSize>
				8669.0
			</fSize>
			<fData>
/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor with grid lines
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 2.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.applet.Applet;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;

public class MyOwn3D extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere();   // for environment nodes
    private SimpleUniverse su;
    
    // constructor
    public MyOwn3D() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
        BranchGroup scene = createSceneGraph();
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor

    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();  // root of visual objects in scene graph
        
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);  // solid color blue for coloring sides and floor
        
        // create the sides and floor
        TransformGroup floor = makeFace("floor", blue);
        TransformGroup back = makeFace("back", blue);
        TransformGroup front = makeFace("front", blue);
        TransformGroup left = makeFace("left", blue);
        TransformGroup right = makeFace("right", blue);
        // TransformGroup ceiling = makeFace("ceiling", new Color3f(1.0f, 1.0f, 1.0f));  // white
        
        // create lines to divide surfaces into 3x3 grids
        Shape3D grid = makeGrid();
        
        // add children to root branch graph
        objRoot.addChild(floor);
        objRoot.addChild(back);
        objRoot.addChild(left);
        objRoot.addChild(right);
        objRoot.addChild(front);
        // objRoot.addChild(ceiling);
        objRoot.addChild(grid);
        
        Population shapes = new Population();
        objRoot.addChild(shapes.getShapes());
        
        return objRoot;
    } // end of method

    // method to create sides and floor of a room
    private TransformGroup makeFace(String face, Color3f faceColor) {
        
        // create standard QuadArray with coordinates for basic surface
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-15f, 0f, 15f));
        qa.setCoordinate(1, new Point3f(15f, 0f, 15f));
        qa.setCoordinate(2, new Point3f(15f, 0f, -15f));
        qa.setCoordinate(3, new Point3f(-15f, 0f, -15f));
        
        // set color for created quad
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        // create ability to transform and translate surface to correct position
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        // create surface based on input paramaters
        // surfaces are off by a factor of 0.005 to allow grid lines to be more visible
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15.005f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.rotX(Math.PI);
                t3d.setTranslation(new Vector3f(0f, 15.005f, 0f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "left": t3d.rotZ(-Math.PI/2);
                t3d.setTranslation(new Vector3f(-15.005f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "right": t3d.rotZ(Math.PI/2);
                t3d.setTranslation(new Vector3f(15.005f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.rotX(-Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, 15.005f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.rotX(Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, -15.005f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
        return tg;
    } // end of makeFace method
    
    // makes lines to divide constructed area into 3x3 grid for each side
    private Shape3D makeGrid() {
        
        // set up initial coordinates for z plane grid lines
        Point3f[] gridCoords = new Point3f[47];
        gridCoords[0] = new Point3f(-15f, 15f, 15f);
        gridCoords[1] = new Point3f(-15f, -15f, 15f);
        gridCoords[2] = new Point3f(15f, -15f, 15f);
        gridCoords[3] = new Point3f(15f, 15f, 15f);
        
        // create remaining grid lines through z plane
        Point3f adjust = new Point3f(0, 0, -10);
        for (int i = 4; i < 16; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        // set up initial coordinates for x plane grid lines
        gridCoords[16] = new Point3f(gridCoords[3]);
        gridCoords[17] = new Point3f(gridCoords[2]);
        gridCoords[18] = new Point3f(gridCoords[14]);
        gridCoords[19] = new Point3f(gridCoords[15]);
        
        // create remaining grid lines through x plane
        adjust = new Point3f(-10, 0, 0);
        for (int i = 20; i < 32; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        // set up initial coordinates for y plane grid lines
        gridCoords[32] = new Point3f(gridCoords[0]);
        gridCoords[33] = new Point3f(gridCoords[3]);
        gridCoords[34] = new Point3f(gridCoords[15]);
        gridCoords[35] = new Point3f(gridCoords[12]);
        gridCoords[36] = new Point3f(gridCoords[0]);
        
        // create remaining grid lines through y plane
        adjust = new Point3f(0, -10, 0);
        for (int i = 37; i < 47; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 5]);
            gridCoords[i].add(adjust);
        }
        
        // create array for vertex counts in LineStripArray
        int[] lineCounts = new int[11];
        for (int i = 0; i < lineCounts.length; i++) {
            if (i < 8) {lineCounts[i] = 4;}
            else {lineCounts[i] = 5;}
        }
        
        // create LineStripArray object to create lines
        LineStripArray grid = new LineStripArray(47, LineStripArray.COORDINATES, lineCounts);
        for (int i = 0; i < gridCoords.length; i++) {
            grid.setCoordinate(i, gridCoords[i]);
        }
        
        return new Shape3D(grid);
    } // end of makeGrid method
    
    private void orbitControls(Canvas3D c)
    /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
    {
        OrbitBehavior orbit = 
            new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
        orbit.setSchedulingBounds(bounds);

        ViewingPlatform vp = su.getViewingPlatform();
        vp.setViewPlatformBehavior(orbit);      
    } // end of orbitControls()

    private void initUserPosition()
    // Set the user's initial viewpoint using lookAt()
    {
        ViewingPlatform vp = su.getViewingPlatform();
        TransformGroup steerTG = vp.getViewPlatformTransform();

        Transform3D t3d = new Transform3D();
        steerTG.getTransform(t3d);

        // args are: viewer posn, where looking, up direction
        t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
        t3d.invert();

        steerTG.setTransform(t3d);
    } // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3D(), 256, 256);
    } // end of main
} // end of class

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				84
			<iErrLine>
			<iErrMessage>
				Population() has private access in Population
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				3813250
			</iTime>
			<fName>
				MyOwn3D.java
			</fName>
			<fSize>
				8669.0
			</fSize>
			<fData>
/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor with grid lines
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 2.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.applet.Applet;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;

public class MyOwn3D extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere();   // for environment nodes
    private SimpleUniverse su;
    
    // constructor
    public MyOwn3D() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
        BranchGroup scene = createSceneGraph();
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor

    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();  // root of visual objects in scene graph
        
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);  // solid color blue for coloring sides and floor
        
        // create the sides and floor
        TransformGroup floor = makeFace("floor", blue);
        TransformGroup back = makeFace("back", blue);
        TransformGroup front = makeFace("front", blue);
        TransformGroup left = makeFace("left", blue);
        TransformGroup right = makeFace("right", blue);
        // TransformGroup ceiling = makeFace("ceiling", new Color3f(1.0f, 1.0f, 1.0f));  // white
        
        // create lines to divide surfaces into 3x3 grids
        Shape3D grid = makeGrid();
        
        // add children to root branch graph
        objRoot.addChild(floor);
        objRoot.addChild(back);
        objRoot.addChild(left);
        objRoot.addChild(right);
        objRoot.addChild(front);
        // objRoot.addChild(ceiling);
        objRoot.addChild(grid);
        
        Population shapes = new Population();
        objRoot.addChild(shapes.getShapes());
        
        return objRoot;
    } // end of method

    // method to create sides and floor of a room
    private TransformGroup makeFace(String face, Color3f faceColor) {
        
        // create standard QuadArray with coordinates for basic surface
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-15f, 0f, 15f));
        qa.setCoordinate(1, new Point3f(15f, 0f, 15f));
        qa.setCoordinate(2, new Point3f(15f, 0f, -15f));
        qa.setCoordinate(3, new Point3f(-15f, 0f, -15f));
        
        // set color for created quad
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        // create ability to transform and translate surface to correct position
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        // create surface based on input paramaters
        // surfaces are off by a factor of 0.005 to allow grid lines to be more visible
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15.005f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.rotX(Math.PI);
                t3d.setTranslation(new Vector3f(0f, 15.005f, 0f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "left": t3d.rotZ(-Math.PI/2);
                t3d.setTranslation(new Vector3f(-15.005f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "right": t3d.rotZ(Math.PI/2);
                t3d.setTranslation(new Vector3f(15.005f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.rotX(-Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, 15.005f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.rotX(Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, -15.005f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
        return tg;
    } // end of makeFace method
    
    // makes lines to divide constructed area into 3x3 grid for each side
    private Shape3D makeGrid() {
        
        // set up initial coordinates for z plane grid lines
        Point3f[] gridCoords = new Point3f[47];
        gridCoords[0] = new Point3f(-15f, 15f, 15f);
        gridCoords[1] = new Point3f(-15f, -15f, 15f);
        gridCoords[2] = new Point3f(15f, -15f, 15f);
        gridCoords[3] = new Point3f(15f, 15f, 15f);
        
        // create remaining grid lines through z plane
        Point3f adjust = new Point3f(0, 0, -10);
        for (int i = 4; i < 16; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        // set up initial coordinates for x plane grid lines
        gridCoords[16] = new Point3f(gridCoords[3]);
        gridCoords[17] = new Point3f(gridCoords[2]);
        gridCoords[18] = new Point3f(gridCoords[14]);
        gridCoords[19] = new Point3f(gridCoords[15]);
        
        // create remaining grid lines through x plane
        adjust = new Point3f(-10, 0, 0);
        for (int i = 20; i < 32; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        // set up initial coordinates for y plane grid lines
        gridCoords[32] = new Point3f(gridCoords[0]);
        gridCoords[33] = new Point3f(gridCoords[3]);
        gridCoords[34] = new Point3f(gridCoords[15]);
        gridCoords[35] = new Point3f(gridCoords[12]);
        gridCoords[36] = new Point3f(gridCoords[0]);
        
        // create remaining grid lines through y plane
        adjust = new Point3f(0, -10, 0);
        for (int i = 37; i < 47; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 5]);
            gridCoords[i].add(adjust);
        }
        
        // create array for vertex counts in LineStripArray
        int[] lineCounts = new int[11];
        for (int i = 0; i < lineCounts.length; i++) {
            if (i < 8) {lineCounts[i] = 4;}
            else {lineCounts[i] = 5;}
        }
        
        // create LineStripArray object to create lines
        LineStripArray grid = new LineStripArray(47, LineStripArray.COORDINATES, lineCounts);
        for (int i = 0; i < gridCoords.length; i++) {
            grid.setCoordinate(i, gridCoords[i]);
        }
        
        return new Shape3D(grid);
    } // end of makeGrid method
    
    private void orbitControls(Canvas3D c)
    /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
    {
        OrbitBehavior orbit = 
            new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
        orbit.setSchedulingBounds(bounds);

        ViewingPlatform vp = su.getViewingPlatform();
        vp.setViewPlatformBehavior(orbit);      
    } // end of orbitControls()

    private void initUserPosition()
    // Set the user's initial viewpoint using lookAt()
    {
        ViewingPlatform vp = su.getViewingPlatform();
        TransformGroup steerTG = vp.getViewPlatformTransform();

        Transform3D t3d = new Transform3D();
        steerTG.getTransform(t3d);

        // args are: viewer posn, where looking, up direction
        t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
        t3d.invert();

        steerTG.setTransform(t3d);
    } // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3D(), 256, 256);
    } // end of main
} // end of class

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				3914156
			</iTime>
			<fName>
				Population.java
			</fName>
			<fSize>
				4872.0
			</fSize>
			<fData>
/**
*   Title: Population.java
*   Description: A collection of various objects for display in a 3D envirionment
*   Date: January 26, 2015
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import com.sun.j3d.utils.geometry.*;
import javax.vecmath.*;
import javax.media.j3d.*;

public class Population
{
        private BranchGroup bg = new BranchGroup();
    Population () {

        // create various inclined planes
        QuadArray qa = new QuadArray(12, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-0.5f, 0.1f, 0.5f));
        qa.setCoordinate(1, new Point3f(0.5f, 0.1f, 0.5f));
        qa.setCoordinate(2, new Point3f(0.5f, 0.1f, -0.5f));
        qa.setCoordinate(3, new Point3f(-0.5f, 0.1f, -0.5f));
        
        qa.setCoordinate(4, new Point3f(8f, 3f, -13f));
        qa.setCoordinate(5, new Point3f(10f, 3f, -13f));
        qa.setCoordinate(6, new Point3f(10f, 10f, -15f));
        qa.setCoordinate(7, new Point3f(8f, 10f, -15f));
        
        qa.setCoordinate(8, new Point3f(-3, 4f, 12f));
        qa.setCoordinate(9, new Point3f(-6f, 3f, 9f));
        qa.setCoordinate(10, new Point3f(-3f, 1f, 6f));
        qa.setCoordinate(11, new Point3f(-1f, 0.5f, 9f));
        
        
        
        // create sphere objects
        Sphere sph1 = new Sphere();  // defalut sphere radius 1
        TransformGroup tgSphere1 = new TransformGroup();
        Transform3D t3dSphere1 = new Transform3D();
        t3dSphere1.setTranslation(new Vector3f(-14.005f, 5f, 5f));
        tgSphere1.setTransform(t3dSphere1);
        tgSphere1.addChild(sph1);
        
        Appearance appsph2 = new Appearance();
        appsph2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 0f), 1));
        Sphere sph2 = new Sphere(1.5f, appsph2);  // sphere radius 1.5, colour red
        TransformGroup tgSphere2 = new TransformGroup();
        Transform3D t3dSphere2 = new Transform3D();
        t3dSphere2.setTranslation(new Vector3f(5f, 5f, 10f));
        tgSphere2.setTransform(t3dSphere2);
        tgSphere2.addChild(sph2);
        
        // create cube objects
        Box cube1 = new Box();  // default box with side length of 2
        TransformGroup tgc1 = new TransformGroup();
        Transform3D t3dc1 = new Transform3D();
        t3dc1.setTranslation(new Vector3f(10f, 2f, 10f));
        tgc1.setTransform(t3dc1);
        tgc1.addChild(cube1);
        
        Appearance appc2 = new Appearance();
        appc2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 0f), 1));
        Box cube2 = new Box(3f, 3f, 3f, appc2);  // box with side length 3, color green
        TransformGroup tgc2 = new TransformGroup();
        Transform3D t3dc2 = new Transform3D();
        t3dc2.setTranslation(new Vector3f(-7f, 10f, -12f));
        tgc2.setTransform(t3dc2);
        tgc2.addChild(cube2);
        
        // create column objects
        Appearance appcol = new Appearance();
        appcol.setColoringAttributes(new ColoringAttributes(new Color3f(0f, 1f, 1f), 1));
        Box column = new Box(1f, 4f, 1f, appcol);  // rectangular column with specified dimensions, color cyan
        TransformGroup tgcol = new TransformGroup();
        Transform3D t3dcol = new Transform3D();
        t3dcol.setTranslation(new Vector3f(-7f, 10f, -12f));
        t3dcol.rotX(Math.PI/4);
        t3dcol.rotY(Math.PI/6);
        tgcol.setTransform(t3dcol);
        tgcol.addChild(column);
        
        // create pole objects
        Cylinder cyl1 = new Cylinder();  // default cylinder radius 1, height 2
        TransformGroup tgcyl1 = new TransformGroup();
        Transform3D t3dcyl1 = new Transform3D();
        t3dcyl1.setTranslation(new Vector3f(9f, 1f, 0f));
        tgcyl1.setTransform(t3dcyl1);
        tgcyl1.addChild(cyl1);
        
        Appearance appcyl2 = new Appearance();
        appcyl2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 1f), 1));
        Cylinder cyl2 = new Cylinder(1.5f, 7f);  // cylinder with specified dimensions, color magenta
        TransformGroup tgcyl2 = new TransformGroup();
        Transform3D t3dcyl2 = new Transform3D();
        t3dcyl2.setTranslation(new Vector3f(6f, 6f, -6f));
        t3dcyl2.rotZ(Math.PI/2);
        tgcyl2.setTransform(t3dcyl2);
        tgcyl2.addChild(cyl2);
        
        Shape3D planes = new Shape3D();
        planes.setGeometry(qa);
        
        bg.addChild(planes);
        bg.addChild(tgsph1);
        bg.addChild(tgsph2);
        bg.addChild(tgc1);
        bg.addChild(tgc2);
        bg.addChild(tgcol);
        bg.addChild(tgcyl1);
        bg.addChild(tgcyl2);
    
    }
    
    public BranchGroup getShapes () {        
        return bg;
    }

}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				122
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable tgsph1
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				123
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable tgsph2
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				3947000
			</iTime>
			<fName>
				Population.java
			</fName>
			<fSize>
				4878.0
			</fSize>
			<fData>
/**
*   Title: Population.java
*   Description: A collection of various objects for display in a 3D envirionment
*   Date: January 26, 2015
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import com.sun.j3d.utils.geometry.*;
import javax.vecmath.*;
import javax.media.j3d.*;

public class Population
{
        private BranchGroup bg = new BranchGroup();
    Population () {

        // create various inclined planes
        QuadArray qa = new QuadArray(12, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-0.5f, 0.1f, 0.5f));
        qa.setCoordinate(1, new Point3f(0.5f, 0.1f, 0.5f));
        qa.setCoordinate(2, new Point3f(0.5f, 0.1f, -0.5f));
        qa.setCoordinate(3, new Point3f(-0.5f, 0.1f, -0.5f));
        
        qa.setCoordinate(4, new Point3f(8f, 3f, -13f));
        qa.setCoordinate(5, new Point3f(10f, 3f, -13f));
        qa.setCoordinate(6, new Point3f(10f, 10f, -15f));
        qa.setCoordinate(7, new Point3f(8f, 10f, -15f));
        
        qa.setCoordinate(8, new Point3f(-3, 4f, 12f));
        qa.setCoordinate(9, new Point3f(-6f, 3f, 9f));
        qa.setCoordinate(10, new Point3f(-3f, 1f, 6f));
        qa.setCoordinate(11, new Point3f(-1f, 0.5f, 9f));
        
        
        
        // create sphere objects
        Sphere sph1 = new Sphere();  // defalut sphere radius 1
        TransformGroup tgSphere1 = new TransformGroup();
        Transform3D t3dSphere1 = new Transform3D();
        t3dSphere1.setTranslation(new Vector3f(-14.005f, 5f, 5f));
        tgSphere1.setTransform(t3dSphere1);
        tgSphere1.addChild(sph1);
        
        Appearance appsph2 = new Appearance();
        appsph2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 0f), 1));
        Sphere sph2 = new Sphere(1.5f, appsph2);  // sphere radius 1.5, colour red
        TransformGroup tgSphere2 = new TransformGroup();
        Transform3D t3dSphere2 = new Transform3D();
        t3dSphere2.setTranslation(new Vector3f(5f, 5f, 10f));
        tgSphere2.setTransform(t3dSphere2);
        tgSphere2.addChild(sph2);
        
        // create cube objects
        Box cube1 = new Box();  // default box with side length of 2
        TransformGroup tgc1 = new TransformGroup();
        Transform3D t3dc1 = new Transform3D();
        t3dc1.setTranslation(new Vector3f(10f, 2f, 10f));
        tgc1.setTransform(t3dc1);
        tgc1.addChild(cube1);
        
        Appearance appc2 = new Appearance();
        appc2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 0f), 1));
        Box cube2 = new Box(3f, 3f, 3f, appc2);  // box with side length 3, color green
        TransformGroup tgc2 = new TransformGroup();
        Transform3D t3dc2 = new Transform3D();
        t3dc2.setTranslation(new Vector3f(-7f, 10f, -12f));
        tgc2.setTransform(t3dc2);
        tgc2.addChild(cube2);
        
        // create column objects
        Appearance appcol = new Appearance();
        appcol.setColoringAttributes(new ColoringAttributes(new Color3f(0f, 1f, 1f), 1));
        Box column = new Box(1f, 4f, 1f, appcol);  // rectangular column with specified dimensions, color cyan
        TransformGroup tgcol = new TransformGroup();
        Transform3D t3dcol = new Transform3D();
        t3dcol.setTranslation(new Vector3f(-7f, 10f, -12f));
        t3dcol.rotX(Math.PI/4);
        t3dcol.rotY(Math.PI/6);
        tgcol.setTransform(t3dcol);
        tgcol.addChild(column);
        
        // create pole objects
        Cylinder cyl1 = new Cylinder();  // default cylinder radius 1, height 2
        TransformGroup tgcyl1 = new TransformGroup();
        Transform3D t3dcyl1 = new Transform3D();
        t3dcyl1.setTranslation(new Vector3f(9f, 1f, 0f));
        tgcyl1.setTransform(t3dcyl1);
        tgcyl1.addChild(cyl1);
        
        Appearance appcyl2 = new Appearance();
        appcyl2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 1f), 1));
        Cylinder cyl2 = new Cylinder(1.5f, 7f);  // cylinder with specified dimensions, color magenta
        TransformGroup tgcyl2 = new TransformGroup();
        Transform3D t3dcyl2 = new Transform3D();
        t3dcyl2.setTranslation(new Vector3f(6f, 6f, -6f));
        t3dcyl2.rotZ(Math.PI/2);
        tgcyl2.setTransform(t3dcyl2);
        tgcyl2.addChild(cyl2);
        
        Shape3D planes = new Shape3D();
        planes.setGeometry(qa);
        
        bg.addChild(planes);
        bg.addChild(tgSphere1);
        bg.addChild(tgSphere2);
        bg.addChild(tgc1);
        bg.addChild(tgc2);
        bg.addChild(tgcol);
        bg.addChild(tgcyl1);
        bg.addChild(tgcyl2);
    
    }
    
    public BranchGroup getShapes () {        
        return bg;
    }

}

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				3958484
			</iTime>
			<fName>
				MyOwn3D.java
			</fName>
			<fSize>
				8669.0
			</fSize>
			<fData>
/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor with grid lines
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 2.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.applet.Applet;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;

public class MyOwn3D extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere();   // for environment nodes
    private SimpleUniverse su;
    
    // constructor
    public MyOwn3D() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
        BranchGroup scene = createSceneGraph();
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor

    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();  // root of visual objects in scene graph
        
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);  // solid color blue for coloring sides and floor
        
        // create the sides and floor
        TransformGroup floor = makeFace("floor", blue);
        TransformGroup back = makeFace("back", blue);
        TransformGroup front = makeFace("front", blue);
        TransformGroup left = makeFace("left", blue);
        TransformGroup right = makeFace("right", blue);
        // TransformGroup ceiling = makeFace("ceiling", new Color3f(1.0f, 1.0f, 1.0f));  // white
        
        // create lines to divide surfaces into 3x3 grids
        Shape3D grid = makeGrid();
        
        // add children to root branch graph
        objRoot.addChild(floor);
        objRoot.addChild(back);
        objRoot.addChild(left);
        objRoot.addChild(right);
        objRoot.addChild(front);
        // objRoot.addChild(ceiling);
        objRoot.addChild(grid);
        
        Population shapes = new Population();
        objRoot.addChild(shapes.getShapes());
        
        return objRoot;
    } // end of method

    // method to create sides and floor of a room
    private TransformGroup makeFace(String face, Color3f faceColor) {
        
        // create standard QuadArray with coordinates for basic surface
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-15f, 0f, 15f));
        qa.setCoordinate(1, new Point3f(15f, 0f, 15f));
        qa.setCoordinate(2, new Point3f(15f, 0f, -15f));
        qa.setCoordinate(3, new Point3f(-15f, 0f, -15f));
        
        // set color for created quad
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        // create ability to transform and translate surface to correct position
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        // create surface based on input paramaters
        // surfaces are off by a factor of 0.005 to allow grid lines to be more visible
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15.005f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.rotX(Math.PI);
                t3d.setTranslation(new Vector3f(0f, 15.005f, 0f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "left": t3d.rotZ(-Math.PI/2);
                t3d.setTranslation(new Vector3f(-15.005f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "right": t3d.rotZ(Math.PI/2);
                t3d.setTranslation(new Vector3f(15.005f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.rotX(-Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, 15.005f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.rotX(Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, -15.005f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
        return tg;
    } // end of makeFace method
    
    // makes lines to divide constructed area into 3x3 grid for each side
    private Shape3D makeGrid() {
        
        // set up initial coordinates for z plane grid lines
        Point3f[] gridCoords = new Point3f[47];
        gridCoords[0] = new Point3f(-15f, 15f, 15f);
        gridCoords[1] = new Point3f(-15f, -15f, 15f);
        gridCoords[2] = new Point3f(15f, -15f, 15f);
        gridCoords[3] = new Point3f(15f, 15f, 15f);
        
        // create remaining grid lines through z plane
        Point3f adjust = new Point3f(0, 0, -10);
        for (int i = 4; i < 16; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        // set up initial coordinates for x plane grid lines
        gridCoords[16] = new Point3f(gridCoords[3]);
        gridCoords[17] = new Point3f(gridCoords[2]);
        gridCoords[18] = new Point3f(gridCoords[14]);
        gridCoords[19] = new Point3f(gridCoords[15]);
        
        // create remaining grid lines through x plane
        adjust = new Point3f(-10, 0, 0);
        for (int i = 20; i < 32; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        // set up initial coordinates for y plane grid lines
        gridCoords[32] = new Point3f(gridCoords[0]);
        gridCoords[33] = new Point3f(gridCoords[3]);
        gridCoords[34] = new Point3f(gridCoords[15]);
        gridCoords[35] = new Point3f(gridCoords[12]);
        gridCoords[36] = new Point3f(gridCoords[0]);
        
        // create remaining grid lines through y plane
        adjust = new Point3f(0, -10, 0);
        for (int i = 37; i < 47; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 5]);
            gridCoords[i].add(adjust);
        }
        
        // create array for vertex counts in LineStripArray
        int[] lineCounts = new int[11];
        for (int i = 0; i < lineCounts.length; i++) {
            if (i < 8) {lineCounts[i] = 4;}
            else {lineCounts[i] = 5;}
        }
        
        // create LineStripArray object to create lines
        LineStripArray grid = new LineStripArray(47, LineStripArray.COORDINATES, lineCounts);
        for (int i = 0; i < gridCoords.length; i++) {
            grid.setCoordinate(i, gridCoords[i]);
        }
        
        return new Shape3D(grid);
    } // end of makeGrid method
    
    private void orbitControls(Canvas3D c)
    /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
    {
        OrbitBehavior orbit = 
            new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
        orbit.setSchedulingBounds(bounds);

        ViewingPlatform vp = su.getViewingPlatform();
        vp.setViewPlatformBehavior(orbit);      
    } // end of orbitControls()

    private void initUserPosition()
    // Set the user's initial viewpoint using lookAt()
    {
        ViewingPlatform vp = su.getViewingPlatform();
        TransformGroup steerTG = vp.getViewPlatformTransform();

        Transform3D t3d = new Transform3D();
        steerTG.getTransform(t3d);

        // args are: viewer posn, where looking, up direction
        t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
        t3d.invert();

        steerTG.setTransform(t3d);
    } // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3D(), 256, 256);
    } // end of main
} // end of class

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				4826421
			</iTime>
			<fName>
				Population.java
			</fName>
			<fSize>
				5134.0
			</fSize>
			<fData>
/**
*   Title: Population.java
*   Description: A collection of various objects for display in a 3D envirionment
*   Date: January 26, 2015
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import com.sun.j3d.utils.geometry.*;
import javax.vecmath.*;
import javax.media.j3d.*;

public class Population
{
    private BranchGroup bg = new BranchGroup();
    
    Population () {

        // create various inclined planes
        QuadArray qa = new QuadArray(12, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-0.5f, 0.1f, 0.5f));
        qa.setCoordinate(1, new Point3f(0.5f, 0.1f, 0.5f));
        qa.setCoordinate(2, new Point3f(0.5f, 0.1f, -0.5f));
        qa.setCoordinate(3, new Point3f(-0.5f, 0.1f, -0.5f));
        
        qa.setCoordinate(4, new Point3f(8f, 3f, -13f));
        qa.setCoordinate(5, new Point3f(10f, 3f, -13f));
        qa.setCoordinate(6, new Point3f(10f, 10f, -15f));
        qa.setCoordinate(7, new Point3f(8f, 10f, -15f));
        
        qa.setCoordinate(8, new Point3f(-3, 4f, 12f));
        qa.setCoordinate(9, new Point3f(-6f, 3f, 9f));
        qa.setCoordinate(10, new Point3f(-3f, 1f, 6f));
        qa.setCoordinate(11, new Point3f(-1f, 0.5f, 9f));
        
        
        // create sphere objects
        Sphere sph1 = new Sphere();  // defalut sphere radius 1
        TransformGroup tgSphere1 = new TransformGroup();
        Transform3D t3dSphere1 = new Transform3D();
        t3dSphere1.setTranslation(new Vector3f(-14.005f, 5f, 5f));
        tgSphere1.setTransform(t3dSphere1);
        tgSphere1.addChild(sph1);
        
        Appearance appsph2 = new Appearance();
        appsph2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 0f), 1));
        Sphere sph2 = new Sphere(1.5f, appsph2);  // sphere radius 1.5, colour red
        TransformGroup tgSphere2 = new TransformGroup();
        Transform3D t3dSphere2 = new Transform3D();
        t3dSphere2.setTranslation(new Vector3f(5f, 5f, 10f));
        tgSphere2.setTransform(t3dSphere2);
        tgSphere2.addChild(sph2);
        
        // create cube objects
        Box cube1 = new Box();  // default box with side length of 2
        TransformGroup tgc1 = new TransformGroup();
        Transform3D t3dc1 = new Transform3D();
        t3dc1.setTranslation(new Vector3f(10f, 2f, 10f));
        tgc1.setTransform(t3dc1);
        tgc1.addChild(cube1);
        
        Appearance appc2 = new Appearance();
        appc2.setColoringAttributes(new ColoringAttributes(new Color3f(0f, 1f, 0f), 1));
        Box cube2 = new Box(3f, 3f, 3f, appc2);  // box with side length 3, color green
        TransformGroup tgc2 = new TransformGroup();
        Transform3D t3dc2 = new Transform3D();
        t3dc2.setTranslation(new Vector3f(-7f, 10f, -12f));
        tgc2.setTransform(t3dc2);
        tgc2.addChild(cube2);
        
        // create column objects
        Appearance appcol = new Appearance();
        appcol.setColoringAttributes(new ColoringAttributes(new Color3f(0f, 1f, 1f), 1));
        Box column = new Box(1f, 4f, 1f, appcol);  // rectangular column with specified dimensions, color cyan
        TransformGroup tgcol = new TransformGroup();
        Transform3D t3dcol = new Transform3D();
        t3dcol.setTranslation(new Vector3f(-7f, 10f, -12f));
        tgcol.setTransform(t3dcol);
        t3dcol.rotX(Math.PI/4);
        t3dcol.rotY(Math.PI/6);        
        tgcol.addChild(column);
        
        // create pole objects
        Cylinder cyl1 = new Cylinder();  // default cylinder radius 1, height 2
        TransformGroup tgcyl1 = new TransformGroup();
        Transform3D t3dcyl1 = new Transform3D();
        t3dcyl1.setTranslation(new Vector3f(9f, 1f, 0f));
        tgcyl1.setTransform(t3dcyl1);
        tgcyl1.addChild(cyl1);
        
        Appearance appcyl2 = new Appearance();
        appcyl2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 1f), 1));
        Cylinder cyl2 = new Cylinder(1.5f, 7f);  // cylinder with specified dimensions, color magenta
        TransformGroup tgcyl2 = new TransformGroup();
        Transform3D t3dcyl2 = new Transform3D();
        t3dcyl2.setTranslation(new Vector3f(6f, 6f, -6f));
        tgcyl2.setTransform(t3dcyl2);
        t3dcyl2.rotZ(Math.PI/2);        
        tgcyl2.addChild(cyl2);
        
        PolygonAttributes polyAppear = new PolygonAttributes();
        polyAppear.setCullFace(PolygonAttributes.CULL_NONE);
        Appearance planeAppear = new Appearance();
        planeAppear.setPolygonAttributes(planeAppear);
        Shape3D planes = new Shape3D(qa, polyAppear);
        // planes.setGeometry(qa);
        
        bg.addChild(planes);
        bg.addChild(tgSphere1);
        bg.addChild(tgSphere2);
        bg.addChild(tgc1);
        bg.addChild(tgc2);
        bg.addChild(tgcol);
        bg.addChild(tgcyl1);
        bg.addChild(tgcyl2);
    
    }
    
    public BranchGroup getShapes () {        
        return bg;
    }

}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				121
			<iErrLine>
			<iErrMessage>
				method setPolygonAttributes in class javax.media.j3d.Appearance cannot be applied to given types;
  required: javax.media.j3d.PolygonAttributes
  found: javax.media.j3d.Appearance
  reason: actual argument javax.media.j3d.Appearance cannot be converted to javax.media.j3d.PolygonAttributes by method invocation conversion
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				122
			<iErrLine>
			<iErrMessage>
				no suitable constructor found for Shape3D(javax.media.j3d.QuadArray,javax.media.j3d.PolygonAttributes)
    constructor javax.media.j3d.Shape3D.Shape3D(javax.media.j3d.Geometry,javax.media.j3d.Appearance) is not applicable
      (actual argument javax.media.j3d.PolygonAttributes cannot be converted to javax.media.j3d.Appearance by method invocation conversion)
    constructor javax.media.j3d.Shape3D.Shape3D(javax.media.j3d.Geometry) is not applicable
      (actual and formal argument lists differ in length)
    constructor javax.media.j3d.Shape3D.Shape3D() is not applicable
      (actual and formal argument lists differ in length)
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				5058437
			</iTime>
			<fName>
				Population.java
			</fName>
			<fSize>
				5134.0
			</fSize>
			<fData>
/**
*   Title: Population.java
*   Description: A collection of various objects for display in a 3D envirionment
*   Date: January 26, 2015
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import com.sun.j3d.utils.geometry.*;
import javax.vecmath.*;
import javax.media.j3d.*;

public class Population
{
    private BranchGroup bg = new BranchGroup();
    
    Population () {

        // create various inclined planes
        QuadArray qa = new QuadArray(12, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-0.5f, 0.1f, 0.5f));
        qa.setCoordinate(1, new Point3f(0.5f, 0.1f, 0.5f));
        qa.setCoordinate(2, new Point3f(0.5f, 0.1f, -0.5f));
        qa.setCoordinate(3, new Point3f(-0.5f, 0.1f, -0.5f));
        
        qa.setCoordinate(4, new Point3f(8f, 3f, -13f));
        qa.setCoordinate(5, new Point3f(10f, 3f, -13f));
        qa.setCoordinate(6, new Point3f(10f, 10f, -15f));
        qa.setCoordinate(7, new Point3f(8f, 10f, -15f));
        
        qa.setCoordinate(8, new Point3f(-3, 4f, 12f));
        qa.setCoordinate(9, new Point3f(-6f, 3f, 9f));
        qa.setCoordinate(10, new Point3f(-3f, 1f, 6f));
        qa.setCoordinate(11, new Point3f(-1f, 0.5f, 9f));
        
        
        // create sphere objects
        Sphere sph1 = new Sphere();  // defalut sphere radius 1
        TransformGroup tgSphere1 = new TransformGroup();
        Transform3D t3dSphere1 = new Transform3D();
        t3dSphere1.setTranslation(new Vector3f(-14.005f, 5f, 5f));
        tgSphere1.setTransform(t3dSphere1);
        tgSphere1.addChild(sph1);
        
        Appearance appsph2 = new Appearance();
        appsph2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 0f), 1));
        Sphere sph2 = new Sphere(1.5f, appsph2);  // sphere radius 1.5, colour red
        TransformGroup tgSphere2 = new TransformGroup();
        Transform3D t3dSphere2 = new Transform3D();
        t3dSphere2.setTranslation(new Vector3f(5f, 5f, 10f));
        tgSphere2.setTransform(t3dSphere2);
        tgSphere2.addChild(sph2);
        
        // create cube objects
        Box cube1 = new Box();  // default box with side length of 2
        TransformGroup tgc1 = new TransformGroup();
        Transform3D t3dc1 = new Transform3D();
        t3dc1.setTranslation(new Vector3f(10f, 2f, 10f));
        tgc1.setTransform(t3dc1);
        tgc1.addChild(cube1);
        
        Appearance appc2 = new Appearance();
        appc2.setColoringAttributes(new ColoringAttributes(new Color3f(0f, 1f, 0f), 1));
        Box cube2 = new Box(3f, 3f, 3f, appc2);  // box with side length 3, color green
        TransformGroup tgc2 = new TransformGroup();
        Transform3D t3dc2 = new Transform3D();
        t3dc2.setTranslation(new Vector3f(-7f, 10f, -12f));
        tgc2.setTransform(t3dc2);
        tgc2.addChild(cube2);
        
        // create column objects
        Appearance appcol = new Appearance();
        appcol.setColoringAttributes(new ColoringAttributes(new Color3f(0f, 1f, 1f), 1));
        Box column = new Box(1f, 4f, 1f, appcol);  // rectangular column with specified dimensions, color cyan
        TransformGroup tgcol = new TransformGroup();
        Transform3D t3dcol = new Transform3D();
        t3dcol.setTranslation(new Vector3f(-7f, 10f, -12f));
        tgcol.setTransform(t3dcol);
        t3dcol.rotX(Math.PI/4);
        t3dcol.rotY(Math.PI/6);        
        tgcol.addChild(column);
        
        // create pole objects
        Cylinder cyl1 = new Cylinder();  // default cylinder radius 1, height 2
        TransformGroup tgcyl1 = new TransformGroup();
        Transform3D t3dcyl1 = new Transform3D();
        t3dcyl1.setTranslation(new Vector3f(9f, 1f, 0f));
        tgcyl1.setTransform(t3dcyl1);
        tgcyl1.addChild(cyl1);
        
        Appearance appcyl2 = new Appearance();
        appcyl2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 1f), 1));
        Cylinder cyl2 = new Cylinder(1.5f, 7f);  // cylinder with specified dimensions, color magenta
        TransformGroup tgcyl2 = new TransformGroup();
        Transform3D t3dcyl2 = new Transform3D();
        t3dcyl2.setTranslation(new Vector3f(6f, 6f, -6f));
        tgcyl2.setTransform(t3dcyl2);
        t3dcyl2.rotZ(Math.PI/2);        
        tgcyl2.addChild(cyl2);
        
        PolygonAttributes polyAppear = new PolygonAttributes();
        polyAppear.setCullFace(PolygonAttributes.CULL_NONE);
        Appearance planeAppear = new Appearance();
        planeAppear.setPolygonAttributes(planeAppear);
        Shape3D planes = new Shape3D(qa, polyAppear);
        // planes.setGeometry(qa);
        
        bg.addChild(planes);
        bg.addChild(tgSphere1);
        bg.addChild(tgSphere2);
        bg.addChild(tgc1);
        bg.addChild(tgc2);
        bg.addChild(tgcol);
        bg.addChild(tgcyl1);
        bg.addChild(tgcyl2);
    
    }
    
    public BranchGroup getShapes () {        
        return bg;
    }

}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				121
			<iErrLine>
			<iErrMessage>
				method setPolygonAttributes in class javax.media.j3d.Appearance cannot be applied to given types;
  required: javax.media.j3d.PolygonAttributes
  found: javax.media.j3d.Appearance
  reason: actual argument javax.media.j3d.Appearance cannot be converted to javax.media.j3d.PolygonAttributes by method invocation conversion
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				122
			<iErrLine>
			<iErrMessage>
				no suitable constructor found for Shape3D(javax.media.j3d.QuadArray,javax.media.j3d.PolygonAttributes)
    constructor javax.media.j3d.Shape3D.Shape3D(javax.media.j3d.Geometry,javax.media.j3d.Appearance) is not applicable
      (actual argument javax.media.j3d.PolygonAttributes cannot be converted to javax.media.j3d.Appearance by method invocation conversion)
    constructor javax.media.j3d.Shape3D.Shape3D(javax.media.j3d.Geometry) is not applicable
      (actual and formal argument lists differ in length)
    constructor javax.media.j3d.Shape3D.Shape3D() is not applicable
      (actual and formal argument lists differ in length)
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				5095796
			</iTime>
			<fName>
				Population.java
			</fName>
			<fSize>
				5133.0
			</fSize>
			<fData>
/**
*   Title: Population.java
*   Description: A collection of various objects for display in a 3D envirionment
*   Date: January 26, 2015
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import com.sun.j3d.utils.geometry.*;
import javax.vecmath.*;
import javax.media.j3d.*;

public class Population
{
    private BranchGroup bg = new BranchGroup();
    
    Population () {

        // create various inclined planes
        QuadArray qa = new QuadArray(12, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-0.5f, 0.1f, 0.5f));
        qa.setCoordinate(1, new Point3f(0.5f, 0.1f, 0.5f));
        qa.setCoordinate(2, new Point3f(0.5f, 0.1f, -0.5f));
        qa.setCoordinate(3, new Point3f(-0.5f, 0.1f, -0.5f));
        
        qa.setCoordinate(4, new Point3f(8f, 3f, -13f));
        qa.setCoordinate(5, new Point3f(10f, 3f, -13f));
        qa.setCoordinate(6, new Point3f(10f, 10f, -15f));
        qa.setCoordinate(7, new Point3f(8f, 10f, -15f));
        
        qa.setCoordinate(8, new Point3f(-3, 4f, 12f));
        qa.setCoordinate(9, new Point3f(-6f, 3f, 9f));
        qa.setCoordinate(10, new Point3f(-3f, 1f, 6f));
        qa.setCoordinate(11, new Point3f(-1f, 0.5f, 9f));
        
        
        // create sphere objects
        Sphere sph1 = new Sphere();  // defalut sphere radius 1
        TransformGroup tgSphere1 = new TransformGroup();
        Transform3D t3dSphere1 = new Transform3D();
        t3dSphere1.setTranslation(new Vector3f(-14.005f, 5f, 5f));
        tgSphere1.setTransform(t3dSphere1);
        tgSphere1.addChild(sph1);
        
        Appearance appsph2 = new Appearance();
        appsph2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 0f), 1));
        Sphere sph2 = new Sphere(1.5f, appsph2);  // sphere radius 1.5, colour red
        TransformGroup tgSphere2 = new TransformGroup();
        Transform3D t3dSphere2 = new Transform3D();
        t3dSphere2.setTranslation(new Vector3f(5f, 5f, 10f));
        tgSphere2.setTransform(t3dSphere2);
        tgSphere2.addChild(sph2);
        
        // create cube objects
        Box cube1 = new Box();  // default box with side length of 2
        TransformGroup tgc1 = new TransformGroup();
        Transform3D t3dc1 = new Transform3D();
        t3dc1.setTranslation(new Vector3f(10f, 2f, 10f));
        tgc1.setTransform(t3dc1);
        tgc1.addChild(cube1);
        
        Appearance appc2 = new Appearance();
        appc2.setColoringAttributes(new ColoringAttributes(new Color3f(0f, 1f, 0f), 1));
        Box cube2 = new Box(3f, 3f, 3f, appc2);  // box with side length 3, color green
        TransformGroup tgc2 = new TransformGroup();
        Transform3D t3dc2 = new Transform3D();
        t3dc2.setTranslation(new Vector3f(-7f, 10f, -12f));
        tgc2.setTransform(t3dc2);
        tgc2.addChild(cube2);
        
        // create column objects
        Appearance appcol = new Appearance();
        appcol.setColoringAttributes(new ColoringAttributes(new Color3f(0f, 1f, 1f), 1));
        Box column = new Box(1f, 4f, 1f, appcol);  // rectangular column with specified dimensions, color cyan
        TransformGroup tgcol = new TransformGroup();
        Transform3D t3dcol = new Transform3D();
        t3dcol.setTranslation(new Vector3f(-7f, 10f, -12f));
        tgcol.setTransform(t3dcol);
        t3dcol.rotX(Math.PI/4);
        t3dcol.rotY(Math.PI/6);        
        tgcol.addChild(column);
        
        // create pole objects
        Cylinder cyl1 = new Cylinder();  // default cylinder radius 1, height 2
        TransformGroup tgcyl1 = new TransformGroup();
        Transform3D t3dcyl1 = new Transform3D();
        t3dcyl1.setTranslation(new Vector3f(9f, 1f, 0f));
        tgcyl1.setTransform(t3dcyl1);
        tgcyl1.addChild(cyl1);
        
        Appearance appcyl2 = new Appearance();
        appcyl2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 1f), 1));
        Cylinder cyl2 = new Cylinder(1.5f, 7f);  // cylinder with specified dimensions, color magenta
        TransformGroup tgcyl2 = new TransformGroup();
        Transform3D t3dcyl2 = new Transform3D();
        t3dcyl2.setTranslation(new Vector3f(6f, 6f, -6f));
        tgcyl2.setTransform(t3dcyl2);
        t3dcyl2.rotZ(Math.PI/2);        
        tgcyl2.addChild(cyl2);
        
        PolygonAttributes polyAppear = new PolygonAttributes();
        polyAppear.setCullFace(PolygonAttributes.CULL_NONE);
        Appearance planeAppear = new Appearance();
        planeAppear.setPolygonAttributes(polyAppear);
        Shape3D planes = new Shape3D(qa, polyAppear);
        // planes.setGeometry(qa);
        
        bg.addChild(planes);
        bg.addChild(tgSphere1);
        bg.addChild(tgSphere2);
        bg.addChild(tgc1);
        bg.addChild(tgc2);
        bg.addChild(tgcol);
        bg.addChild(tgcyl1);
        bg.addChild(tgcyl2);
    
    }
    
    public BranchGroup getShapes () {        
        return bg;
    }

}

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				122
			<iErrLine>
			<iErrMessage>
				no suitable constructor found for Shape3D(javax.media.j3d.QuadArray,javax.media.j3d.PolygonAttributes)
    constructor javax.media.j3d.Shape3D.Shape3D(javax.media.j3d.Geometry,javax.media.j3d.Appearance) is not applicable
      (actual argument javax.media.j3d.PolygonAttributes cannot be converted to javax.media.j3d.Appearance by method invocation conversion)
    constructor javax.media.j3d.Shape3D.Shape3D(javax.media.j3d.Geometry) is not applicable
      (actual and formal argument lists differ in length)
    constructor javax.media.j3d.Shape3D.Shape3D() is not applicable
      (actual and formal argument lists differ in length)
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				5106421
			</iTime>
			<fName>
				Population.java
			</fName>
			<fSize>
				5134.0
			</fSize>
			<fData>
/**
*   Title: Population.java
*   Description: A collection of various objects for display in a 3D envirionment
*   Date: January 26, 2015
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import com.sun.j3d.utils.geometry.*;
import javax.vecmath.*;
import javax.media.j3d.*;

public class Population
{
    private BranchGroup bg = new BranchGroup();
    
    Population () {

        // create various inclined planes
        QuadArray qa = new QuadArray(12, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-0.5f, 0.1f, 0.5f));
        qa.setCoordinate(1, new Point3f(0.5f, 0.1f, 0.5f));
        qa.setCoordinate(2, new Point3f(0.5f, 0.1f, -0.5f));
        qa.setCoordinate(3, new Point3f(-0.5f, 0.1f, -0.5f));
        
        qa.setCoordinate(4, new Point3f(8f, 3f, -13f));
        qa.setCoordinate(5, new Point3f(10f, 3f, -13f));
        qa.setCoordinate(6, new Point3f(10f, 10f, -15f));
        qa.setCoordinate(7, new Point3f(8f, 10f, -15f));
        
        qa.setCoordinate(8, new Point3f(-3, 4f, 12f));
        qa.setCoordinate(9, new Point3f(-6f, 3f, 9f));
        qa.setCoordinate(10, new Point3f(-3f, 1f, 6f));
        qa.setCoordinate(11, new Point3f(-1f, 0.5f, 9f));
        
        
        // create sphere objects
        Sphere sph1 = new Sphere();  // defalut sphere radius 1
        TransformGroup tgSphere1 = new TransformGroup();
        Transform3D t3dSphere1 = new Transform3D();
        t3dSphere1.setTranslation(new Vector3f(-14.005f, 5f, 5f));
        tgSphere1.setTransform(t3dSphere1);
        tgSphere1.addChild(sph1);
        
        Appearance appsph2 = new Appearance();
        appsph2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 0f), 1));
        Sphere sph2 = new Sphere(1.5f, appsph2);  // sphere radius 1.5, colour red
        TransformGroup tgSphere2 = new TransformGroup();
        Transform3D t3dSphere2 = new Transform3D();
        t3dSphere2.setTranslation(new Vector3f(5f, 5f, 10f));
        tgSphere2.setTransform(t3dSphere2);
        tgSphere2.addChild(sph2);
        
        // create cube objects
        Box cube1 = new Box();  // default box with side length of 2
        TransformGroup tgc1 = new TransformGroup();
        Transform3D t3dc1 = new Transform3D();
        t3dc1.setTranslation(new Vector3f(10f, 2f, 10f));
        tgc1.setTransform(t3dc1);
        tgc1.addChild(cube1);
        
        Appearance appc2 = new Appearance();
        appc2.setColoringAttributes(new ColoringAttributes(new Color3f(0f, 1f, 0f), 1));
        Box cube2 = new Box(3f, 3f, 3f, appc2);  // box with side length 3, color green
        TransformGroup tgc2 = new TransformGroup();
        Transform3D t3dc2 = new Transform3D();
        t3dc2.setTranslation(new Vector3f(-7f, 10f, -12f));
        tgc2.setTransform(t3dc2);
        tgc2.addChild(cube2);
        
        // create column objects
        Appearance appcol = new Appearance();
        appcol.setColoringAttributes(new ColoringAttributes(new Color3f(0f, 1f, 1f), 1));
        Box column = new Box(1f, 4f, 1f, appcol);  // rectangular column with specified dimensions, color cyan
        TransformGroup tgcol = new TransformGroup();
        Transform3D t3dcol = new Transform3D();
        t3dcol.setTranslation(new Vector3f(-7f, 10f, -12f));
        tgcol.setTransform(t3dcol);
        t3dcol.rotX(Math.PI/4);
        t3dcol.rotY(Math.PI/6);        
        tgcol.addChild(column);
        
        // create pole objects
        Cylinder cyl1 = new Cylinder();  // default cylinder radius 1, height 2
        TransformGroup tgcyl1 = new TransformGroup();
        Transform3D t3dcyl1 = new Transform3D();
        t3dcyl1.setTranslation(new Vector3f(9f, 1f, 0f));
        tgcyl1.setTransform(t3dcyl1);
        tgcyl1.addChild(cyl1);
        
        Appearance appcyl2 = new Appearance();
        appcyl2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 1f), 1));
        Cylinder cyl2 = new Cylinder(1.5f, 7f);  // cylinder with specified dimensions, color magenta
        TransformGroup tgcyl2 = new TransformGroup();
        Transform3D t3dcyl2 = new Transform3D();
        t3dcyl2.setTranslation(new Vector3f(6f, 6f, -6f));
        tgcyl2.setTransform(t3dcyl2);
        t3dcyl2.rotZ(Math.PI/2);        
        tgcyl2.addChild(cyl2);
        
        PolygonAttributes polyAppear = new PolygonAttributes();
        polyAppear.setCullFace(PolygonAttributes.CULL_NONE);
        Appearance planeAppear = new Appearance();
        planeAppear.setPolygonAttributes(polyAppear);
        Shape3D planes = new Shape3D(qa, planeAppear);
        // planes.setGeometry(qa);
        
        bg.addChild(planes);
        bg.addChild(tgSphere1);
        bg.addChild(tgSphere2);
        bg.addChild(tgc1);
        bg.addChild(tgc2);
        bg.addChild(tgcol);
        bg.addChild(tgcyl1);
        bg.addChild(tgcyl2);
    
    }
    
    public BranchGroup getShapes () {        
        return bg;
    }

}

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				5114484
			</iTime>
			<fName>
				MyOwn3D.java
			</fName>
			<fSize>
				8669.0
			</fSize>
			<fData>
/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor with grid lines
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 2.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.applet.Applet;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;

public class MyOwn3D extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere();   // for environment nodes
    private SimpleUniverse su;
    
    // constructor
    public MyOwn3D() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
        BranchGroup scene = createSceneGraph();
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor

    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();  // root of visual objects in scene graph
        
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);  // solid color blue for coloring sides and floor
        
        // create the sides and floor
        TransformGroup floor = makeFace("floor", blue);
        TransformGroup back = makeFace("back", blue);
        TransformGroup front = makeFace("front", blue);
        TransformGroup left = makeFace("left", blue);
        TransformGroup right = makeFace("right", blue);
        // TransformGroup ceiling = makeFace("ceiling", new Color3f(1.0f, 1.0f, 1.0f));  // white
        
        // create lines to divide surfaces into 3x3 grids
        Shape3D grid = makeGrid();
        
        // add children to root branch graph
        objRoot.addChild(floor);
        objRoot.addChild(back);
        objRoot.addChild(left);
        objRoot.addChild(right);
        objRoot.addChild(front);
        // objRoot.addChild(ceiling);
        objRoot.addChild(grid);
        
        Population shapes = new Population();
        objRoot.addChild(shapes.getShapes());
        
        return objRoot;
    } // end of method

    // method to create sides and floor of a room
    private TransformGroup makeFace(String face, Color3f faceColor) {
        
        // create standard QuadArray with coordinates for basic surface
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-15f, 0f, 15f));
        qa.setCoordinate(1, new Point3f(15f, 0f, 15f));
        qa.setCoordinate(2, new Point3f(15f, 0f, -15f));
        qa.setCoordinate(3, new Point3f(-15f, 0f, -15f));
        
        // set color for created quad
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        // create ability to transform and translate surface to correct position
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        // create surface based on input paramaters
        // surfaces are off by a factor of 0.005 to allow grid lines to be more visible
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15.005f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.rotX(Math.PI);
                t3d.setTranslation(new Vector3f(0f, 15.005f, 0f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "left": t3d.rotZ(-Math.PI/2);
                t3d.setTranslation(new Vector3f(-15.005f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "right": t3d.rotZ(Math.PI/2);
                t3d.setTranslation(new Vector3f(15.005f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.rotX(-Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, 15.005f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.rotX(Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, -15.005f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
        return tg;
    } // end of makeFace method
    
    // makes lines to divide constructed area into 3x3 grid for each side
    private Shape3D makeGrid() {
        
        // set up initial coordinates for z plane grid lines
        Point3f[] gridCoords = new Point3f[47];
        gridCoords[0] = new Point3f(-15f, 15f, 15f);
        gridCoords[1] = new Point3f(-15f, -15f, 15f);
        gridCoords[2] = new Point3f(15f, -15f, 15f);
        gridCoords[3] = new Point3f(15f, 15f, 15f);
        
        // create remaining grid lines through z plane
        Point3f adjust = new Point3f(0, 0, -10);
        for (int i = 4; i < 16; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        // set up initial coordinates for x plane grid lines
        gridCoords[16] = new Point3f(gridCoords[3]);
        gridCoords[17] = new Point3f(gridCoords[2]);
        gridCoords[18] = new Point3f(gridCoords[14]);
        gridCoords[19] = new Point3f(gridCoords[15]);
        
        // create remaining grid lines through x plane
        adjust = new Point3f(-10, 0, 0);
        for (int i = 20; i < 32; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        // set up initial coordinates for y plane grid lines
        gridCoords[32] = new Point3f(gridCoords[0]);
        gridCoords[33] = new Point3f(gridCoords[3]);
        gridCoords[34] = new Point3f(gridCoords[15]);
        gridCoords[35] = new Point3f(gridCoords[12]);
        gridCoords[36] = new Point3f(gridCoords[0]);
        
        // create remaining grid lines through y plane
        adjust = new Point3f(0, -10, 0);
        for (int i = 37; i < 47; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 5]);
            gridCoords[i].add(adjust);
        }
        
        // create array for vertex counts in LineStripArray
        int[] lineCounts = new int[11];
        for (int i = 0; i < lineCounts.length; i++) {
            if (i < 8) {lineCounts[i] = 4;}
            else {lineCounts[i] = 5;}
        }
        
        // create LineStripArray object to create lines
        LineStripArray grid = new LineStripArray(47, LineStripArray.COORDINATES, lineCounts);
        for (int i = 0; i < gridCoords.length; i++) {
            grid.setCoordinate(i, gridCoords[i]);
        }
        
        return new Shape3D(grid);
    } // end of makeGrid method
    
    private void orbitControls(Canvas3D c)
    /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
    {
        OrbitBehavior orbit = 
            new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
        orbit.setSchedulingBounds(bounds);

        ViewingPlatform vp = su.getViewingPlatform();
        vp.setViewPlatformBehavior(orbit);      
    } // end of orbitControls()

    private void initUserPosition()
    // Set the user's initial viewpoint using lookAt()
    {
        ViewingPlatform vp = su.getViewingPlatform();
        TransformGroup steerTG = vp.getViewPlatformTransform();

        Transform3D t3d = new Transform3D();
        steerTG.getTransform(t3d);

        // args are: viewer posn, where looking, up direction
        t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
        t3d.invert();

        steerTG.setTransform(t3d);
    } // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3D(), 256, 256);
    } // end of main
} // end of class

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				5371515
			</iTime>
			<fName>
				Population.java
			</fName>
			<fSize>
				5143.0
			</fSize>
			<fData>
/**
*   Title: Population.java
*   Description: A collection of various objects for display in a 3D envirionment
*   Date: January 26, 2015
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import com.sun.j3d.utils.geometry.*;
import javax.vecmath.*;
import javax.media.j3d.*;

public class Population
{
    private BranchGroup bg = new BranchGroup();
    
    Population () {

        // create various inclined planes
        QuadArray qa = new QuadArray(12, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-0.5f, 0.1f, 0.5f));
        qa.setCoordinate(1, new Point3f(0.5f, 0.1f, 0.5f));
        qa.setCoordinate(2, new Point3f(0.5f, 0.1f, -0.5f));
        qa.setCoordinate(3, new Point3f(-0.5f, 0.1f, -0.5f));
        
        qa.setCoordinate(4, new Point3f(8f, 3f, -13f));
        qa.setCoordinate(5, new Point3f(10f, 3f, -13f));
        qa.setCoordinate(6, new Point3f(10f, 10f, -15f));
        qa.setCoordinate(7, new Point3f(8f, 10f, -15f));
        
        qa.setCoordinate(8, new Point3f(-3, 4f, 12f));
        qa.setCoordinate(9, new Point3f(-6f, 3f, 9f));
        qa.setCoordinate(10, new Point3f(-3f, 1f, 6f));
        qa.setCoordinate(11, new Point3f(-1f, 0.5f, 9f));
        
        
        // create sphere objects
        Sphere sph1 = new Sphere();  // defalut sphere radius 1
        TransformGroup tgSphere1 = new TransformGroup();
        Transform3D t3dSphere1 = new Transform3D();
        t3dSphere1.setTranslation(new Vector3f(-14.005f, 5f, 5f));
        tgSphere1.setTransform(t3dSphere1);
        tgSphere1.addChild(sph1);
        
        Appearance appsph2 = new Appearance();
        appsph2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 0f), 1));
        Sphere sph2 = new Sphere(1.5f, appsph2);  // sphere radius 1.5, colour red
        TransformGroup tgSphere2 = new TransformGroup();
        Transform3D t3dSphere2 = new Transform3D();
        t3dSphere2.setTranslation(new Vector3f(5f, 5f, 10f));
        tgSphere2.setTransform(t3dSphere2);
        tgSphere2.addChild(sph2);
        
        // create cube objects
        Box cube1 = new Box();  // default box with side length of 2
        TransformGroup tgc1 = new TransformGroup();
        Transform3D t3dc1 = new Transform3D();
        t3dc1.setTranslation(new Vector3f(10f, 2f, 10f));
        tgc1.setTransform(t3dc1);
        tgc1.addChild(cube1);
        
        Appearance appc2 = new Appearance();
        appc2.setColoringAttributes(new ColoringAttributes(new Color3f(0f, 1f, 0f), 1));
        Box cube2 = new Box(3f, 3f, 3f, appc2);  // box with side length 3, color green
        TransformGroup tgc2 = new TransformGroup();
        Transform3D t3dc2 = new Transform3D();
        t3dc2.setTranslation(new Vector3f(-7f, 10f, -12f));
        tgc2.setTransform(t3dc2);
        tgc2.addChild(cube2);
        
        // create column objects
        Appearance appcol = new Appearance();
        appcol.setColoringAttributes(new ColoringAttributes(new Color3f(0f, 1f, 1f), 1));
        Box column = new Box(1f, 4f, 1f, appcol);  // rectangular column with specified dimensions, color cyan
        TransformGroup tgcol = new TransformGroup();
        Transform3D t3dcol = new Transform3D();
        t3dcol.setTranslation(new Vector3f(-7f, 10f, -12f));
        tgcol.setTransform(t3dcol);
        t3dcol.rotX(Math.PI/4);
        t3dcol.rotY(Math.PI/6);        
        tgcol.addChild(column);
        
        // create pole objects
        Cylinder cyl1 = new Cylinder();  // default cylinder radius 1, height 2
        TransformGroup tgcyl1 = new TransformGroup();
        Transform3D t3dcyl1 = new Transform3D();
        t3dcyl1.setTranslation(new Vector3f(9f, 1f, 0f));
        tgcyl1.setTransform(t3dcyl1);
        tgcyl1.addChild(cyl1);
        
        Appearance appcyl2 = new Appearance();
        appcyl2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 1f), 1));
        Cylinder cyl2 = new Cylinder(1.5f, 7f, appcyl2);  // cylinder with specified dimensions, color magenta
        TransformGroup tgcyl2 = new TransformGroup();
        Transform3D t3dcyl2 = new Transform3D();
        t3dcyl2.setTranslation(new Vector3f(6f, 6f, -6f));
        tgcyl2.setTransform(t3dcyl2);
        t3dcyl2.rotZ(Math.PI/2);        
        tgcyl2.addChild(cyl2);
        
        PolygonAttributes polyAppear = new PolygonAttributes();
        polyAppear.setCullFace(PolygonAttributes.CULL_NONE);
        Appearance planeAppear = new Appearance();
        planeAppear.setPolygonAttributes(polyAppear);
        Shape3D planes = new Shape3D(qa, planeAppear);
        // planes.setGeometry(qa);
        
        bg.addChild(planes);
        bg.addChild(tgSphere1);
        bg.addChild(tgSphere2);
        bg.addChild(tgc1);
        bg.addChild(tgc2);
        bg.addChild(tgcol);
        bg.addChild(tgcyl1);
        bg.addChild(tgcyl2);
    
    }
    
    public BranchGroup getShapes () {        
        return bg;
    }

}

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				5880968
			</iTime>
			<fName>
				MyOwn3D.java
			</fName>
			<fSize>
				8669.0
			</fSize>
			<fData>
/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor with grid lines
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 2.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.applet.Applet;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;

public class MyOwn3D extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere();   // for environment nodes
    private SimpleUniverse su;
    
    // constructor
    public MyOwn3D() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
        BranchGroup scene = createSceneGraph();
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor

    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();  // root of visual objects in scene graph
        
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);  // solid color blue for coloring sides and floor
        
        // create the sides and floor
        TransformGroup floor = makeFace("floor", blue);
        TransformGroup back = makeFace("back", blue);
        TransformGroup front = makeFace("front", blue);
        TransformGroup left = makeFace("left", blue);
        TransformGroup right = makeFace("right", blue);
        // TransformGroup ceiling = makeFace("ceiling", new Color3f(1.0f, 1.0f, 1.0f));  // white
        
        // create lines to divide surfaces into 3x3 grids
        Shape3D grid = makeGrid();
        
        // add children to root branch graph
        objRoot.addChild(floor);
        objRoot.addChild(back);
        objRoot.addChild(left);
        objRoot.addChild(right);
        objRoot.addChild(front);
        // objRoot.addChild(ceiling);
        objRoot.addChild(grid);
        
        Population shapes = new Population();
        objRoot.addChild(shapes.getShapes());
        
        return objRoot;
    } // end of method

    // method to create sides and floor of a room
    private TransformGroup makeFace(String face, Color3f faceColor) {
        
        // create standard QuadArray with coordinates for basic surface
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-15f, 0f, 15f));
        qa.setCoordinate(1, new Point3f(15f, 0f, 15f));
        qa.setCoordinate(2, new Point3f(15f, 0f, -15f));
        qa.setCoordinate(3, new Point3f(-15f, 0f, -15f));
        
        // set color for created quad
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        // create ability to transform and translate surface to correct position
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        // create surface based on input paramaters
        // surfaces are off by a factor of 0.005 to allow grid lines to be more visible
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15.005f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.rotX(Math.PI);
                t3d.setTranslation(new Vector3f(0f, 15.005f, 0f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "left": t3d.rotZ(-Math.PI/2);
                t3d.setTranslation(new Vector3f(-15.005f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "right": t3d.rotZ(Math.PI/2);
                t3d.setTranslation(new Vector3f(15.005f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.rotX(-Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, 15.005f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.rotX(Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, -15.005f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
        return tg;
    } // end of makeFace method
    
    // makes lines to divide constructed area into 3x3 grid for each side
    private Shape3D makeGrid() {
        
        // set up initial coordinates for z plane grid lines
        Point3f[] gridCoords = new Point3f[47];
        gridCoords[0] = new Point3f(-15f, 15f, 15f);
        gridCoords[1] = new Point3f(-15f, -15f, 15f);
        gridCoords[2] = new Point3f(15f, -15f, 15f);
        gridCoords[3] = new Point3f(15f, 15f, 15f);
        
        // create remaining grid lines through z plane
        Point3f adjust = new Point3f(0, 0, -10);
        for (int i = 4; i < 16; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        // set up initial coordinates for x plane grid lines
        gridCoords[16] = new Point3f(gridCoords[3]);
        gridCoords[17] = new Point3f(gridCoords[2]);
        gridCoords[18] = new Point3f(gridCoords[14]);
        gridCoords[19] = new Point3f(gridCoords[15]);
        
        // create remaining grid lines through x plane
        adjust = new Point3f(-10, 0, 0);
        for (int i = 20; i < 32; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        // set up initial coordinates for y plane grid lines
        gridCoords[32] = new Point3f(gridCoords[0]);
        gridCoords[33] = new Point3f(gridCoords[3]);
        gridCoords[34] = new Point3f(gridCoords[15]);
        gridCoords[35] = new Point3f(gridCoords[12]);
        gridCoords[36] = new Point3f(gridCoords[0]);
        
        // create remaining grid lines through y plane
        adjust = new Point3f(0, -10, 0);
        for (int i = 37; i < 47; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 5]);
            gridCoords[i].add(adjust);
        }
        
        // create array for vertex counts in LineStripArray
        int[] lineCounts = new int[11];
        for (int i = 0; i < lineCounts.length; i++) {
            if (i < 8) {lineCounts[i] = 4;}
            else {lineCounts[i] = 5;}
        }
        
        // create LineStripArray object to create lines
        LineStripArray grid = new LineStripArray(47, LineStripArray.COORDINATES, lineCounts);
        for (int i = 0; i < gridCoords.length; i++) {
            grid.setCoordinate(i, gridCoords[i]);
        }
        
        return new Shape3D(grid);
    } // end of makeGrid method
    
    private void orbitControls(Canvas3D c)
    /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
    {
        OrbitBehavior orbit = 
            new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
        orbit.setSchedulingBounds(bounds);

        ViewingPlatform vp = su.getViewingPlatform();
        vp.setViewPlatformBehavior(orbit);      
    } // end of orbitControls()

    private void initUserPosition()
    // Set the user's initial viewpoint using lookAt()
    {
        ViewingPlatform vp = su.getViewingPlatform();
        TransformGroup steerTG = vp.getViewPlatformTransform();

        Transform3D t3d = new Transform3D();
        steerTG.getTransform(t3d);

        // args are: viewer posn, where looking, up direction
        t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
        t3d.invert();

        steerTG.setTransform(t3d);
    } // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3D(), 256, 256);
    } // end of main
} // end of class

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				6040015
			</iTime>
			<fName>
				MyOwn3D.java
			</fName>
			<fSize>
				8669.0
			</fSize>
			<fData>
/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor with grid lines
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 2.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.applet.Applet;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;

public class MyOwn3D extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere();   // for environment nodes
    private SimpleUniverse su;
    
    // constructor
    public MyOwn3D() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
        BranchGroup scene = createSceneGraph();
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor

    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();  // root of visual objects in scene graph
        
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);  // solid color blue for coloring sides and floor
        
        // create the sides and floor
        TransformGroup floor = makeFace("floor", blue);
        TransformGroup back = makeFace("back", blue);
        TransformGroup front = makeFace("front", blue);
        TransformGroup left = makeFace("left", blue);
        TransformGroup right = makeFace("right", blue);
        // TransformGroup ceiling = makeFace("ceiling", new Color3f(1.0f, 1.0f, 1.0f));  // white
        
        // create lines to divide surfaces into 3x3 grids
        Shape3D grid = makeGrid();
        
        // add children to root branch graph
        objRoot.addChild(floor);
        objRoot.addChild(back);
        objRoot.addChild(left);
        objRoot.addChild(right);
        objRoot.addChild(front);
        // objRoot.addChild(ceiling);
        objRoot.addChild(grid);
        
        Population shapes = new Population();
        objRoot.addChild(shapes.getShapes());
        
        return objRoot;
    } // end of method

    // method to create sides and floor of a room
    private TransformGroup makeFace(String face, Color3f faceColor) {
        
        // create standard QuadArray with coordinates for basic surface
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-15f, 0f, 15f));
        qa.setCoordinate(1, new Point3f(15f, 0f, 15f));
        qa.setCoordinate(2, new Point3f(15f, 0f, -15f));
        qa.setCoordinate(3, new Point3f(-15f, 0f, -15f));
        
        // set color for created quad
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        // create ability to transform and translate surface to correct position
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        // create surface based on input paramaters
        // surfaces are off by a factor of 0.005 to allow grid lines to be more visible
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15.005f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.rotX(Math.PI);
                t3d.setTranslation(new Vector3f(0f, 15.005f, 0f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "left": t3d.rotZ(-Math.PI/2);
                t3d.setTranslation(new Vector3f(-15.005f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "right": t3d.rotZ(Math.PI/2);
                t3d.setTranslation(new Vector3f(15.005f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.rotX(-Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, 15.005f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.rotX(Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, -15.005f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
        return tg;
    } // end of makeFace method
    
    // makes lines to divide constructed area into 3x3 grid for each side
    private Shape3D makeGrid() {
        
        // set up initial coordinates for z plane grid lines
        Point3f[] gridCoords = new Point3f[47];
        gridCoords[0] = new Point3f(-15f, 15f, 15f);
        gridCoords[1] = new Point3f(-15f, -15f, 15f);
        gridCoords[2] = new Point3f(15f, -15f, 15f);
        gridCoords[3] = new Point3f(15f, 15f, 15f);
        
        // create remaining grid lines through z plane
        Point3f adjust = new Point3f(0, 0, -10);
        for (int i = 4; i < 16; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        // set up initial coordinates for x plane grid lines
        gridCoords[16] = new Point3f(gridCoords[3]);
        gridCoords[17] = new Point3f(gridCoords[2]);
        gridCoords[18] = new Point3f(gridCoords[14]);
        gridCoords[19] = new Point3f(gridCoords[15]);
        
        // create remaining grid lines through x plane
        adjust = new Point3f(-10, 0, 0);
        for (int i = 20; i < 32; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        // set up initial coordinates for y plane grid lines
        gridCoords[32] = new Point3f(gridCoords[0]);
        gridCoords[33] = new Point3f(gridCoords[3]);
        gridCoords[34] = new Point3f(gridCoords[15]);
        gridCoords[35] = new Point3f(gridCoords[12]);
        gridCoords[36] = new Point3f(gridCoords[0]);
        
        // create remaining grid lines through y plane
        adjust = new Point3f(0, -10, 0);
        for (int i = 37; i < 47; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 5]);
            gridCoords[i].add(adjust);
        }
        
        // create array for vertex counts in LineStripArray
        int[] lineCounts = new int[11];
        for (int i = 0; i < lineCounts.length; i++) {
            if (i < 8) {lineCounts[i] = 4;}
            else {lineCounts[i] = 5;}
        }
        
        // create LineStripArray object to create lines
        LineStripArray grid = new LineStripArray(47, LineStripArray.COORDINATES, lineCounts);
        for (int i = 0; i < gridCoords.length; i++) {
            grid.setCoordinate(i, gridCoords[i]);
        }
        
        return new Shape3D(grid);
    } // end of makeGrid method
    
    private void orbitControls(Canvas3D c)
    /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
    {
        OrbitBehavior orbit = 
            new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
        orbit.setSchedulingBounds(bounds);

        ViewingPlatform vp = su.getViewingPlatform();
        vp.setViewPlatformBehavior(orbit);      
    } // end of orbitControls()

    private void initUserPosition()
    // Set the user's initial viewpoint using lookAt()
    {
        ViewingPlatform vp = su.getViewingPlatform();
        TransformGroup steerTG = vp.getViewPlatformTransform();

        Transform3D t3d = new Transform3D();
        steerTG.getTransform(t3d);

        // args are: viewer posn, where looking, up direction
        t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
        t3d.invert();

        steerTG.setTransform(t3d);
    } // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3D(), 256, 256);
    } // end of main
} // end of class

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				6392328
			</iTime>
			<fName>
				MyOwn3D.java
			</fName>
			<fSize>
				8669.0
			</fSize>
			<fData>
/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor with grid lines
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 2.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.applet.Applet;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;

public class MyOwn3D extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere();   // for environment nodes
    private SimpleUniverse su;
    
    // constructor
    public MyOwn3D() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
        BranchGroup scene = createSceneGraph();
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor

    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();  // root of visual objects in scene graph
        
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);  // solid color blue for coloring sides and floor
        
        // create the sides and floor
        TransformGroup floor = makeFace("floor", blue);
        TransformGroup back = makeFace("back", blue);
        TransformGroup front = makeFace("front", blue);
        TransformGroup left = makeFace("left", blue);
        TransformGroup right = makeFace("right", blue);
        // TransformGroup ceiling = makeFace("ceiling", new Color3f(1.0f, 1.0f, 1.0f));  // white
        
        // create lines to divide surfaces into 3x3 grids
        Shape3D grid = makeGrid();
        
        // add children to root branch graph
        objRoot.addChild(floor);
        objRoot.addChild(back);
        objRoot.addChild(left);
        objRoot.addChild(right);
        objRoot.addChild(front);
        // objRoot.addChild(ceiling);
        objRoot.addChild(grid);
        
        Population shapes = new Population();
        objRoot.addChild(shapes.getShapes());
        
        return objRoot;
    } // end of method

    // method to create sides and floor of a room
    private TransformGroup makeFace(String face, Color3f faceColor) {
        
        // create standard QuadArray with coordinates for basic surface
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-15f, 0f, 15f));
        qa.setCoordinate(1, new Point3f(15f, 0f, 15f));
        qa.setCoordinate(2, new Point3f(15f, 0f, -15f));
        qa.setCoordinate(3, new Point3f(-15f, 0f, -15f));
        
        // set color for created quad
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        // create ability to transform and translate surface to correct position
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        // create surface based on input paramaters
        // surfaces are off by a factor of 0.005 to allow grid lines to be more visible
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15.005f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.rotX(Math.PI);
                t3d.setTranslation(new Vector3f(0f, 15.005f, 0f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "left": t3d.rotZ(-Math.PI/2);
                t3d.setTranslation(new Vector3f(-15.005f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "right": t3d.rotZ(Math.PI/2);
                t3d.setTranslation(new Vector3f(15.005f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.rotX(-Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, 15.005f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.rotX(Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, -15.005f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
        return tg;
    } // end of makeFace method
    
    // makes lines to divide constructed area into 3x3 grid for each side
    private Shape3D makeGrid() {
        
        // set up initial coordinates for z plane grid lines
        Point3f[] gridCoords = new Point3f[47];
        gridCoords[0] = new Point3f(-15f, 15f, 15f);
        gridCoords[1] = new Point3f(-15f, -15f, 15f);
        gridCoords[2] = new Point3f(15f, -15f, 15f);
        gridCoords[3] = new Point3f(15f, 15f, 15f);
        
        // create remaining grid lines through z plane
        Point3f adjust = new Point3f(0, 0, -10);
        for (int i = 4; i < 16; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        // set up initial coordinates for x plane grid lines
        gridCoords[16] = new Point3f(gridCoords[3]);
        gridCoords[17] = new Point3f(gridCoords[2]);
        gridCoords[18] = new Point3f(gridCoords[14]);
        gridCoords[19] = new Point3f(gridCoords[15]);
        
        // create remaining grid lines through x plane
        adjust = new Point3f(-10, 0, 0);
        for (int i = 20; i < 32; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        // set up initial coordinates for y plane grid lines
        gridCoords[32] = new Point3f(gridCoords[0]);
        gridCoords[33] = new Point3f(gridCoords[3]);
        gridCoords[34] = new Point3f(gridCoords[15]);
        gridCoords[35] = new Point3f(gridCoords[12]);
        gridCoords[36] = new Point3f(gridCoords[0]);
        
        // create remaining grid lines through y plane
        adjust = new Point3f(0, -10, 0);
        for (int i = 37; i < 47; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 5]);
            gridCoords[i].add(adjust);
        }
        
        // create array for vertex counts in LineStripArray
        int[] lineCounts = new int[11];
        for (int i = 0; i < lineCounts.length; i++) {
            if (i < 8) {lineCounts[i] = 4;}
            else {lineCounts[i] = 5;}
        }
        
        // create LineStripArray object to create lines
        LineStripArray grid = new LineStripArray(47, LineStripArray.COORDINATES, lineCounts);
        for (int i = 0; i < gridCoords.length; i++) {
            grid.setCoordinate(i, gridCoords[i]);
        }
        
        return new Shape3D(grid);
    } // end of makeGrid method
    
    private void orbitControls(Canvas3D c)
    /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
    {
        OrbitBehavior orbit = 
            new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
        orbit.setSchedulingBounds(bounds);

        ViewingPlatform vp = su.getViewingPlatform();
        vp.setViewPlatformBehavior(orbit);      
    } // end of orbitControls()

    private void initUserPosition()
    // Set the user's initial viewpoint using lookAt()
    {
        ViewingPlatform vp = su.getViewingPlatform();
        TransformGroup steerTG = vp.getViewPlatformTransform();

        Transform3D t3d = new Transform3D();
        steerTG.getTransform(t3d);

        // args are: viewer posn, where looking, up direction
        t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
        t3d.invert();

        steerTG.setTransform(t3d);
    } // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3D(), 256, 256);
    } // end of main
} // end of class

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				6553890
			</iTime>
			<fName>
				Population.java
			</fName>
			<fSize>
				5153.0
			</fSize>
			<fData>
/**
*   Title: Population.java
*   Description: A collection of various objects for display in a 3D envirionment
*   Date: January 26, 2015
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 1.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import com.sun.j3d.utils.geometry.*;
import javax.vecmath.*;
import javax.media.j3d.*;

public class Population
{
    private BranchGroup bg = new BranchGroup();
    
    Population () {

        // create various inclined planes
        QuadArray qa = new QuadArray(12, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-0.5f, -14.9f, 0.5f));
        qa.setCoordinate(1, new Point3f(0.5f, -14.9f, 0.5f));
        qa.setCoordinate(2, new Point3f(0.5f, -14.9f, -0.5f));
        qa.setCoordinate(3, new Point3f(-0.5f, -14.9f, -0.5f));
        
        qa.setCoordinate(4, new Point3f(8f, -15f, -13f));
        qa.setCoordinate(5, new Point3f(13f, 15f, -13f));
        qa.setCoordinate(6, new Point3f(13f, 3f, -15f));
        qa.setCoordinate(7, new Point3f(8f, 3f, -15f));
        
        qa.setCoordinate(8, new Point3f(-3, 4f, 12f));
        qa.setCoordinate(9, new Point3f(-6f, 3f, 9f));
        qa.setCoordinate(10, new Point3f(-3f, 1f, 6f));
        qa.setCoordinate(11, new Point3f(9f, 0.5f, 9f));
        
        
        // create sphere objects
        Sphere sph1 = new Sphere();  // defalut sphere radius 1
        TransformGroup tgSphere1 = new TransformGroup();
        Transform3D t3dSphere1 = new Transform3D();
        t3dSphere1.setTranslation(new Vector3f(-14f, -5f, 5f));
        tgSphere1.setTransform(t3dSphere1);
        tgSphere1.addChild(sph1);
        
        Appearance appsph2 = new Appearance();
        appsph2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 0f), 1));
        Sphere sph2 = new Sphere(1.5f, appsph2);  // sphere radius 1.5, colour red
        TransformGroup tgSphere2 = new TransformGroup();
        Transform3D t3dSphere2 = new Transform3D();
        t3dSphere2.setTranslation(new Vector3f(5f, 5f, 10f));
        tgSphere2.setTransform(t3dSphere2);
        tgSphere2.addChild(sph2);
        
        // create cube objects
        Box cube1 = new Box();  // default box with side length of 2
        TransformGroup tgc1 = new TransformGroup();
        Transform3D t3dc1 = new Transform3D();
        t3dc1.setTranslation(new Vector3f(10f, -12f, 10f));
        tgc1.setTransform(t3dc1);
        tgc1.addChild(cube1);
        
        Appearance appc2 = new Appearance();
        appc2.setColoringAttributes(new ColoringAttributes(new Color3f(0f, 1f, 0f), 1));
        Box cube2 = new Box(3f, 3f, 3f, appc2);  // box with side length 3, color green
        TransformGroup tgc2 = new TransformGroup();
        Transform3D t3dc2 = new Transform3D();
        t3dc2.setTranslation(new Vector3f(-7f, 10f, -12f));
        tgc2.setTransform(t3dc2);
        tgc2.addChild(cube2);
        
        // create column objects
        Appearance appcol = new Appearance();
        appcol.setColoringAttributes(new ColoringAttributes(new Color3f(0f, 1f, 1f), 1));
        Box column = new Box(1f, 4f, 1f, appcol);  // rectangular column with specified dimensions, color cyan
        TransformGroup tgcol = new TransformGroup();
        Transform3D t3dcol = new Transform3D();
        t3dcol.setTranslation(new Vector3f(-7f, -10f, 12f));
        tgcol.setTransform(t3dcol);
        t3dcol.rotX(Math.PI/4);
        t3dcol.rotY(Math.PI/6);        
        tgcol.addChild(column);
        
        // create pole objects
        Cylinder cyl1 = new Cylinder();  // default cylinder radius 1, height 2
        TransformGroup tgcyl1 = new TransformGroup();
        Transform3D t3dcyl1 = new Transform3D();
        t3dcyl1.setTranslation(new Vector3f(9f, -13f, 0f));
        tgcyl1.setTransform(t3dcyl1);
        tgcyl1.addChild(cyl1);
        
        Appearance appcyl2 = new Appearance();
        appcyl2.setColoringAttributes(new ColoringAttributes(new Color3f(1f, 0f, 1f), 1));
        Cylinder cyl2 = new Cylinder(1.5f, 7f, appcyl2);  // cylinder with specified dimensions, color magenta
        TransformGroup tgcyl2 = new TransformGroup();
        Transform3D t3dcyl2 = new Transform3D();
        t3dcyl2.setTranslation(new Vector3f(6f, -6f, -6f));
        tgcyl2.setTransform(t3dcyl2);
        t3dcyl2.rotZ(Math.PI/2);        
        tgcyl2.addChild(cyl2);
        
        PolygonAttributes polyAppear = new PolygonAttributes();
        polyAppear.setCullFace(PolygonAttributes.CULL_NONE);
        Appearance planeAppear = new Appearance();
        planeAppear.setPolygonAttributes(polyAppear);
        Shape3D planes = new Shape3D(qa, planeAppear);
        // planes.setGeometry(qa);
        
        bg.addChild(planes);
        bg.addChild(tgSphere1);
        bg.addChild(tgSphere2);
        bg.addChild(tgc1);
        bg.addChild(tgc2);
        bg.addChild(tgcol);
        bg.addChild(tgcyl1);
        bg.addChild(tgcyl2);
    
    }
    
    public BranchGroup getShapes () {        
        return bg;
    }

}

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				6557562
			</iTime>
			<fName>
				MyOwn3D.java
			</fName>
			<fSize>
				8669.0
			</fSize>
			<fData>
/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor with grid lines
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 2.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.applet.Applet;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;

public class MyOwn3D extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere();   // for environment nodes
    private SimpleUniverse su;
    
    // constructor
    public MyOwn3D() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
        BranchGroup scene = createSceneGraph();
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor

    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();  // root of visual objects in scene graph
        
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);  // solid color blue for coloring sides and floor
        
        // create the sides and floor
        TransformGroup floor = makeFace("floor", blue);
        TransformGroup back = makeFace("back", blue);
        TransformGroup front = makeFace("front", blue);
        TransformGroup left = makeFace("left", blue);
        TransformGroup right = makeFace("right", blue);
        // TransformGroup ceiling = makeFace("ceiling", new Color3f(1.0f, 1.0f, 1.0f));  // white
        
        // create lines to divide surfaces into 3x3 grids
        Shape3D grid = makeGrid();
        
        // add children to root branch graph
        objRoot.addChild(floor);
        objRoot.addChild(back);
        objRoot.addChild(left);
        objRoot.addChild(right);
        objRoot.addChild(front);
        // objRoot.addChild(ceiling);
        objRoot.addChild(grid);
        
        Population shapes = new Population();
        objRoot.addChild(shapes.getShapes());
        
        return objRoot;
    } // end of method

    // method to create sides and floor of a room
    private TransformGroup makeFace(String face, Color3f faceColor) {
        
        // create standard QuadArray with coordinates for basic surface
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-15f, 0f, 15f));
        qa.setCoordinate(1, new Point3f(15f, 0f, 15f));
        qa.setCoordinate(2, new Point3f(15f, 0f, -15f));
        qa.setCoordinate(3, new Point3f(-15f, 0f, -15f));
        
        // set color for created quad
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        // create ability to transform and translate surface to correct position
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        // create surface based on input paramaters
        // surfaces are off by a factor of 0.005 to allow grid lines to be more visible
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15.005f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.rotX(Math.PI);
                t3d.setTranslation(new Vector3f(0f, 15.005f, 0f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "left": t3d.rotZ(-Math.PI/2);
                t3d.setTranslation(new Vector3f(-15.005f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "right": t3d.rotZ(Math.PI/2);
                t3d.setTranslation(new Vector3f(15.005f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.rotX(-Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, 15.005f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.rotX(Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, -15.005f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
        return tg;
    } // end of makeFace method
    
    // makes lines to divide constructed area into 3x3 grid for each side
    private Shape3D makeGrid() {
        
        // set up initial coordinates for z plane grid lines
        Point3f[] gridCoords = new Point3f[47];
        gridCoords[0] = new Point3f(-15f, 15f, 15f);
        gridCoords[1] = new Point3f(-15f, -15f, 15f);
        gridCoords[2] = new Point3f(15f, -15f, 15f);
        gridCoords[3] = new Point3f(15f, 15f, 15f);
        
        // create remaining grid lines through z plane
        Point3f adjust = new Point3f(0, 0, -10);
        for (int i = 4; i < 16; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        // set up initial coordinates for x plane grid lines
        gridCoords[16] = new Point3f(gridCoords[3]);
        gridCoords[17] = new Point3f(gridCoords[2]);
        gridCoords[18] = new Point3f(gridCoords[14]);
        gridCoords[19] = new Point3f(gridCoords[15]);
        
        // create remaining grid lines through x plane
        adjust = new Point3f(-10, 0, 0);
        for (int i = 20; i < 32; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        // set up initial coordinates for y plane grid lines
        gridCoords[32] = new Point3f(gridCoords[0]);
        gridCoords[33] = new Point3f(gridCoords[3]);
        gridCoords[34] = new Point3f(gridCoords[15]);
        gridCoords[35] = new Point3f(gridCoords[12]);
        gridCoords[36] = new Point3f(gridCoords[0]);
        
        // create remaining grid lines through y plane
        adjust = new Point3f(0, -10, 0);
        for (int i = 37; i < 47; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 5]);
            gridCoords[i].add(adjust);
        }
        
        // create array for vertex counts in LineStripArray
        int[] lineCounts = new int[11];
        for (int i = 0; i < lineCounts.length; i++) {
            if (i < 8) {lineCounts[i] = 4;}
            else {lineCounts[i] = 5;}
        }
        
        // create LineStripArray object to create lines
        LineStripArray grid = new LineStripArray(47, LineStripArray.COORDINATES, lineCounts);
        for (int i = 0; i < gridCoords.length; i++) {
            grid.setCoordinate(i, gridCoords[i]);
        }
        
        return new Shape3D(grid);
    } // end of makeGrid method
    
    private void orbitControls(Canvas3D c)
    /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
    {
        OrbitBehavior orbit = 
            new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
        orbit.setSchedulingBounds(bounds);

        ViewingPlatform vp = su.getViewingPlatform();
        vp.setViewPlatformBehavior(orbit);      
    } // end of orbitControls()

    private void initUserPosition()
    // Set the user's initial viewpoint using lookAt()
    {
        ViewingPlatform vp = su.getViewingPlatform();
        TransformGroup steerTG = vp.getViewPlatformTransform();

        Transform3D t3d = new Transform3D();
        steerTG.getTransform(t3d);

        // args are: viewer posn, where looking, up direction
        t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
        t3d.invert();

        steerTG.setTransform(t3d);
    } // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3D(), 256, 256);
    } // end of main
} // end of class

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				6672531
			</iTime>
			<fName>
				MyOwn3D.java
			</fName>
			<fSize>
				8669.0
			</fSize>
			<fData>
/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor with grid lines
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 2.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.applet.Applet;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;

public class MyOwn3D extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere();   // for environment nodes
    private SimpleUniverse su;
    
    // constructor
    public MyOwn3D() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
        BranchGroup scene = createSceneGraph();
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor

    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();  // root of visual objects in scene graph
        
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);  // solid color blue for coloring sides and floor
        
        // create the sides and floor
        TransformGroup floor = makeFace("floor", blue);
        TransformGroup back = makeFace("back", blue);
        TransformGroup front = makeFace("front", blue);
        TransformGroup left = makeFace("left", blue);
        TransformGroup right = makeFace("right", blue);
        // TransformGroup ceiling = makeFace("ceiling", new Color3f(1.0f, 1.0f, 1.0f));  // white
        
        // create lines to divide surfaces into 3x3 grids
        Shape3D grid = makeGrid();
        
        // add children to root branch graph
        objRoot.addChild(floor);
        objRoot.addChild(back);
        objRoot.addChild(left);
        objRoot.addChild(right);
        objRoot.addChild(front);
        // objRoot.addChild(ceiling);
        objRoot.addChild(grid);
        
        Population shapes = new Population();
        objRoot.addChild(shapes.getShapes());
        
        return objRoot;
    } // end of method

    // method to create sides and floor of a room
    private TransformGroup makeFace(String face, Color3f faceColor) {
        
        // create standard QuadArray with coordinates for basic surface
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-15f, 0f, 15f));
        qa.setCoordinate(1, new Point3f(15f, 0f, 15f));
        qa.setCoordinate(2, new Point3f(15f, 0f, -15f));
        qa.setCoordinate(3, new Point3f(-15f, 0f, -15f));
        
        // set color for created quad
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        // create ability to transform and translate surface to correct position
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        // create surface based on input paramaters
        // surfaces are off by a factor of 0.005 to allow grid lines to be more visible
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15.005f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.rotX(Math.PI);
                t3d.setTranslation(new Vector3f(0f, 15.005f, 0f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "left": t3d.rotZ(-Math.PI/2);
                t3d.setTranslation(new Vector3f(-15.005f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "right": t3d.rotZ(Math.PI/2);
                t3d.setTranslation(new Vector3f(15.005f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.rotX(-Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, 15.005f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.rotX(Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, -15.005f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
        return tg;
    } // end of makeFace method
    
    // makes lines to divide constructed area into 3x3 grid for each side
    private Shape3D makeGrid() {
        
        // set up initial coordinates for z plane grid lines
        Point3f[] gridCoords = new Point3f[47];
        gridCoords[0] = new Point3f(-15f, 15f, 15f);
        gridCoords[1] = new Point3f(-15f, -15f, 15f);
        gridCoords[2] = new Point3f(15f, -15f, 15f);
        gridCoords[3] = new Point3f(15f, 15f, 15f);
        
        // create remaining grid lines through z plane
        Point3f adjust = new Point3f(0, 0, -10);
        for (int i = 4; i < 16; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        // set up initial coordinates for x plane grid lines
        gridCoords[16] = new Point3f(gridCoords[3]);
        gridCoords[17] = new Point3f(gridCoords[2]);
        gridCoords[18] = new Point3f(gridCoords[14]);
        gridCoords[19] = new Point3f(gridCoords[15]);
        
        // create remaining grid lines through x plane
        adjust = new Point3f(-10, 0, 0);
        for (int i = 20; i < 32; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        // set up initial coordinates for y plane grid lines
        gridCoords[32] = new Point3f(gridCoords[0]);
        gridCoords[33] = new Point3f(gridCoords[3]);
        gridCoords[34] = new Point3f(gridCoords[15]);
        gridCoords[35] = new Point3f(gridCoords[12]);
        gridCoords[36] = new Point3f(gridCoords[0]);
        
        // create remaining grid lines through y plane
        adjust = new Point3f(0, -10, 0);
        for (int i = 37; i < 47; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 5]);
            gridCoords[i].add(adjust);
        }
        
        // create array for vertex counts in LineStripArray
        int[] lineCounts = new int[11];
        for (int i = 0; i < lineCounts.length; i++) {
            if (i < 8) {lineCounts[i] = 4;}
            else {lineCounts[i] = 5;}
        }
        
        // create LineStripArray object to create lines
        LineStripArray grid = new LineStripArray(47, LineStripArray.COORDINATES, lineCounts);
        for (int i = 0; i < gridCoords.length; i++) {
            grid.setCoordinate(i, gridCoords[i]);
        }
        
        return new Shape3D(grid);
    } // end of makeGrid method
    
    private void orbitControls(Canvas3D c)
    /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
    {
        OrbitBehavior orbit = 
            new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
        orbit.setSchedulingBounds(bounds);

        ViewingPlatform vp = su.getViewingPlatform();
        vp.setViewPlatformBehavior(orbit);      
    } // end of orbitControls()

    private void initUserPosition()
    // Set the user's initial viewpoint using lookAt()
    {
        ViewingPlatform vp = su.getViewingPlatform();
        TransformGroup steerTG = vp.getViewPlatformTransform();

        Transform3D t3d = new Transform3D();
        steerTG.getTransform(t3d);

        // args are: viewer posn, where looking, up direction
        t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
        t3d.invert();

        steerTG.setTransform(t3d);
    } // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3D(), 256, 256);
    } // end of main
} // end of class

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				90839578
			</iTime>
			<fName>
				MyOwn3D.java
			</fName>
			<fSize>
				8568.0
			</fSize>
			<fData>
/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor with grid lines
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 2.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.applet.Applet;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;

public class MyOwn3D extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere();   // for environment nodes
    private SimpleUniverse su;
    
    // constructor
    public MyOwn3D() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
        BranchGroup scene = createSceneGraph();
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor

    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();  // root of visual objects in scene graph
        
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);  // solid color blue for coloring sides and floor
        
        // create the sides and floor
        TransformGroup floor = makeFace("floor", blue);
        TransformGroup back = makeFace("back", blue);
        TransformGroup front = makeFace("front", blue);
        TransformGroup left = makeFace("left", blue);
        TransformGroup right = makeFace("right", blue);
        // TransformGroup ceiling = makeFace("ceiling", new Color3f(1.0f, 1.0f, 1.0f));  // white
        
        // create lines to divide surfaces into 3x3 grids
        Shape3D grid = makeGrid();
        
        // add children to root branch graph
        objRoot.addChild(floor);
        objRoot.addChild(back);
        objRoot.addChild(left);
        objRoot.addChild(right);
        objRoot.addChild(front);
        // objRoot.addChild(ceiling);
        objRoot.addChild(grid);
        
        return objRoot;
    } // end of method

    // method to create sides and floor of a room
    private TransformGroup makeFace(String face, Color3f faceColor) {
        
        // create standard QuadArray with coordinates for basic surface
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-15f, 0f, 15f));
        qa.setCoordinate(1, new Point3f(15f, 0f, 15f));
        qa.setCoordinate(2, new Point3f(15f, 0f, -15f));
        qa.setCoordinate(3, new Point3f(-15f, 0f, -15f));
        
        // set color for created quad
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        // create ability to transform and translate surface to correct position
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        // create surface based on input paramaters
        // surfaces are off by a factor of 0.005 to allow grid lines to be more visible
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15.005f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.rotX(Math.PI);
                t3d.setTranslation(new Vector3f(0f, 15.005f, 0f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "left": t3d.rotZ(-Math.PI/2);
                t3d.setTranslation(new Vector3f(-15.005f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "right": t3d.rotZ(Math.PI/2);
                t3d.setTranslation(new Vector3f(15.005f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.rotX(-Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, 15.005f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.rotX(Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, -15.005f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
        return tg;
    } // end of makeFace method
    
    // makes lines to divide constructed area into 3x3 grid for each side
    private Shape3D makeGrid() {
        
        // set up initial coordinates for z plane grid lines
        Point3f[] gridCoords = new Point3f[47];
        gridCoords[0] = new Point3f(-15f, 15f, 15f);
        gridCoords[1] = new Point3f(-15f, -15f, 15f);
        gridCoords[2] = new Point3f(15f, -15f, 15f);
        gridCoords[3] = new Point3f(15f, 15f, 15f);
        
        // create remaining grid lines through z plane
        Point3f adjust = new Point3f(0, 0, -10);
        for (int i = 4; i < 16; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        // set up initial coordinates for x plane grid lines
        gridCoords[16] = new Point3f(gridCoords[3]);
        gridCoords[17] = new Point3f(gridCoords[2]);
        gridCoords[18] = new Point3f(gridCoords[14]);
        gridCoords[19] = new Point3f(gridCoords[15]);
        
        // create remaining grid lines through x plane
        adjust = new Point3f(-10, 0, 0);
        for (int i = 20; i < 32; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        // set up initial coordinates for y plane grid lines
        gridCoords[32] = new Point3f(gridCoords[0]);
        gridCoords[33] = new Point3f(gridCoords[3]);
        gridCoords[34] = new Point3f(gridCoords[15]);
        gridCoords[35] = new Point3f(gridCoords[12]);
        gridCoords[36] = new Point3f(gridCoords[0]);
        
        // create remaining grid lines through y plane
        adjust = new Point3f(0, -10, 0);
        for (int i = 37; i < 47; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 5]);
            gridCoords[i].add(adjust);
        }
        
        // create array for vertex counts in LineStripArray
        int[] lineCounts = new int[11];
        for (int i = 0; i < lineCounts.length; i++) {
            if (i < 8) {lineCounts[i] = 4;}
            else {lineCounts[i] = 5;}
        }
        
        // create LineStripArray object to create lines
        LineStripArray grid = new LineStripArray(47, LineStripArray.COORDINATES, lineCounts);
        for (int i = 0; i < gridCoords.length; i++) {
            grid.setCoordinate(i, gridCoords[i]);
        }
        
        return new Shape3D(grid);
    } // end of makeGrid method
    
    private void orbitControls(Canvas3D c)
    /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
    {
        OrbitBehavior orbit = 
            new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
        orbit.setSchedulingBounds(bounds);

        ViewingPlatform vp = su.getViewingPlatform();
        vp.setViewPlatformBehavior(orbit);      
    } // end of orbitControls()

    private void initUserPosition()
    // Set the user's initial viewpoint using lookAt()
    {
        ViewingPlatform vp = su.getViewingPlatform();
        TransformGroup steerTG = vp.getViewPlatformTransform();

        Transform3D t3d = new Transform3D();
        steerTG.getTransform(t3d);

        // args are: viewer posn, where looking, up direction
        t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
        t3d.invert();

        steerTG.setTransform(t3d);
    } // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3D(), 256, 256);
    } // end of main
} // end of class

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				176630468
			</iTime>
			<fName>
				LoadModel.java
			</fName>
			<fSize>
				2610.0
			</fSize>
			<fData>
/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor with grid lines
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 2.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import ncsa.j3d.loaders.*;
import com.sun.j3d.loaders.Scene;
import javax.media.j3d.*;
import javax.vecmath.*;

public class LoadModel {
    private Scene loadedScene = null;
    private BranchGroup loadedBG = null;
    
    LoadModel() {
        // FileWriter ofw = null;
        
        try {
            ModelLoader loader = new ModelLoader();
            loadedScene = loader.load("GUN1.3DS")
            if(loadedScene != null) {
                loadedBG = loadedScene.getSceneGroup();
            }
        }
        catch( IOException ioe )
        { System.err.println("Could not find file."); }
        
        Transform3D t3d = new Transform3D();
        t3d.rotX( -Math.PI/2.0 );    // models are often on their face; fix that
        Vector3d scaleVec = calcScaleFactor(loadedBG);   // scale the model
        t3d.setScale( scaleVec );

        TransformGroup tg = new TransformGroup(t3d);
        tg.addChild(loadedBG);
        
    }
    
    private Vector3d calcScaleFactor(BranchGroup loadedBG)
  // Scale the model based on its original bounding box size
  {
     BoundingBox boundbox = new BoundingBox( loadedBG.getBounds() );
     // System.out.println(boundbox);

     // obtain the upper and lower coordinates of the box
     Point3d lower = new Point3d();
     boundbox.getLower( lower );
     Point3d upper = new Point3d();
     boundbox.getUpper( upper );

     // store the largest X, Y, or Z dimension and calculate a scale factor
     double max = 0.0;
     if( (upper.x - lower.x ) > max )
       max = (upper.x - lower.x );

     if( (upper.y - lower.y ) > max )
       max = (upper.y - lower.y );

     if( (upper.z - lower.z ) > max )
       max = (upper.z - lower.z );

     double scaleFactor = 10.0/max;    // 10 is half the width of the floor
     //System.out.println("max dimension: " + df.format(max) + 
       //                 "; scaleFactor: " + df.format(scaleFactor) );

     // limit the scaling so that a big model isn't scaled too much
     if( scaleFactor < 0.0005 )
         scaleFactor = 0.0005;

     return new Vector3d(scaleFactor, scaleFactor, scaleFactor);
  }  // end of calcScaleFactor()
    
  public BranchGroup getModel () { return loadedBG ) }
  
} // end of class

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				40
			<iErrLine>
			<iErrMessage>
				';' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				92
			<iErrLine>
			<iErrMessage>
				';' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				176640171
			</iTime>
			<fName>
				LoadModel.java
			</fName>
			<fSize>
				2611.0
			</fSize>
			<fData>
/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor with grid lines
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 2.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import ncsa.j3d.loaders.*;
import com.sun.j3d.loaders.Scene;
import javax.media.j3d.*;
import javax.vecmath.*;

public class LoadModel {
    private Scene loadedScene = null;
    private BranchGroup loadedBG = null;
    
    LoadModel() {
        // FileWriter ofw = null;
        
        try {
            ModelLoader loader = new ModelLoader();
            loadedScene = loader.load("GUN1.3DS");
            if(loadedScene != null) {
                loadedBG = loadedScene.getSceneGroup();
            }
        }
        catch( IOException ioe )
        { System.err.println("Could not find file."); }
        
        Transform3D t3d = new Transform3D();
        t3d.rotX( -Math.PI/2.0 );    // models are often on their face; fix that
        Vector3d scaleVec = calcScaleFactor(loadedBG);   // scale the model
        t3d.setScale( scaleVec );

        TransformGroup tg = new TransformGroup(t3d);
        tg.addChild(loadedBG);
        
    }
    
    private Vector3d calcScaleFactor(BranchGroup loadedBG)
  // Scale the model based on its original bounding box size
  {
     BoundingBox boundbox = new BoundingBox( loadedBG.getBounds() );
     // System.out.println(boundbox);

     // obtain the upper and lower coordinates of the box
     Point3d lower = new Point3d();
     boundbox.getLower( lower );
     Point3d upper = new Point3d();
     boundbox.getUpper( upper );

     // store the largest X, Y, or Z dimension and calculate a scale factor
     double max = 0.0;
     if( (upper.x - lower.x ) > max )
       max = (upper.x - lower.x );

     if( (upper.y - lower.y ) > max )
       max = (upper.y - lower.y );

     if( (upper.z - lower.z ) > max )
       max = (upper.z - lower.z );

     double scaleFactor = 10.0/max;    // 10 is half the width of the floor
     //System.out.println("max dimension: " + df.format(max) + 
       //                 "; scaleFactor: " + df.format(scaleFactor) );

     // limit the scaling so that a big model isn't scaled too much
     if( scaleFactor < 0.0005 )
         scaleFactor = 0.0005;

     return new Vector3d(scaleFactor, scaleFactor, scaleFactor);
  }  // end of calcScaleFactor()
    
  public BranchGroup getModel () { return loadedBG ) }
  
} // end of class

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				92
			<iErrLine>
			<iErrMessage>
				';' expected
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				176646875
			</iTime>
			<fName>
				LoadModel.java
			</fName>
			<fSize>
				2612.0
			</fSize>
			<fData>
/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor with grid lines
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 2.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import ncsa.j3d.loaders.*;
import com.sun.j3d.loaders.Scene;
import javax.media.j3d.*;
import javax.vecmath.*;

public class LoadModel {
    private Scene loadedScene = null;
    private BranchGroup loadedBG = null;
    
    LoadModel() {
        // FileWriter ofw = null;
        
        try {
            ModelLoader loader = new ModelLoader();
            loadedScene = loader.load("GUN1.3DS");
            if(loadedScene != null) {
                loadedBG = loadedScene.getSceneGroup();
            }
        }
        catch( IOException ioe )
        { System.err.println("Could not find file."); }
        
        Transform3D t3d = new Transform3D();
        t3d.rotX( -Math.PI/2.0 );    // models are often on their face; fix that
        Vector3d scaleVec = calcScaleFactor(loadedBG);   // scale the model
        t3d.setScale( scaleVec );

        TransformGroup tg = new TransformGroup(t3d);
        tg.addChild(loadedBG);
        
    }
    
    private Vector3d calcScaleFactor(BranchGroup loadedBG)
  // Scale the model based on its original bounding box size
  {
     BoundingBox boundbox = new BoundingBox( loadedBG.getBounds() );
     // System.out.println(boundbox);

     // obtain the upper and lower coordinates of the box
     Point3d lower = new Point3d();
     boundbox.getLower( lower );
     Point3d upper = new Point3d();
     boundbox.getUpper( upper );

     // store the largest X, Y, or Z dimension and calculate a scale factor
     double max = 0.0;
     if( (upper.x - lower.x ) > max )
       max = (upper.x - lower.x );

     if( (upper.y - lower.y ) > max )
       max = (upper.y - lower.y );

     if( (upper.z - lower.z ) > max )
       max = (upper.z - lower.z );

     double scaleFactor = 10.0/max;    // 10 is half the width of the floor
     //System.out.println("max dimension: " + df.format(max) + 
       //                 "; scaleFactor: " + df.format(scaleFactor) );

     // limit the scaling so that a big model isn't scaled too much
     if( scaleFactor < 0.0005 )
         scaleFactor = 0.0005;

     return new Vector3d(scaleFactor, scaleFactor, scaleFactor);
  }  // end of calcScaleFactor()
    
  public BranchGroup getModel () { return loadedBG; ) }
  
} // end of class

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				92
			<iErrLine>
			<iErrMessage>
				illegal start of expression
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				176704468
			</iTime>
			<fName>
				LoadModel.java
			</fName>
			<fSize>
				2611.0
			</fSize>
			<fData>
/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor with grid lines
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 2.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import ncsa.j3d.loaders.*;
import com.sun.j3d.loaders.Scene;
import javax.media.j3d.*;
import javax.vecmath.*;

public class LoadModel {
    private Scene loadedScene = null;
    private BranchGroup loadedBG = null;
    
    LoadModel() {
        // FileWriter ofw = null;
        
        try {
            ModelLoader loader = new ModelLoader();
            loadedScene = loader.load("GUN1.3DS");
            if(loadedScene != null) {
                loadedBG = loadedScene.getSceneGroup();
            }
        }
        catch( IOException ioe )
        { System.err.println("Could not find file."); }
        
        Transform3D t3d = new Transform3D();
        t3d.rotX( -Math.PI/2.0 );    // models are often on their face; fix that
        Vector3d scaleVec = calcScaleFactor(loadedBG);   // scale the model
        t3d.setScale( scaleVec );

        TransformGroup tg = new TransformGroup(t3d);
        tg.addChild(loadedBG);
        
    }
    
    private Vector3d calcScaleFactor(BranchGroup loadedBG)
  // Scale the model based on its original bounding box size
  {
     BoundingBox boundbox = new BoundingBox( loadedBG.getBounds() );
     // System.out.println(boundbox);

     // obtain the upper and lower coordinates of the box
     Point3d lower = new Point3d();
     boundbox.getLower( lower );
     Point3d upper = new Point3d();
     boundbox.getUpper( upper );

     // store the largest X, Y, or Z dimension and calculate a scale factor
     double max = 0.0;
     if( (upper.x - lower.x ) > max )
       max = (upper.x - lower.x );

     if( (upper.y - lower.y ) > max )
       max = (upper.y - lower.y );

     if( (upper.z - lower.z ) > max )
       max = (upper.z - lower.z );

     double scaleFactor = 10.0/max;    // 10 is half the width of the floor
     //System.out.println("max dimension: " + df.format(max) + 
       //                 "; scaleFactor: " + df.format(scaleFactor) );

     // limit the scaling so that a big model isn't scaled too much
     if( scaleFactor < 0.0005 )
         scaleFactor = 0.0005;

     return new Vector3d(scaleFactor, scaleFactor, scaleFactor);
  }  // end of calcScaleFactor()
    
  public BranchGroup getModel() { return loadedBG; ) }
  
} // end of class

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				92
			<iErrLine>
			<iErrMessage>
				illegal start of expression
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				176764062
			</iTime>
			<fName>
				LoadModel.java
			</fName>
			<fSize>
				2608.0
			</fSize>
			<fData>
/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor with grid lines
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 2.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import ncsa.j3d.loaders.*;
import com.sun.j3d.loaders.Scene;
import javax.media.j3d.*;
import javax.vecmath.*;

public class LoadModel {
    private Scene loadedScene = null;
    private BranchGroup loadedBG = null;
    
    LoadModel() {
        // FileWriter ofw = null;
        
        try {
            ModelLoader loader = new ModelLoader();
            loadedScene = loader.load("GUN1.3DS");
            if(loadedScene != null) {
                loadedBG = loadedScene.getSceneGroup();
            }
        }
        catch( IOException ioe )
        { System.err.println("Could not find file."); }
        
        Transform3D t3d = new Transform3D();
        t3d.rotX( -Math.PI/2.0 );    // models are often on their face; fix that
        Vector3d scaleVec = calcScaleFactor(loadedBG);   // scale the model
        t3d.setScale( scaleVec );

        TransformGroup tg = new TransformGroup(t3d);
        tg.addChild(loadedBG);
        
    }
    
    private Vector3d calcScaleFactor(BranchGroup loadedBG)
  // Scale the model based on its original bounding box size
  {
     BoundingBox boundbox = new BoundingBox( loadedBG.getBounds() );
     // System.out.println(boundbox);

     // obtain the upper and lower coordinates of the box
     Point3d lower = new Point3d();
     boundbox.getLower( lower );
     Point3d upper = new Point3d();
     boundbox.getUpper( upper );

     // store the largest X, Y, or Z dimension and calculate a scale factor
     double max = 0.0;     if( (upper.x - lower.x ) > max )
       max = (upper.x - lower.x );

     if( (upper.y - lower.y ) > max )
       max = (upper.y - lower.y );

     if( (upper.z - lower.z ) > max )
       max = (upper.z - lower.z );

     double scaleFactor = 10.0/max;    // 10 is half the width of the floor
     //System.out.println("max dimension: " + df.format(max) + 
       //                 "; scaleFactor: " + df.format(scaleFactor) );

     // limit the scaling so that a big model isn't scaled too much
     if( scaleFactor < 0.0005 )
         scaleFactor = 0.0005;

     return new Vector3d(scaleFactor, scaleFactor, scaleFactor);
  }  // end of calcScaleFactor()
    
  public BranchGroup getModel() { return loadedBG; }
  
} // end of class

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				45
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class IOException
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				176926312
			</iTime>
			<fName>
				LoadModel.java
			</fName>
			<fSize>
				2626.0
			</fSize>
			<fData>
/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor with grid lines
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 2.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import ncsa.j3d.loaders.*;
import com.sun.j3d.loaders.Scene;
import java.io.*;
import javax.media.j3d.*;
import javax.vecmath.*;

public class LoadModel {
    private Scene loadedScene = null;
    private BranchGroup loadedBG = null;
    
    LoadModel() {
        // FileWriter ofw = null;
        
        try {
            ModelLoader loader = new ModelLoader();
            loadedScene = loader.load("GUN1.3DS");
            if(loadedScene != null) {
                loadedBG = loadedScene.getSceneGroup();
            }
        }
        catch( IOException ioe )
        { System.err.println("Could not find file."); }
        
        Transform3D t3d = new Transform3D();
        t3d.rotX( -Math.PI/2.0 );    // models are often on their face; fix that
        Vector3d scaleVec = calcScaleFactor(loadedBG);   // scale the model
        t3d.setScale( scaleVec );

        TransformGroup tg = new TransformGroup(t3d);
        tg.addChild(loadedBG);
        
    }
    
    private Vector3d calcScaleFactor(BranchGroup loadedBG)
  // Scale the model based on its original bounding box size
  {
     BoundingBox boundbox = new BoundingBox( loadedBG.getBounds() );
     // System.out.println(boundbox);

     // obtain the upper and lower coordinates of the box
     Point3d lower = new Point3d();
     boundbox.getLower( lower );
     Point3d upper = new Point3d();
     boundbox.getUpper( upper );

     // store the largest X, Y, or Z dimension and calculate a scale factor
     double max = 0.0;     if( (upper.x - lower.x ) > max )
       max = (upper.x - lower.x );

     if( (upper.y - lower.y ) > max )
       max = (upper.y - lower.y );

     if( (upper.z - lower.z ) > max )
       max = (upper.z - lower.z );

     double scaleFactor = 10.0/max;    // 10 is half the width of the floor
     //System.out.println("max dimension: " + df.format(max) + 
       //                 "; scaleFactor: " + df.format(scaleFactor) );

     // limit the scaling so that a big model isn't scaled too much
     if( scaleFactor < 0.0005 )
         scaleFactor = 0.0005;

     return new Vector3d(scaleFactor, scaleFactor, scaleFactor);
  }  // end of calcScaleFactor()
    
  public BranchGroup getModel() { return loadedBG; }
  
} // end of class

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				176947718
			</iTime>
			<fName>
				MyOwn3D.java
			</fName>
			<fSize>
				8658.0
			</fSize>
			<fData>
/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor with grid lines
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 2.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.applet.Applet;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;

public class MyOwn3D extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere();   // for environment nodes
    private SimpleUniverse su;
    
    // constructor
    public MyOwn3D() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
        BranchGroup scene = createSceneGraph();
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor

    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();  // root of visual objects in scene graph
        
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);  // solid color blue for coloring sides and floor
        
        // create the sides and floor
        TransformGroup floor = makeFace("floor", blue);
        TransformGroup back = makeFace("back", blue);
        TransformGroup front = makeFace("front", blue);
        TransformGroup left = makeFace("left", blue);
        TransformGroup right = makeFace("right", blue);
        // TransformGroup ceiling = makeFace("ceiling", new Color3f(1.0f, 1.0f, 1.0f));  // white
        
        // create lines to divide surfaces into 3x3 grids
        Shape3D grid = makeGrid();
        
        // add children to root branch graph
        objRoot.addChild(floor);
        objRoot.addChild(back);
        objRoot.addChild(left);
        objRoot.addChild(right);
        objRoot.addChild(front);
        // objRoot.addChild(ceiling);
        objRoot.addChild(grid);
        
        LoadModel lm = new LoadModel();
        objRoot.addChild(lm.getModel());
        
        return objRoot;
    } // end of method

    // method to create sides and floor of a room
    private TransformGroup makeFace(String face, Color3f faceColor) {
        
        // create standard QuadArray with coordinates for basic surface
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-15f, 0f, 15f));
        qa.setCoordinate(1, new Point3f(15f, 0f, 15f));
        qa.setCoordinate(2, new Point3f(15f, 0f, -15f));
        qa.setCoordinate(3, new Point3f(-15f, 0f, -15f));
        
        // set color for created quad
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        // create ability to transform and translate surface to correct position
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        // create surface based on input paramaters
        // surfaces are off by a factor of 0.005 to allow grid lines to be more visible
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15.005f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.rotX(Math.PI);
                t3d.setTranslation(new Vector3f(0f, 15.005f, 0f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "left": t3d.rotZ(-Math.PI/2);
                t3d.setTranslation(new Vector3f(-15.005f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "right": t3d.rotZ(Math.PI/2);
                t3d.setTranslation(new Vector3f(15.005f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.rotX(-Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, 15.005f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.rotX(Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, -15.005f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
        return tg;
    } // end of makeFace method
    
    // makes lines to divide constructed area into 3x3 grid for each side
    private Shape3D makeGrid() {
        
        // set up initial coordinates for z plane grid lines
        Point3f[] gridCoords = new Point3f[47];
        gridCoords[0] = new Point3f(-15f, 15f, 15f);
        gridCoords[1] = new Point3f(-15f, -15f, 15f);
        gridCoords[2] = new Point3f(15f, -15f, 15f);
        gridCoords[3] = new Point3f(15f, 15f, 15f);
        
        // create remaining grid lines through z plane
        Point3f adjust = new Point3f(0, 0, -10);
        for (int i = 4; i < 16; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        // set up initial coordinates for x plane grid lines
        gridCoords[16] = new Point3f(gridCoords[3]);
        gridCoords[17] = new Point3f(gridCoords[2]);
        gridCoords[18] = new Point3f(gridCoords[14]);
        gridCoords[19] = new Point3f(gridCoords[15]);
        
        // create remaining grid lines through x plane
        adjust = new Point3f(-10, 0, 0);
        for (int i = 20; i < 32; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        // set up initial coordinates for y plane grid lines
        gridCoords[32] = new Point3f(gridCoords[0]);
        gridCoords[33] = new Point3f(gridCoords[3]);
        gridCoords[34] = new Point3f(gridCoords[15]);
        gridCoords[35] = new Point3f(gridCoords[12]);
        gridCoords[36] = new Point3f(gridCoords[0]);
        
        // create remaining grid lines through y plane
        adjust = new Point3f(0, -10, 0);
        for (int i = 37; i < 47; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 5]);
            gridCoords[i].add(adjust);
        }
        
        // create array for vertex counts in LineStripArray
        int[] lineCounts = new int[11];
        for (int i = 0; i < lineCounts.length; i++) {
            if (i < 8) {lineCounts[i] = 4;}
            else {lineCounts[i] = 5;}
        }
        
        // create LineStripArray object to create lines
        LineStripArray grid = new LineStripArray(47, LineStripArray.COORDINATES, lineCounts);
        for (int i = 0; i < gridCoords.length; i++) {
            grid.setCoordinate(i, gridCoords[i]);
        }
        
        return new Shape3D(grid);
    } // end of makeGrid method
    
    private void orbitControls(Canvas3D c)
    /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
    {
        OrbitBehavior orbit = 
            new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
        orbit.setSchedulingBounds(bounds);

        ViewingPlatform vp = su.getViewingPlatform();
        vp.setViewPlatformBehavior(orbit);      
    } // end of orbitControls()

    private void initUserPosition()
    // Set the user's initial viewpoint using lookAt()
    {
        ViewingPlatform vp = su.getViewingPlatform();
        TransformGroup steerTG = vp.getViewPlatformTransform();

        Transform3D t3d = new Transform3D();
        steerTG.getTransform(t3d);

        // args are: viewer posn, where looking, up direction
        t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
        t3d.invert();

        steerTG.setTransform(t3d);
    } // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3D(), 256, 256);
    } // end of main
} // end of class

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				177175015
			</iTime>
			<fName>
				MyOwn3D.java
			</fName>
			<fSize>
				8658.0
			</fSize>
			<fData>
/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor with grid lines
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 2.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.applet.Applet;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;

public class MyOwn3D extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere();   // for environment nodes
    private SimpleUniverse su;
    
    // constructor
    public MyOwn3D() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
        BranchGroup scene = createSceneGraph();
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor

    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();  // root of visual objects in scene graph
        
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);  // solid color blue for coloring sides and floor
        
        // create the sides and floor
        TransformGroup floor = makeFace("floor", blue);
        TransformGroup back = makeFace("back", blue);
        TransformGroup front = makeFace("front", blue);
        TransformGroup left = makeFace("left", blue);
        TransformGroup right = makeFace("right", blue);
        // TransformGroup ceiling = makeFace("ceiling", new Color3f(1.0f, 1.0f, 1.0f));  // white
        
        // create lines to divide surfaces into 3x3 grids
        Shape3D grid = makeGrid();
        
        // add children to root branch graph
        objRoot.addChild(floor);
        objRoot.addChild(back);
        objRoot.addChild(left);
        objRoot.addChild(right);
        objRoot.addChild(front);
        // objRoot.addChild(ceiling);
        objRoot.addChild(grid);
        
        LoadModel lm = new LoadModel();
        objRoot.addChild(lm.getModel());
        
        return objRoot;
    } // end of method

    // method to create sides and floor of a room
    private TransformGroup makeFace(String face, Color3f faceColor) {
        
        // create standard QuadArray with coordinates for basic surface
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-15f, 0f, 15f));
        qa.setCoordinate(1, new Point3f(15f, 0f, 15f));
        qa.setCoordinate(2, new Point3f(15f, 0f, -15f));
        qa.setCoordinate(3, new Point3f(-15f, 0f, -15f));
        
        // set color for created quad
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        // create ability to transform and translate surface to correct position
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        // create surface based on input paramaters
        // surfaces are off by a factor of 0.005 to allow grid lines to be more visible
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15.005f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.rotX(Math.PI);
                t3d.setTranslation(new Vector3f(0f, 15.005f, 0f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "left": t3d.rotZ(-Math.PI/2);
                t3d.setTranslation(new Vector3f(-15.005f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "right": t3d.rotZ(Math.PI/2);
                t3d.setTranslation(new Vector3f(15.005f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.rotX(-Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, 15.005f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.rotX(Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, -15.005f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
        return tg;
    } // end of makeFace method
    
    // makes lines to divide constructed area into 3x3 grid for each side
    private Shape3D makeGrid() {
        
        // set up initial coordinates for z plane grid lines
        Point3f[] gridCoords = new Point3f[47];
        gridCoords[0] = new Point3f(-15f, 15f, 15f);
        gridCoords[1] = new Point3f(-15f, -15f, 15f);
        gridCoords[2] = new Point3f(15f, -15f, 15f);
        gridCoords[3] = new Point3f(15f, 15f, 15f);
        
        // create remaining grid lines through z plane
        Point3f adjust = new Point3f(0, 0, -10);
        for (int i = 4; i < 16; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        // set up initial coordinates for x plane grid lines
        gridCoords[16] = new Point3f(gridCoords[3]);
        gridCoords[17] = new Point3f(gridCoords[2]);
        gridCoords[18] = new Point3f(gridCoords[14]);
        gridCoords[19] = new Point3f(gridCoords[15]);
        
        // create remaining grid lines through x plane
        adjust = new Point3f(-10, 0, 0);
        for (int i = 20; i < 32; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        // set up initial coordinates for y plane grid lines
        gridCoords[32] = new Point3f(gridCoords[0]);
        gridCoords[33] = new Point3f(gridCoords[3]);
        gridCoords[34] = new Point3f(gridCoords[15]);
        gridCoords[35] = new Point3f(gridCoords[12]);
        gridCoords[36] = new Point3f(gridCoords[0]);
        
        // create remaining grid lines through y plane
        adjust = new Point3f(0, -10, 0);
        for (int i = 37; i < 47; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 5]);
            gridCoords[i].add(adjust);
        }
        
        // create array for vertex counts in LineStripArray
        int[] lineCounts = new int[11];
        for (int i = 0; i < lineCounts.length; i++) {
            if (i < 8) {lineCounts[i] = 4;}
            else {lineCounts[i] = 5;}
        }
        
        // create LineStripArray object to create lines
        LineStripArray grid = new LineStripArray(47, LineStripArray.COORDINATES, lineCounts);
        for (int i = 0; i < gridCoords.length; i++) {
            grid.setCoordinate(i, gridCoords[i]);
        }
        
        return new Shape3D(grid);
    } // end of makeGrid method
    
    private void orbitControls(Canvas3D c)
    /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
    {
        OrbitBehavior orbit = 
            new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
        orbit.setSchedulingBounds(bounds);

        ViewingPlatform vp = su.getViewingPlatform();
        vp.setViewPlatformBehavior(orbit);      
    } // end of orbitControls()

    private void initUserPosition()
    // Set the user's initial viewpoint using lookAt()
    {
        ViewingPlatform vp = su.getViewingPlatform();
        TransformGroup steerTG = vp.getViewPlatformTransform();

        Transform3D t3d = new Transform3D();
        steerTG.getTransform(t3d);

        // args are: viewer posn, where looking, up direction
        t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
        t3d.invert();

        steerTG.setTransform(t3d);
    } // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3D(), 256, 256);
    } // end of main
} // end of class

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				177195906
			</iTime>
			<fName>
				LoadModel.java
			</fName>
			<fSize>
				2646.0
			</fSize>
			<fData>
/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor with grid lines
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 2.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import ncsa.j3d.loaders.*;
import com.sun.j3d.loaders.Scene;
import java.io.*;
import javax.media.j3d.*;
import javax.vecmath.*;

public class LoadModel {
    private Scene loadedScene = null;
    private BranchGroup loadedBG = null;
    private TransformGroup tg = null;
    
    LoadModel() {
        // FileWriter ofw = null;
        
        try {
            ModelLoader loader = new ModelLoader();
            loadedScene = loader.load("GUN1.3DS");
            if(loadedScene != null) {
                loadedBG = loadedScene.getSceneGroup();
            }
        }
        catch( IOException ioe )
        { System.err.println("Could not find file."); }
        
        Transform3D t3d = new Transform3D();
        t3d.rotX( -Math.PI/2.0 );    // models are often on their face; fix that
        Vector3d scaleVec = calcScaleFactor(loadedBG);   // scale the model
        t3d.setScale( scaleVec );

        tg = new TransformGroup(t3d);
        tg.addChild(loadedBG);
        
    }
    
    private Vector3d calcScaleFactor(BranchGroup loadedBG)
  // Scale the model based on its original bounding box size
  {
     BoundingBox boundbox = new BoundingBox( loadedBG.getBounds() );
     // System.out.println(boundbox);

     // obtain the upper and lower coordinates of the box
     Point3d lower = new Point3d();
     boundbox.getLower( lower );
     Point3d upper = new Point3d();
     boundbox.getUpper( upper );

     // store the largest X, Y, or Z dimension and calculate a scale factor
     double max = 0.0;     if( (upper.x - lower.x ) > max )
       max = (upper.x - lower.x );

     if( (upper.y - lower.y ) > max )
       max = (upper.y - lower.y );

     if( (upper.z - lower.z ) > max )
       max = (upper.z - lower.z );

     double scaleFactor = 10.0/max;    // 10 is half the width of the floor
     //System.out.println("max dimension: " + df.format(max) + 
       //                 "; scaleFactor: " + df.format(scaleFactor) );

     // limit the scaling so that a big model isn't scaled too much
     if( scaleFactor < 0.0005 )
         scaleFactor = 0.0005;

     return new Vector3d(scaleFactor, scaleFactor, scaleFactor);
  }  // end of calcScaleFactor()
    
  public TransformGroup getModel() { return tg; }
  
} // end of class

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				177203703
			</iTime>
			<fName>
				MyOwn3D.java
			</fName>
			<fSize>
				8658.0
			</fSize>
			<fData>
/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor with grid lines
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 2.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.applet.Applet;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;

public class MyOwn3D extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere();   // for environment nodes
    private SimpleUniverse su;
    
    // constructor
    public MyOwn3D() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
        BranchGroup scene = createSceneGraph();
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor

    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();  // root of visual objects in scene graph
        
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);  // solid color blue for coloring sides and floor
        
        // create the sides and floor
        TransformGroup floor = makeFace("floor", blue);
        TransformGroup back = makeFace("back", blue);
        TransformGroup front = makeFace("front", blue);
        TransformGroup left = makeFace("left", blue);
        TransformGroup right = makeFace("right", blue);
        // TransformGroup ceiling = makeFace("ceiling", new Color3f(1.0f, 1.0f, 1.0f));  // white
        
        // create lines to divide surfaces into 3x3 grids
        Shape3D grid = makeGrid();
        
        // add children to root branch graph
        objRoot.addChild(floor);
        objRoot.addChild(back);
        objRoot.addChild(left);
        objRoot.addChild(right);
        objRoot.addChild(front);
        // objRoot.addChild(ceiling);
        objRoot.addChild(grid);
        
        LoadModel lm = new LoadModel();
        objRoot.addChild(lm.getModel());
        
        return objRoot;
    } // end of method

    // method to create sides and floor of a room
    private TransformGroup makeFace(String face, Color3f faceColor) {
        
        // create standard QuadArray with coordinates for basic surface
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-15f, 0f, 15f));
        qa.setCoordinate(1, new Point3f(15f, 0f, 15f));
        qa.setCoordinate(2, new Point3f(15f, 0f, -15f));
        qa.setCoordinate(3, new Point3f(-15f, 0f, -15f));
        
        // set color for created quad
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        // create ability to transform and translate surface to correct position
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        // create surface based on input paramaters
        // surfaces are off by a factor of 0.005 to allow grid lines to be more visible
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15.005f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.rotX(Math.PI);
                t3d.setTranslation(new Vector3f(0f, 15.005f, 0f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "left": t3d.rotZ(-Math.PI/2);
                t3d.setTranslation(new Vector3f(-15.005f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "right": t3d.rotZ(Math.PI/2);
                t3d.setTranslation(new Vector3f(15.005f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.rotX(-Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, 15.005f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.rotX(Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, -15.005f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
        return tg;
    } // end of makeFace method
    
    // makes lines to divide constructed area into 3x3 grid for each side
    private Shape3D makeGrid() {
        
        // set up initial coordinates for z plane grid lines
        Point3f[] gridCoords = new Point3f[47];
        gridCoords[0] = new Point3f(-15f, 15f, 15f);
        gridCoords[1] = new Point3f(-15f, -15f, 15f);
        gridCoords[2] = new Point3f(15f, -15f, 15f);
        gridCoords[3] = new Point3f(15f, 15f, 15f);
        
        // create remaining grid lines through z plane
        Point3f adjust = new Point3f(0, 0, -10);
        for (int i = 4; i < 16; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        // set up initial coordinates for x plane grid lines
        gridCoords[16] = new Point3f(gridCoords[3]);
        gridCoords[17] = new Point3f(gridCoords[2]);
        gridCoords[18] = new Point3f(gridCoords[14]);
        gridCoords[19] = new Point3f(gridCoords[15]);
        
        // create remaining grid lines through x plane
        adjust = new Point3f(-10, 0, 0);
        for (int i = 20; i < 32; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        // set up initial coordinates for y plane grid lines
        gridCoords[32] = new Point3f(gridCoords[0]);
        gridCoords[33] = new Point3f(gridCoords[3]);
        gridCoords[34] = new Point3f(gridCoords[15]);
        gridCoords[35] = new Point3f(gridCoords[12]);
        gridCoords[36] = new Point3f(gridCoords[0]);
        
        // create remaining grid lines through y plane
        adjust = new Point3f(0, -10, 0);
        for (int i = 37; i < 47; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 5]);
            gridCoords[i].add(adjust);
        }
        
        // create array for vertex counts in LineStripArray
        int[] lineCounts = new int[11];
        for (int i = 0; i < lineCounts.length; i++) {
            if (i < 8) {lineCounts[i] = 4;}
            else {lineCounts[i] = 5;}
        }
        
        // create LineStripArray object to create lines
        LineStripArray grid = new LineStripArray(47, LineStripArray.COORDINATES, lineCounts);
        for (int i = 0; i < gridCoords.length; i++) {
            grid.setCoordinate(i, gridCoords[i]);
        }
        
        return new Shape3D(grid);
    } // end of makeGrid method
    
    private void orbitControls(Canvas3D c)
    /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
    {
        OrbitBehavior orbit = 
            new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
        orbit.setSchedulingBounds(bounds);

        ViewingPlatform vp = su.getViewingPlatform();
        vp.setViewPlatformBehavior(orbit);      
    } // end of orbitControls()

    private void initUserPosition()
    // Set the user's initial viewpoint using lookAt()
    {
        ViewingPlatform vp = su.getViewingPlatform();
        TransformGroup steerTG = vp.getViewPlatformTransform();

        Transform3D t3d = new Transform3D();
        steerTG.getTransform(t3d);

        // args are: viewer posn, where looking, up direction
        t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
        t3d.invert();

        steerTG.setTransform(t3d);
    } // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3D(), 256, 256);
    } // end of main
} // end of class

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				177993031
			</iTime>
			<fName>
				MyOwn3D.java
			</fName>
			<fSize>
				8658.0
			</fSize>
			<fData>
/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor with grid lines
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 2.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.applet.Applet;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;

public class MyOwn3D extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere();   // for environment nodes
    private SimpleUniverse su;
    
    // constructor
    public MyOwn3D() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
        BranchGroup scene = createSceneGraph();
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor

    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();  // root of visual objects in scene graph
        
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);  // solid color blue for coloring sides and floor
        
        // create the sides and floor
        TransformGroup floor = makeFace("floor", blue);
        TransformGroup back = makeFace("back", blue);
        TransformGroup front = makeFace("front", blue);
        TransformGroup left = makeFace("left", blue);
        TransformGroup right = makeFace("right", blue);
        // TransformGroup ceiling = makeFace("ceiling", new Color3f(1.0f, 1.0f, 1.0f));  // white
        
        // create lines to divide surfaces into 3x3 grids
        Shape3D grid = makeGrid();
        
        // add children to root branch graph
        objRoot.addChild(floor);
        objRoot.addChild(back);
        objRoot.addChild(left);
        objRoot.addChild(right);
        objRoot.addChild(front);
        // objRoot.addChild(ceiling);
        objRoot.addChild(grid);
        
        LoadModel lm = new LoadModel();
        objRoot.addChild(lm.getModel());
        
        return objRoot;
    } // end of method

    // method to create sides and floor of a room
    private TransformGroup makeFace(String face, Color3f faceColor) {
        
        // create standard QuadArray with coordinates for basic surface
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-15f, 0f, 15f));
        qa.setCoordinate(1, new Point3f(15f, 0f, 15f));
        qa.setCoordinate(2, new Point3f(15f, 0f, -15f));
        qa.setCoordinate(3, new Point3f(-15f, 0f, -15f));
        
        // set color for created quad
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        // create ability to transform and translate surface to correct position
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        // create surface based on input paramaters
        // surfaces are off by a factor of 0.005 to allow grid lines to be more visible
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15.005f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.rotX(Math.PI);
                t3d.setTranslation(new Vector3f(0f, 15.005f, 0f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "left": t3d.rotZ(-Math.PI/2);
                t3d.setTranslation(new Vector3f(-15.005f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "right": t3d.rotZ(Math.PI/2);
                t3d.setTranslation(new Vector3f(15.005f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.rotX(-Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, 15.005f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.rotX(Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, -15.005f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
        return tg;
    } // end of makeFace method
    
    // makes lines to divide constructed area into 3x3 grid for each side
    private Shape3D makeGrid() {
        
        // set up initial coordinates for z plane grid lines
        Point3f[] gridCoords = new Point3f[47];
        gridCoords[0] = new Point3f(-15f, 15f, 15f);
        gridCoords[1] = new Point3f(-15f, -15f, 15f);
        gridCoords[2] = new Point3f(15f, -15f, 15f);
        gridCoords[3] = new Point3f(15f, 15f, 15f);
        
        // create remaining grid lines through z plane
        Point3f adjust = new Point3f(0, 0, -10);
        for (int i = 4; i < 16; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        // set up initial coordinates for x plane grid lines
        gridCoords[16] = new Point3f(gridCoords[3]);
        gridCoords[17] = new Point3f(gridCoords[2]);
        gridCoords[18] = new Point3f(gridCoords[14]);
        gridCoords[19] = new Point3f(gridCoords[15]);
        
        // create remaining grid lines through x plane
        adjust = new Point3f(-10, 0, 0);
        for (int i = 20; i < 32; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        // set up initial coordinates for y plane grid lines
        gridCoords[32] = new Point3f(gridCoords[0]);
        gridCoords[33] = new Point3f(gridCoords[3]);
        gridCoords[34] = new Point3f(gridCoords[15]);
        gridCoords[35] = new Point3f(gridCoords[12]);
        gridCoords[36] = new Point3f(gridCoords[0]);
        
        // create remaining grid lines through y plane
        adjust = new Point3f(0, -10, 0);
        for (int i = 37; i < 47; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 5]);
            gridCoords[i].add(adjust);
        }
        
        // create array for vertex counts in LineStripArray
        int[] lineCounts = new int[11];
        for (int i = 0; i < lineCounts.length; i++) {
            if (i < 8) {lineCounts[i] = 4;}
            else {lineCounts[i] = 5;}
        }
        
        // create LineStripArray object to create lines
        LineStripArray grid = new LineStripArray(47, LineStripArray.COORDINATES, lineCounts);
        for (int i = 0; i < gridCoords.length; i++) {
            grid.setCoordinate(i, gridCoords[i]);
        }
        
        return new Shape3D(grid);
    } // end of makeGrid method
    
    private void orbitControls(Canvas3D c)
    /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
    {
        OrbitBehavior orbit = 
            new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
        orbit.setSchedulingBounds(bounds);

        ViewingPlatform vp = su.getViewingPlatform();
        vp.setViewPlatformBehavior(orbit);      
    } // end of orbitControls()

    private void initUserPosition()
    // Set the user's initial viewpoint using lookAt()
    {
        ViewingPlatform vp = su.getViewingPlatform();
        TransformGroup steerTG = vp.getViewPlatformTransform();

        Transform3D t3d = new Transform3D();
        steerTG.getTransform(t3d);

        // args are: viewer posn, where looking, up direction
        t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
        t3d.invert();

        steerTG.setTransform(t3d);
    } // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3D(), 256, 256);
    } // end of main
} // end of class

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				178446640
			</iTime>
			<fName>
				LoadModel.java
			</fName>
			<fSize>
				3800.0
			</fSize>
			<fData>
/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor with grid lines
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 2.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import ncsa.j3d.loaders.*;
import com.sun.j3d.loaders.Scene;
import java.io.*;
import javax.media.j3d.*;
import javax.vecmath.*;

public class LoadModel {
    private Scene loadedScene = null;
    private BranchGroup loadedBG = null;
    private TransformGroup tg = null;
    
    LoadModel() {
        // FileWriter ofw = null;
        
        try {
            ModelLoader loader = new ModelLoader();
            loadedScene = loader.load("GUN1.3DS");
            if(loadedScene != null) {
                loadedBG = loadedScene.getSceneGroup();
            }
        }
        catch( IOException ioe )
        { System.err.println("Could not find file."); }
        
        Transform3D t3d = new Transform3D();
        t3d.rotX( -Math.PI/2.0 );    // models are often on their face; fix that
        Vector3d scaleVec = calcScaleFactor(loadedBG);   // scale the model
        t3d.setScale( scaleVec );
        adjustShapes(loadedBG);  
        
        tg = new TransformGroup(t3d);
        tg.addChild(loadedBG);
        
    }
    
    private Vector3d calcScaleFactor(BranchGroup loadedBG)
        // Scale the model based on its original bounding box size
    {
        BoundingBox boundbox = new BoundingBox( loadedBG.getBounds() );
        // System.out.println(boundbox);

        // obtain the upper and lower coordinates of the box
        Point3d lower = new Point3d();
        boundbox.getLower( lower );
        Point3d upper = new Point3d();
        boundbox.getUpper( upper );

        // store the largest X, Y, or Z dimension and calculate a scale factor
        double max = 0.0;     
        if( (upper.x - lower.x ) > max )
            max = (upper.x - lower.x );

        if( (upper.y - lower.y ) > max )
            max = (upper.y - lower.y );

        if( (upper.z - lower.z ) > max )
            max = (upper.z - lower.z );

        double scaleFactor = 10.0/max;    // 10 is half the width of the floor
        //System.out.println("max dimension: " + df.format(max) + 
        //                 "; scaleFactor: " + df.format(scaleFactor) );

        // limit the scaling so that a big model isn't scaled too much
        if( scaleFactor < 0.0005 )
            scaleFactor = 0.0005;

        return new Vector3d(scaleFactor, scaleFactor, scaleFactor);
    }   // end of calcScaleFactor()
    
    private void adjustShapes(Node node)
    /*  If the node is a Group then recursively visit its children.
     *  Otherwise if the node is a Shape3D then so the changes.
     */
    { if(node instanceof Group) {
      Group g = (Group) node;
      Enumeration enumKids = g.getAllChildren();
      while(enumKids.hasMoreElements()) {    // visit children
        SceneGraphObject obj = (SceneGraphObject) enumKids.nextElement();
        if (obj instanceof Node)
          visitNode((Node) obj);
      }
    }
    else if (node instanceof Shape3D)
      adjustShape3D((Shape3D) node);
    }  // end of visitNode()
    
    private void adjustShape3D(Shape3D shape)
  // change the shape's colour to blue
  {
    Appearance app = shape.getAppearance();
    Material blueMat = new Material(black, black, blue, white, 20.0f);
        // the black ambient means that unlit surfaces are pitch black
    blueMat.setLightingEnable(true);
    app.setMaterial( blueMat );
    shape.setAppearance(app);
  }  // end of makeBlue()
  
    public TransformGroup getModel() { return tg; }
  
} // end of class

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				101
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class Enumeration
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				105
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   method visitNode(javax.media.j3d.Node)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				116
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable black
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				116
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable black
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				116
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable blue
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				116
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable white
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				178517375
			</iTime>
			<fName>
				LoadModel.java
			</fName>
			<fSize>
				3820.0
			</fSize>
			<fData>
/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor with grid lines
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 2.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import ncsa.j3d.loaders.*;
import com.sun.j3d.loaders.Scene;
import java.io.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import java.util.*;

public class LoadModel {
    private Scene loadedScene = null;
    private BranchGroup loadedBG = null;
    private TransformGroup tg = null;
    
    LoadModel() {
        // FileWriter ofw = null;
        
        try {
            ModelLoader loader = new ModelLoader();
            loadedScene = loader.load("GUN1.3DS");
            if(loadedScene != null) {
                loadedBG = loadedScene.getSceneGroup();
            }
        }
        catch( IOException ioe )
        { System.err.println("Could not find file."); }
        
        Transform3D t3d = new Transform3D();
        t3d.rotX( -Math.PI/2.0 );    // models are often on their face; fix that
        Vector3d scaleVec = calcScaleFactor(loadedBG);   // scale the model
        t3d.setScale( scaleVec );
        adjustShapes(loadedBG);  
        
        tg = new TransformGroup(t3d);
        tg.addChild(loadedBG);
        
    }
    
    private Vector3d calcScaleFactor(BranchGroup loadedBG)
        // Scale the model based on its original bounding box size
    {
        BoundingBox boundbox = new BoundingBox( loadedBG.getBounds() );
        // System.out.println(boundbox);

        // obtain the upper and lower coordinates of the box
        Point3d lower = new Point3d();
        boundbox.getLower( lower );
        Point3d upper = new Point3d();
        boundbox.getUpper( upper );

        // store the largest X, Y, or Z dimension and calculate a scale factor
        double max = 0.0;     
        if( (upper.x - lower.x ) > max )
            max = (upper.x - lower.x );

        if( (upper.y - lower.y ) > max )
            max = (upper.y - lower.y );

        if( (upper.z - lower.z ) > max )
            max = (upper.z - lower.z );

        double scaleFactor = 10.0/max;    // 10 is half the width of the floor
        //System.out.println("max dimension: " + df.format(max) + 
        //                 "; scaleFactor: " + df.format(scaleFactor) );

        // limit the scaling so that a big model isn't scaled too much
        if( scaleFactor < 0.0005 )
            scaleFactor = 0.0005;

        return new Vector3d(scaleFactor, scaleFactor, scaleFactor);
    }   // end of calcScaleFactor()
    
    private void adjustShapes(Node node)
    /*  If the node is a Group then recursively visit its children.
     *  Otherwise if the node is a Shape3D then so the changes.
     */
    { if(node instanceof Group) {
      Group g = (Group) node;
      Enumeration enumKids = g.getAllChildren();
      while(enumKids.hasMoreElements()) {    // visit children
        SceneGraphObject obj = (SceneGraphObject) enumKids.nextElement();
        if (obj instanceof Node)
          visitNode((Node) obj);
      }
    }
    else if (node instanceof Shape3D)
      adjustShape3D((Shape3D) node);
    }  // end of visitNode()
    
    private void adjustShape3D(Shape3D shape)
  // change the shape's colour to blue
  {
    Appearance app = shape.getAppearance();
    Material blueMat = new Material(black, black, blue, white, 20.0f);
        // the black ambient means that unlit surfaces are pitch black
    blueMat.setLightingEnable(true);
    app.setMaterial( blueMat );
    shape.setAppearance(app);
  }  // end of makeBlue()
  
    public TransformGroup getModel() { return tg; }
  
} // end of class

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				106
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   method visitNode(javax.media.j3d.Node)
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				117
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable black
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				117
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable black
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				117
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable blue
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				117
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable white
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				178531468
			</iTime>
			<fName>
				LoadModel.java
			</fName>
			<fSize>
				3823.0
			</fSize>
			<fData>
/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor with grid lines
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 2.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import ncsa.j3d.loaders.*;
import com.sun.j3d.loaders.Scene;
import java.io.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import java.util.*;

public class LoadModel {
    private Scene loadedScene = null;
    private BranchGroup loadedBG = null;
    private TransformGroup tg = null;
    
    LoadModel() {
        // FileWriter ofw = null;
        
        try {
            ModelLoader loader = new ModelLoader();
            loadedScene = loader.load("GUN1.3DS");
            if(loadedScene != null) {
                loadedBG = loadedScene.getSceneGroup();
            }
        }
        catch( IOException ioe )
        { System.err.println("Could not find file."); }
        
        Transform3D t3d = new Transform3D();
        t3d.rotX( -Math.PI/2.0 );    // models are often on their face; fix that
        Vector3d scaleVec = calcScaleFactor(loadedBG);   // scale the model
        t3d.setScale( scaleVec );
        adjustShapes(loadedBG);  
        
        tg = new TransformGroup(t3d);
        tg.addChild(loadedBG);
        
    }
    
    private Vector3d calcScaleFactor(BranchGroup loadedBG)
        // Scale the model based on its original bounding box size
    {
        BoundingBox boundbox = new BoundingBox( loadedBG.getBounds() );
        // System.out.println(boundbox);

        // obtain the upper and lower coordinates of the box
        Point3d lower = new Point3d();
        boundbox.getLower( lower );
        Point3d upper = new Point3d();
        boundbox.getUpper( upper );

        // store the largest X, Y, or Z dimension and calculate a scale factor
        double max = 0.0;     
        if( (upper.x - lower.x ) > max )
            max = (upper.x - lower.x );

        if( (upper.y - lower.y ) > max )
            max = (upper.y - lower.y );

        if( (upper.z - lower.z ) > max )
            max = (upper.z - lower.z );

        double scaleFactor = 10.0/max;    // 10 is half the width of the floor
        //System.out.println("max dimension: " + df.format(max) + 
        //                 "; scaleFactor: " + df.format(scaleFactor) );

        // limit the scaling so that a big model isn't scaled too much
        if( scaleFactor < 0.0005 )
            scaleFactor = 0.0005;

        return new Vector3d(scaleFactor, scaleFactor, scaleFactor);
    }   // end of calcScaleFactor()
    
    private void adjustShapes(Node node)
    /*  If the node is a Group then recursively visit its children.
     *  Otherwise if the node is a Shape3D then so the changes.
     */
    { if(node instanceof Group) {
      Group g = (Group) node;
      Enumeration enumKids = g.getAllChildren();
      while(enumKids.hasMoreElements()) {    // visit children
        SceneGraphObject obj = (SceneGraphObject) enumKids.nextElement();
        if (obj instanceof Node)
          adjustShapes((Node) obj);
      }
    }
    else if (node instanceof Shape3D)
      adjustShape3D((Shape3D) node);
    }  // end of visitNode()
    
    private void adjustShape3D(Shape3D shape)
  // change the shape's colour to blue
  {
    Appearance app = shape.getAppearance();
    Material blueMat = new Material(black, black, blue, white, 20.0f);
        // the black ambient means that unlit surfaces are pitch black
    blueMat.setLightingEnable(true);
    app.setMaterial( blueMat );
    shape.setAppearance(app);
  }  // end of makeBlue()
  
    public TransformGroup getModel() { return tg; }
  
} // end of class

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				117
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable black
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				117
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable black
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				117
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable blue
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				117
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable white
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				178599843
			</iTime>
			<fName>
				LoadModel.java
			</fName>
			<fSize>
				4038.0
			</fSize>
			<fData>
/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor with grid lines
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 2.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import ncsa.j3d.loaders.*;
import com.sun.j3d.loaders.Scene;
import java.io.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import java.util.*;

public class LoadModel {
    private Scene loadedScene = null;
    private BranchGroup loadedBG = null;
    private TransformGroup tg = null;
    
    private static final Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
  private static final Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
  private static final Color3f blue = new Color3f(0.6f,0.6f, 1.0f);
    
    LoadModel() {
        // FileWriter ofw = null;
        
        try {
            ModelLoader loader = new ModelLoader();
            loadedScene = loader.load("GUN1.3DS");
            if(loadedScene != null) {
                loadedBG = loadedScene.getSceneGroup();
            }
        }
        catch( IOException ioe )
        { System.err.println("Could not find file."); }
        
        Transform3D t3d = new Transform3D();
        t3d.rotX( -Math.PI/2.0 );    // models are often on their face; fix that
        Vector3d scaleVec = calcScaleFactor(loadedBG);   // scale the model
        t3d.setScale( scaleVec );
        adjustShapes(loadedBG);  
        
        tg = new TransformGroup(t3d);
        tg.addChild(loadedBG);
        
    }
    
    private Vector3d calcScaleFactor(BranchGroup loadedBG)
        // Scale the model based on its original bounding box size
    {
        BoundingBox boundbox = new BoundingBox( loadedBG.getBounds() );
        // System.out.println(boundbox);

        // obtain the upper and lower coordinates of the box
        Point3d lower = new Point3d();
        boundbox.getLower( lower );
        Point3d upper = new Point3d();
        boundbox.getUpper( upper );

        // store the largest X, Y, or Z dimension and calculate a scale factor
        double max = 0.0;     
        if( (upper.x - lower.x ) > max )
            max = (upper.x - lower.x );

        if( (upper.y - lower.y ) > max )
            max = (upper.y - lower.y );

        if( (upper.z - lower.z ) > max )
            max = (upper.z - lower.z );

        double scaleFactor = 10.0/max;    // 10 is half the width of the floor
        //System.out.println("max dimension: " + df.format(max) + 
        //                 "; scaleFactor: " + df.format(scaleFactor) );

        // limit the scaling so that a big model isn't scaled too much
        if( scaleFactor < 0.0005 )
            scaleFactor = 0.0005;

        return new Vector3d(scaleFactor, scaleFactor, scaleFactor);
    }   // end of calcScaleFactor()
    
    private void adjustShapes(Node node)
    /*  If the node is a Group then recursively visit its children.
     *  Otherwise if the node is a Shape3D then so the changes.
     */
    { if(node instanceof Group) {
      Group g = (Group) node;
      Enumeration enumKids = g.getAllChildren();
      while(enumKids.hasMoreElements()) {    // visit children
        SceneGraphObject obj = (SceneGraphObject) enumKids.nextElement();
        if (obj instanceof Node)
          adjustShapes((Node) obj);
      }
    }
    else if (node instanceof Shape3D)
      adjustShape3D((Shape3D) node);
    }  // end of visitNode()
    
    private void adjustShape3D(Shape3D shape)
  // change the shape's colour to blue
  {
    Appearance app = shape.getAppearance();
    Material blueMat = new Material(black, black, blue, white, 20.0f);
        // the black ambient means that unlit surfaces are pitch black
    blueMat.setLightingEnable(true);
    app.setMaterial( blueMat );
    shape.setAppearance(app);
  }  // end of makeBlue()
  
    public TransformGroup getModel() { return tg; }
  
} // end of class

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				178616562
			</iTime>
			<fName>
				MyOwn3D.java
			</fName>
			<fSize>
				8658.0
			</fSize>
			<fData>
/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor with grid lines
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 2.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.applet.Applet;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;

public class MyOwn3D extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere();   // for environment nodes
    private SimpleUniverse su;
    
    // constructor
    public MyOwn3D() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
        BranchGroup scene = createSceneGraph();
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor

    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();  // root of visual objects in scene graph
        
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);  // solid color blue for coloring sides and floor
        
        // create the sides and floor
        TransformGroup floor = makeFace("floor", blue);
        TransformGroup back = makeFace("back", blue);
        TransformGroup front = makeFace("front", blue);
        TransformGroup left = makeFace("left", blue);
        TransformGroup right = makeFace("right", blue);
        // TransformGroup ceiling = makeFace("ceiling", new Color3f(1.0f, 1.0f, 1.0f));  // white
        
        // create lines to divide surfaces into 3x3 grids
        Shape3D grid = makeGrid();
        
        // add children to root branch graph
        objRoot.addChild(floor);
        objRoot.addChild(back);
        objRoot.addChild(left);
        objRoot.addChild(right);
        objRoot.addChild(front);
        // objRoot.addChild(ceiling);
        objRoot.addChild(grid);
        
        LoadModel lm = new LoadModel();
        objRoot.addChild(lm.getModel());
        
        return objRoot;
    } // end of method

    // method to create sides and floor of a room
    private TransformGroup makeFace(String face, Color3f faceColor) {
        
        // create standard QuadArray with coordinates for basic surface
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-15f, 0f, 15f));
        qa.setCoordinate(1, new Point3f(15f, 0f, 15f));
        qa.setCoordinate(2, new Point3f(15f, 0f, -15f));
        qa.setCoordinate(3, new Point3f(-15f, 0f, -15f));
        
        // set color for created quad
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        // create ability to transform and translate surface to correct position
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        // create surface based on input paramaters
        // surfaces are off by a factor of 0.005 to allow grid lines to be more visible
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15.005f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.rotX(Math.PI);
                t3d.setTranslation(new Vector3f(0f, 15.005f, 0f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "left": t3d.rotZ(-Math.PI/2);
                t3d.setTranslation(new Vector3f(-15.005f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "right": t3d.rotZ(Math.PI/2);
                t3d.setTranslation(new Vector3f(15.005f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.rotX(-Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, 15.005f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.rotX(Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, -15.005f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
        return tg;
    } // end of makeFace method
    
    // makes lines to divide constructed area into 3x3 grid for each side
    private Shape3D makeGrid() {
        
        // set up initial coordinates for z plane grid lines
        Point3f[] gridCoords = new Point3f[47];
        gridCoords[0] = new Point3f(-15f, 15f, 15f);
        gridCoords[1] = new Point3f(-15f, -15f, 15f);
        gridCoords[2] = new Point3f(15f, -15f, 15f);
        gridCoords[3] = new Point3f(15f, 15f, 15f);
        
        // create remaining grid lines through z plane
        Point3f adjust = new Point3f(0, 0, -10);
        for (int i = 4; i < 16; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        // set up initial coordinates for x plane grid lines
        gridCoords[16] = new Point3f(gridCoords[3]);
        gridCoords[17] = new Point3f(gridCoords[2]);
        gridCoords[18] = new Point3f(gridCoords[14]);
        gridCoords[19] = new Point3f(gridCoords[15]);
        
        // create remaining grid lines through x plane
        adjust = new Point3f(-10, 0, 0);
        for (int i = 20; i < 32; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        // set up initial coordinates for y plane grid lines
        gridCoords[32] = new Point3f(gridCoords[0]);
        gridCoords[33] = new Point3f(gridCoords[3]);
        gridCoords[34] = new Point3f(gridCoords[15]);
        gridCoords[35] = new Point3f(gridCoords[12]);
        gridCoords[36] = new Point3f(gridCoords[0]);
        
        // create remaining grid lines through y plane
        adjust = new Point3f(0, -10, 0);
        for (int i = 37; i < 47; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 5]);
            gridCoords[i].add(adjust);
        }
        
        // create array for vertex counts in LineStripArray
        int[] lineCounts = new int[11];
        for (int i = 0; i < lineCounts.length; i++) {
            if (i < 8) {lineCounts[i] = 4;}
            else {lineCounts[i] = 5;}
        }
        
        // create LineStripArray object to create lines
        LineStripArray grid = new LineStripArray(47, LineStripArray.COORDINATES, lineCounts);
        for (int i = 0; i < gridCoords.length; i++) {
            grid.setCoordinate(i, gridCoords[i]);
        }
        
        return new Shape3D(grid);
    } // end of makeGrid method
    
    private void orbitControls(Canvas3D c)
    /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
    {
        OrbitBehavior orbit = 
            new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
        orbit.setSchedulingBounds(bounds);

        ViewingPlatform vp = su.getViewingPlatform();
        vp.setViewPlatformBehavior(orbit);      
    } // end of orbitControls()

    private void initUserPosition()
    // Set the user's initial viewpoint using lookAt()
    {
        ViewingPlatform vp = su.getViewingPlatform();
        TransformGroup steerTG = vp.getViewPlatformTransform();

        Transform3D t3d = new Transform3D();
        steerTG.getTransform(t3d);

        // args are: viewer posn, where looking, up direction
        t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
        t3d.invert();

        steerTG.setTransform(t3d);
    } // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3D(), 256, 256);
    } // end of main
} // end of class

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				178717390
			</iTime>
			<fName>
				MyOwn3D.java
			</fName>
			<fSize>
				8658.0
			</fSize>
			<fData>
/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor with grid lines
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 2.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.applet.Applet;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;

public class MyOwn3D extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere();   // for environment nodes
    private SimpleUniverse su;
    
    // constructor
    public MyOwn3D() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
        BranchGroup scene = createSceneGraph();
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor

    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();  // root of visual objects in scene graph
        
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);  // solid color blue for coloring sides and floor
        
        // create the sides and floor
        TransformGroup floor = makeFace("floor", blue);
        TransformGroup back = makeFace("back", blue);
        TransformGroup front = makeFace("front", blue);
        TransformGroup left = makeFace("left", blue);
        TransformGroup right = makeFace("right", blue);
        // TransformGroup ceiling = makeFace("ceiling", new Color3f(1.0f, 1.0f, 1.0f));  // white
        
        // create lines to divide surfaces into 3x3 grids
        Shape3D grid = makeGrid();
        
        // add children to root branch graph
        objRoot.addChild(floor);
        objRoot.addChild(back);
        objRoot.addChild(left);
        objRoot.addChild(right);
        objRoot.addChild(front);
        // objRoot.addChild(ceiling);
        objRoot.addChild(grid);
        
        LoadModel lm = new LoadModel();
        objRoot.addChild(lm.getModel());
        
        return objRoot;
    } // end of method

    // method to create sides and floor of a room
    private TransformGroup makeFace(String face, Color3f faceColor) {
        
        // create standard QuadArray with coordinates for basic surface
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-15f, 0f, 15f));
        qa.setCoordinate(1, new Point3f(15f, 0f, 15f));
        qa.setCoordinate(2, new Point3f(15f, 0f, -15f));
        qa.setCoordinate(3, new Point3f(-15f, 0f, -15f));
        
        // set color for created quad
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        // create ability to transform and translate surface to correct position
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        // create surface based on input paramaters
        // surfaces are off by a factor of 0.005 to allow grid lines to be more visible
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15.005f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.rotX(Math.PI);
                t3d.setTranslation(new Vector3f(0f, 15.005f, 0f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "left": t3d.rotZ(-Math.PI/2);
                t3d.setTranslation(new Vector3f(-15.005f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "right": t3d.rotZ(Math.PI/2);
                t3d.setTranslation(new Vector3f(15.005f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.rotX(-Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, 15.005f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.rotX(Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, -15.005f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
        return tg;
    } // end of makeFace method
    
    // makes lines to divide constructed area into 3x3 grid for each side
    private Shape3D makeGrid() {
        
        // set up initial coordinates for z plane grid lines
        Point3f[] gridCoords = new Point3f[47];
        gridCoords[0] = new Point3f(-15f, 15f, 15f);
        gridCoords[1] = new Point3f(-15f, -15f, 15f);
        gridCoords[2] = new Point3f(15f, -15f, 15f);
        gridCoords[3] = new Point3f(15f, 15f, 15f);
        
        // create remaining grid lines through z plane
        Point3f adjust = new Point3f(0, 0, -10);
        for (int i = 4; i < 16; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        // set up initial coordinates for x plane grid lines
        gridCoords[16] = new Point3f(gridCoords[3]);
        gridCoords[17] = new Point3f(gridCoords[2]);
        gridCoords[18] = new Point3f(gridCoords[14]);
        gridCoords[19] = new Point3f(gridCoords[15]);
        
        // create remaining grid lines through x plane
        adjust = new Point3f(-10, 0, 0);
        for (int i = 20; i < 32; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        // set up initial coordinates for y plane grid lines
        gridCoords[32] = new Point3f(gridCoords[0]);
        gridCoords[33] = new Point3f(gridCoords[3]);
        gridCoords[34] = new Point3f(gridCoords[15]);
        gridCoords[35] = new Point3f(gridCoords[12]);
        gridCoords[36] = new Point3f(gridCoords[0]);
        
        // create remaining grid lines through y plane
        adjust = new Point3f(0, -10, 0);
        for (int i = 37; i < 47; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 5]);
            gridCoords[i].add(adjust);
        }
        
        // create array for vertex counts in LineStripArray
        int[] lineCounts = new int[11];
        for (int i = 0; i < lineCounts.length; i++) {
            if (i < 8) {lineCounts[i] = 4;}
            else {lineCounts[i] = 5;}
        }
        
        // create LineStripArray object to create lines
        LineStripArray grid = new LineStripArray(47, LineStripArray.COORDINATES, lineCounts);
        for (int i = 0; i < gridCoords.length; i++) {
            grid.setCoordinate(i, gridCoords[i]);
        }
        
        return new Shape3D(grid);
    } // end of makeGrid method
    
    private void orbitControls(Canvas3D c)
    /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
    {
        OrbitBehavior orbit = 
            new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
        orbit.setSchedulingBounds(bounds);

        ViewingPlatform vp = su.getViewingPlatform();
        vp.setViewPlatformBehavior(orbit);      
    } // end of orbitControls()

    private void initUserPosition()
    // Set the user's initial viewpoint using lookAt()
    {
        ViewingPlatform vp = su.getViewingPlatform();
        TransformGroup steerTG = vp.getViewPlatformTransform();

        Transform3D t3d = new Transform3D();
        steerTG.getTransform(t3d);

        // args are: viewer posn, where looking, up direction
        t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
        t3d.invert();

        steerTG.setTransform(t3d);
    } // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3D(), 256, 256);
    } // end of main
} // end of class

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				178929296
			</iTime>
			<fName>
				LoadModel.java
			</fName>
			<fSize>
				4140.0
			</fSize>
			<fData>
/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor with grid lines
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 2.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import ncsa.j3d.loaders.*;
import com.sun.j3d.loaders.Scene;
import java.io.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import java.util.*;

public class LoadModel {
    private Scene loadedScene = null;
    private BranchGroup loadedBG = null;
    private TransformGroup tg = null;
    
    private static final Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
  private static final Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
  private static final Color3f blue = new Color3f(0.6f,0.6f, 1.0f);
    
    LoadModel() {
        // FileWriter ofw = null;
        
        try {
            ModelLoader loader = new ModelLoader();
            loadedScene = loader.load("GUN1.3DS");
            if(loadedScene != null) {
                loadedBG = loadedScene.getSceneGroup();
            }
        }
        catch( IOException ioe )
        { System.err.println("Could not find file."); }
        
        Transform3D t3d = new Transform3D();
        t3d.rotX( -Math.PI/2.0 );    // models are often on their face; fix that
        Vector3d scaleVec = calcScaleFactor(loadedBG);   // scale the model
        t3d.setScale( scaleVec );
        adjustShapes(loadedBG);  
        
        tg = new TransformGroup(t3d);
        tg.addChild(loadedBG);
        
    }
    
    private Vector3d calcScaleFactor(BranchGroup loadedBG)
        // Scale the model based on its original bounding box size
    {
        BoundingBox boundbox = new BoundingBox( loadedBG.getBounds() );
        // System.out.println(boundbox);

        // obtain the upper and lower coordinates of the box
        Point3d lower = new Point3d();
        boundbox.getLower( lower );
        Point3d upper = new Point3d();
        boundbox.getUpper( upper );

        // store the largest X, Y, or Z dimension and calculate a scale factor
        double max = 0.0;     
        if( (upper.x - lower.x ) > max )
            max = (upper.x - lower.x );

        if( (upper.y - lower.y ) > max )
            max = (upper.y - lower.y );

        if( (upper.z - lower.z ) > max )
            max = (upper.z - lower.z );

        double scaleFactor = 10.0/max;    // 10 is half the width of the floor
        //System.out.println("max dimension: " + df.format(max) + 
        //                 "; scaleFactor: " + df.format(scaleFactor) );

        // limit the scaling so that a big model isn't scaled too much
        if( scaleFactor < 0.0005 )
            scaleFactor = 0.0005;

        return new Vector3d(scaleFactor, scaleFactor, scaleFactor);
    }   // end of calcScaleFactor()
    
    private void adjustShapes(Node node)
    /*  If the node is a Group then recursively visit its children.
     *  Otherwise if the node is a Shape3D then so the changes.
     */
    { if(node instanceof Group) {
      Group g = (Group) node;
      Enumeration enumKids = g.getAllChildren();
      while(enumKids.hasMoreElements()) {    // visit children
        SceneGraphObject obj = (SceneGraphObject) enumKids.nextElement();
        if (obj instanceof Node)
          adjustShapes((Node) obj);
      }
    }
    else if (node instanceof Shape3D)
      adjustShape3D((Shape3D) node);
    }  // end of visitNode()
    
    private void adjustShape3D(Shape3D shape)
  // change the shape's colour to blue
  {
    Appearance app = shape.getAppearance();
    //Material blueMat = new Material(black, black, blue, white, 20.0f);
        // the black ambient means that unlit surfaces are pitch black
    //blueMat.setLightingEnable(true);
    //app.setMaterial( blueMat );
    ColoringAttributes ca = new ColoringAttributes(blue, 1);
    app.setColoringAttributes(ca);
    shape.setAppearance(app);
  }  // end of makeBlue()
  
    public TransformGroup getModel() { return tg; }
  
} // end of class

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				178939515
			</iTime>
			<fName>
				MyOwn3D.java
			</fName>
			<fSize>
				8658.0
			</fSize>
			<fData>
/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor with grid lines
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 2.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.applet.Applet;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;

public class MyOwn3D extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere();   // for environment nodes
    private SimpleUniverse su;
    
    // constructor
    public MyOwn3D() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
        BranchGroup scene = createSceneGraph();
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor

    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();  // root of visual objects in scene graph
        
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);  // solid color blue for coloring sides and floor
        
        // create the sides and floor
        TransformGroup floor = makeFace("floor", blue);
        TransformGroup back = makeFace("back", blue);
        TransformGroup front = makeFace("front", blue);
        TransformGroup left = makeFace("left", blue);
        TransformGroup right = makeFace("right", blue);
        // TransformGroup ceiling = makeFace("ceiling", new Color3f(1.0f, 1.0f, 1.0f));  // white
        
        // create lines to divide surfaces into 3x3 grids
        Shape3D grid = makeGrid();
        
        // add children to root branch graph
        objRoot.addChild(floor);
        objRoot.addChild(back);
        objRoot.addChild(left);
        objRoot.addChild(right);
        objRoot.addChild(front);
        // objRoot.addChild(ceiling);
        objRoot.addChild(grid);
        
        LoadModel lm = new LoadModel();
        objRoot.addChild(lm.getModel());
        
        return objRoot;
    } // end of method

    // method to create sides and floor of a room
    private TransformGroup makeFace(String face, Color3f faceColor) {
        
        // create standard QuadArray with coordinates for basic surface
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-15f, 0f, 15f));
        qa.setCoordinate(1, new Point3f(15f, 0f, 15f));
        qa.setCoordinate(2, new Point3f(15f, 0f, -15f));
        qa.setCoordinate(3, new Point3f(-15f, 0f, -15f));
        
        // set color for created quad
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        // create ability to transform and translate surface to correct position
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        // create surface based on input paramaters
        // surfaces are off by a factor of 0.005 to allow grid lines to be more visible
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15.005f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.rotX(Math.PI);
                t3d.setTranslation(new Vector3f(0f, 15.005f, 0f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "left": t3d.rotZ(-Math.PI/2);
                t3d.setTranslation(new Vector3f(-15.005f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "right": t3d.rotZ(Math.PI/2);
                t3d.setTranslation(new Vector3f(15.005f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.rotX(-Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, 15.005f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.rotX(Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, -15.005f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
        return tg;
    } // end of makeFace method
    
    // makes lines to divide constructed area into 3x3 grid for each side
    private Shape3D makeGrid() {
        
        // set up initial coordinates for z plane grid lines
        Point3f[] gridCoords = new Point3f[47];
        gridCoords[0] = new Point3f(-15f, 15f, 15f);
        gridCoords[1] = new Point3f(-15f, -15f, 15f);
        gridCoords[2] = new Point3f(15f, -15f, 15f);
        gridCoords[3] = new Point3f(15f, 15f, 15f);
        
        // create remaining grid lines through z plane
        Point3f adjust = new Point3f(0, 0, -10);
        for (int i = 4; i < 16; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        // set up initial coordinates for x plane grid lines
        gridCoords[16] = new Point3f(gridCoords[3]);
        gridCoords[17] = new Point3f(gridCoords[2]);
        gridCoords[18] = new Point3f(gridCoords[14]);
        gridCoords[19] = new Point3f(gridCoords[15]);
        
        // create remaining grid lines through x plane
        adjust = new Point3f(-10, 0, 0);
        for (int i = 20; i < 32; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        // set up initial coordinates for y plane grid lines
        gridCoords[32] = new Point3f(gridCoords[0]);
        gridCoords[33] = new Point3f(gridCoords[3]);
        gridCoords[34] = new Point3f(gridCoords[15]);
        gridCoords[35] = new Point3f(gridCoords[12]);
        gridCoords[36] = new Point3f(gridCoords[0]);
        
        // create remaining grid lines through y plane
        adjust = new Point3f(0, -10, 0);
        for (int i = 37; i < 47; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 5]);
            gridCoords[i].add(adjust);
        }
        
        // create array for vertex counts in LineStripArray
        int[] lineCounts = new int[11];
        for (int i = 0; i < lineCounts.length; i++) {
            if (i < 8) {lineCounts[i] = 4;}
            else {lineCounts[i] = 5;}
        }
        
        // create LineStripArray object to create lines
        LineStripArray grid = new LineStripArray(47, LineStripArray.COORDINATES, lineCounts);
        for (int i = 0; i < gridCoords.length; i++) {
            grid.setCoordinate(i, gridCoords[i]);
        }
        
        return new Shape3D(grid);
    } // end of makeGrid method
    
    private void orbitControls(Canvas3D c)
    /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
    {
        OrbitBehavior orbit = 
            new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
        orbit.setSchedulingBounds(bounds);

        ViewingPlatform vp = su.getViewingPlatform();
        vp.setViewPlatformBehavior(orbit);      
    } // end of orbitControls()

    private void initUserPosition()
    // Set the user's initial viewpoint using lookAt()
    {
        ViewingPlatform vp = su.getViewingPlatform();
        TransformGroup steerTG = vp.getViewPlatformTransform();

        Transform3D t3d = new Transform3D();
        steerTG.getTransform(t3d);

        // args are: viewer posn, where looking, up direction
        t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
        t3d.invert();

        steerTG.setTransform(t3d);
    } // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3D(), 256, 256);
    } // end of main
} // end of class

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				178994000
			</iTime>
			<fName>
				LoadModel.java
			</fName>
			<fSize>
				4193.0
			</fSize>
			<fData>
/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor with grid lines
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 2.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import ncsa.j3d.loaders.*;
import com.sun.j3d.loaders.Scene;
import java.io.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import java.util.*;

public class LoadModel {
    private Scene loadedScene = null;
    private BranchGroup loadedBG = null;
    private TransformGroup tg = null;
    
    private static final Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
  private static final Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
  private static final Color3f blue = new Color3f(0.6f,0.6f, 1.0f);
    
    LoadModel() {
        // FileWriter ofw = null;
        
        try {
            ModelLoader loader = new ModelLoader();
            loadedScene = loader.load("GUN1.3DS");
            if(loadedScene != null) {
                loadedBG = loadedScene.getSceneGroup();
            }
        }
        catch( IOException ioe )
        { System.err.println("Could not find file."); }
        
        Transform3D t3d = new Transform3D();
        t3d.rotX( -Math.PI/2.0 );    // models are often on their face; fix that
        Vector3d scaleVec = calcScaleFactor(loadedBG);   // scale the model
        t3d.setScale( scaleVec );
        adjustShapes(loadedBG);  
        
        tg = new TransformGroup(t3d);
        tg.addChild(loadedBG);
        
    }
    
    private Vector3d calcScaleFactor(BranchGroup loadedBG)
        // Scale the model based on its original bounding box size
    {
        BoundingBox boundbox = new BoundingBox( loadedBG.getBounds() );
        // System.out.println(boundbox);

        // obtain the upper and lower coordinates of the box
        Point3d lower = new Point3d();
        boundbox.getLower( lower );
        Point3d upper = new Point3d();
        boundbox.getUpper( upper );

        // store the largest X, Y, or Z dimension and calculate a scale factor
        double max = 0.0;     
        if( (upper.x - lower.x ) > max )
            max = (upper.x - lower.x );

        if( (upper.y - lower.y ) > max )
            max = (upper.y - lower.y );

        if( (upper.z - lower.z ) > max )
            max = (upper.z - lower.z );

        double scaleFactor = 10.0/max;    // 10 is half the width of the floor
        //System.out.println("max dimension: " + df.format(max) + 
        //                 "; scaleFactor: " + df.format(scaleFactor) );

        // limit the scaling so that a big model isn't scaled too much
        if( scaleFactor < 0.0005 )
            scaleFactor = 0.0005;

        return new Vector3d(scaleFactor, scaleFactor, scaleFactor);
    }   // end of calcScaleFactor()
    
    private void adjustShapes(Node node)
    /*  If the node is a Group then recursively visit its children.
     *  Otherwise if the node is a Shape3D then so the changes.
     */
    { if(node instanceof Group) {
      Group g = (Group) node;
      Enumeration enumKids = g.getAllChildren();
      while(enumKids.hasMoreElements()) {    // visit children
        SceneGraphObject obj = (SceneGraphObject) enumKids.nextElement();
        if (obj instanceof Node)
          adjustShapes((Node) obj);
      }
    }
    else if (node instanceof Shape3D)
      adjustShape3D((Shape3D) node);
    }  // end of visitNode()
    
    private void adjustShape3D(Shape3D shape)
  // change the shape's colour to blue
  {
      System.out.println("adjusting shape to blue");
    Appearance app = shape.getAppearance();
    //Material blueMat = new Material(black, black, blue, white, 20.0f);
        // the black ambient means that unlit surfaces are pitch black
    //blueMat.setLightingEnable(true);
    //app.setMaterial( blueMat );
    ColoringAttributes ca = new ColoringAttributes(blue, 1);
    app.setColoringAttributes(ca);
    shape.setAppearance(app);
  }  // end of makeBlue()
  
    public TransformGroup getModel() { return tg; }
  
} // end of class

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				178997968
			</iTime>
			<fName>
				MyOwn3D.java
			</fName>
			<fSize>
				8658.0
			</fSize>
			<fData>
/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor with grid lines
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 2.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.applet.Applet;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;

public class MyOwn3D extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere();   // for environment nodes
    private SimpleUniverse su;
    
    // constructor
    public MyOwn3D() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
        BranchGroup scene = createSceneGraph();
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor

    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();  // root of visual objects in scene graph
        
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);  // solid color blue for coloring sides and floor
        
        // create the sides and floor
        TransformGroup floor = makeFace("floor", blue);
        TransformGroup back = makeFace("back", blue);
        TransformGroup front = makeFace("front", blue);
        TransformGroup left = makeFace("left", blue);
        TransformGroup right = makeFace("right", blue);
        // TransformGroup ceiling = makeFace("ceiling", new Color3f(1.0f, 1.0f, 1.0f));  // white
        
        // create lines to divide surfaces into 3x3 grids
        Shape3D grid = makeGrid();
        
        // add children to root branch graph
        objRoot.addChild(floor);
        objRoot.addChild(back);
        objRoot.addChild(left);
        objRoot.addChild(right);
        objRoot.addChild(front);
        // objRoot.addChild(ceiling);
        objRoot.addChild(grid);
        
        LoadModel lm = new LoadModel();
        objRoot.addChild(lm.getModel());
        
        return objRoot;
    } // end of method

    // method to create sides and floor of a room
    private TransformGroup makeFace(String face, Color3f faceColor) {
        
        // create standard QuadArray with coordinates for basic surface
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-15f, 0f, 15f));
        qa.setCoordinate(1, new Point3f(15f, 0f, 15f));
        qa.setCoordinate(2, new Point3f(15f, 0f, -15f));
        qa.setCoordinate(3, new Point3f(-15f, 0f, -15f));
        
        // set color for created quad
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        // create ability to transform and translate surface to correct position
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        // create surface based on input paramaters
        // surfaces are off by a factor of 0.005 to allow grid lines to be more visible
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15.005f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.rotX(Math.PI);
                t3d.setTranslation(new Vector3f(0f, 15.005f, 0f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "left": t3d.rotZ(-Math.PI/2);
                t3d.setTranslation(new Vector3f(-15.005f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "right": t3d.rotZ(Math.PI/2);
                t3d.setTranslation(new Vector3f(15.005f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.rotX(-Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, 15.005f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.rotX(Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, -15.005f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
        return tg;
    } // end of makeFace method
    
    // makes lines to divide constructed area into 3x3 grid for each side
    private Shape3D makeGrid() {
        
        // set up initial coordinates for z plane grid lines
        Point3f[] gridCoords = new Point3f[47];
        gridCoords[0] = new Point3f(-15f, 15f, 15f);
        gridCoords[1] = new Point3f(-15f, -15f, 15f);
        gridCoords[2] = new Point3f(15f, -15f, 15f);
        gridCoords[3] = new Point3f(15f, 15f, 15f);
        
        // create remaining grid lines through z plane
        Point3f adjust = new Point3f(0, 0, -10);
        for (int i = 4; i < 16; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        // set up initial coordinates for x plane grid lines
        gridCoords[16] = new Point3f(gridCoords[3]);
        gridCoords[17] = new Point3f(gridCoords[2]);
        gridCoords[18] = new Point3f(gridCoords[14]);
        gridCoords[19] = new Point3f(gridCoords[15]);
        
        // create remaining grid lines through x plane
        adjust = new Point3f(-10, 0, 0);
        for (int i = 20; i < 32; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        // set up initial coordinates for y plane grid lines
        gridCoords[32] = new Point3f(gridCoords[0]);
        gridCoords[33] = new Point3f(gridCoords[3]);
        gridCoords[34] = new Point3f(gridCoords[15]);
        gridCoords[35] = new Point3f(gridCoords[12]);
        gridCoords[36] = new Point3f(gridCoords[0]);
        
        // create remaining grid lines through y plane
        adjust = new Point3f(0, -10, 0);
        for (int i = 37; i < 47; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 5]);
            gridCoords[i].add(adjust);
        }
        
        // create array for vertex counts in LineStripArray
        int[] lineCounts = new int[11];
        for (int i = 0; i < lineCounts.length; i++) {
            if (i < 8) {lineCounts[i] = 4;}
            else {lineCounts[i] = 5;}
        }
        
        // create LineStripArray object to create lines
        LineStripArray grid = new LineStripArray(47, LineStripArray.COORDINATES, lineCounts);
        for (int i = 0; i < gridCoords.length; i++) {
            grid.setCoordinate(i, gridCoords[i]);
        }
        
        return new Shape3D(grid);
    } // end of makeGrid method
    
    private void orbitControls(Canvas3D c)
    /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
    {
        OrbitBehavior orbit = 
            new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
        orbit.setSchedulingBounds(bounds);

        ViewingPlatform vp = su.getViewingPlatform();
        vp.setViewPlatformBehavior(orbit);      
    } // end of orbitControls()

    private void initUserPosition()
    // Set the user's initial viewpoint using lookAt()
    {
        ViewingPlatform vp = su.getViewingPlatform();
        TransformGroup steerTG = vp.getViewPlatformTransform();

        Transform3D t3d = new Transform3D();
        steerTG.getTransform(t3d);

        // args are: viewer posn, where looking, up direction
        t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
        t3d.invert();

        steerTG.setTransform(t3d);
    } // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3D(), 256, 256);
    } // end of main
} // end of class

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				179327562
			</iTime>
			<fName>
				LoadModel.java
			</fName>
			<fSize>
				4281.0
			</fSize>
			<fData>
/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor with grid lines
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 2.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import ncsa.j3d.loaders.*;
import com.sun.j3d.loaders.Scene;
import java.io.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import java.util.*;

public class LoadModel {
    private Scene loadedScene = null;
    private BranchGroup loadedBG = null;
    private TransformGroup tg = null;
    
    private static final Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
  private static final Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
  private static final Color3f blue = new Color3f(0.6f,0.6f, 1.0f);
    
    LoadModel() {
        // FileWriter ofw = null;
        
        try {
            ModelLoader loader = new ModelLoader();
            loadedScene = loader.load("GUN1.3DS");
            if(loadedScene != null) {
                loadedBG = loadedScene.getSceneGroup();
            }
        }
        catch( IOException ioe )
        { System.err.println("Could not find file."); }
        
        Transform3D t3d = new Transform3D();
        t3d.rotX( -Math.PI/2.0 );    // models are often on their face; fix that
        Vector3d scaleVec = calcScaleFactor(loadedBG);   // scale the model
        t3d.setScale( scaleVec );
        adjustShapes(loadedBG);  
        
        tg = new TransformGroup(t3d);
        tg.addChild(loadedBG);
        
    }
    
    private Vector3d calcScaleFactor(BranchGroup loadedBG)
        // Scale the model based on its original bounding box size
    {
        BoundingBox boundbox = new BoundingBox( loadedBG.getBounds() );
        // System.out.println(boundbox);

        // obtain the upper and lower coordinates of the box
        Point3d lower = new Point3d();
        boundbox.getLower( lower );
        Point3d upper = new Point3d();
        boundbox.getUpper( upper );

        // store the largest X, Y, or Z dimension and calculate a scale factor
        double max = 0.0;     
        if( (upper.x - lower.x ) > max )
            max = (upper.x - lower.x );

        if( (upper.y - lower.y ) > max )
            max = (upper.y - lower.y );

        if( (upper.z - lower.z ) > max )
            max = (upper.z - lower.z );

        double scaleFactor = 10.0/max;    // 10 is half the width of the floor
        //System.out.println("max dimension: " + df.format(max) + 
        //                 "; scaleFactor: " + df.format(scaleFactor) );

        // limit the scaling so that a big model isn't scaled too much
        if( scaleFactor < 0.0005 )
            scaleFactor = 0.0005;

        return new Vector3d(scaleFactor, scaleFactor, scaleFactor);
    }   // end of calcScaleFactor()
    
    private void adjustShapes(Node node)
    /*  If the node is a Group then recursively visit its children.
     *  Otherwise if the node is a Shape3D then so the changes.
     */
    { 
        int i = 1;
        if(node instanceof Group) {
      Group g = (Group) node;
      Enumeration enumKids = g.getAllChildren();
      while(enumKids.hasMoreElements()) {    // visit children
        SceneGraphObject obj = (SceneGraphObject) enumKids.nextElement();
        if (obj instanceof Node)
          adjustShapes((Node) obj);
      }
    }
    else if (node instanceof Shape3D)
    System.out.println("Adjusting shape #" + i);
      adjustShape3D((Shape3D) node);
      i++;
    }  // end of visitNode()
    
    private void adjustShape3D(Shape3D shape)
  // change the shape's colour to blue
  {
      System.out.println("adjusting shape to blue");
    Appearance app = shape.getAppearance();
    //Material blueMat = new Material(black, black, blue, white, 20.0f);
        // the black ambient means that unlit surfaces are pitch black
    //blueMat.setLightingEnable(true);
    //app.setMaterial( blueMat );
    ColoringAttributes ca = new ColoringAttributes(blue, 1);
    app.setColoringAttributes(ca);
    shape.setAppearance(app);
  }  // end of makeBlue()
  
    public TransformGroup getModel() { return tg; }
  
} // end of class

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				179334171
			</iTime>
			<fName>
				MyOwn3D.java
			</fName>
			<fSize>
				8658.0
			</fSize>
			<fData>
/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor with grid lines
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 2.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.applet.Applet;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;

public class MyOwn3D extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere();   // for environment nodes
    private SimpleUniverse su;
    
    // constructor
    public MyOwn3D() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
        BranchGroup scene = createSceneGraph();
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor

    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();  // root of visual objects in scene graph
        
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);  // solid color blue for coloring sides and floor
        
        // create the sides and floor
        TransformGroup floor = makeFace("floor", blue);
        TransformGroup back = makeFace("back", blue);
        TransformGroup front = makeFace("front", blue);
        TransformGroup left = makeFace("left", blue);
        TransformGroup right = makeFace("right", blue);
        // TransformGroup ceiling = makeFace("ceiling", new Color3f(1.0f, 1.0f, 1.0f));  // white
        
        // create lines to divide surfaces into 3x3 grids
        Shape3D grid = makeGrid();
        
        // add children to root branch graph
        objRoot.addChild(floor);
        objRoot.addChild(back);
        objRoot.addChild(left);
        objRoot.addChild(right);
        objRoot.addChild(front);
        // objRoot.addChild(ceiling);
        objRoot.addChild(grid);
        
        LoadModel lm = new LoadModel();
        objRoot.addChild(lm.getModel());
        
        return objRoot;
    } // end of method

    // method to create sides and floor of a room
    private TransformGroup makeFace(String face, Color3f faceColor) {
        
        // create standard QuadArray with coordinates for basic surface
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-15f, 0f, 15f));
        qa.setCoordinate(1, new Point3f(15f, 0f, 15f));
        qa.setCoordinate(2, new Point3f(15f, 0f, -15f));
        qa.setCoordinate(3, new Point3f(-15f, 0f, -15f));
        
        // set color for created quad
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        // create ability to transform and translate surface to correct position
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        // create surface based on input paramaters
        // surfaces are off by a factor of 0.005 to allow grid lines to be more visible
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15.005f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.rotX(Math.PI);
                t3d.setTranslation(new Vector3f(0f, 15.005f, 0f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "left": t3d.rotZ(-Math.PI/2);
                t3d.setTranslation(new Vector3f(-15.005f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "right": t3d.rotZ(Math.PI/2);
                t3d.setTranslation(new Vector3f(15.005f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.rotX(-Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, 15.005f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.rotX(Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, -15.005f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
        return tg;
    } // end of makeFace method
    
    // makes lines to divide constructed area into 3x3 grid for each side
    private Shape3D makeGrid() {
        
        // set up initial coordinates for z plane grid lines
        Point3f[] gridCoords = new Point3f[47];
        gridCoords[0] = new Point3f(-15f, 15f, 15f);
        gridCoords[1] = new Point3f(-15f, -15f, 15f);
        gridCoords[2] = new Point3f(15f, -15f, 15f);
        gridCoords[3] = new Point3f(15f, 15f, 15f);
        
        // create remaining grid lines through z plane
        Point3f adjust = new Point3f(0, 0, -10);
        for (int i = 4; i < 16; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        // set up initial coordinates for x plane grid lines
        gridCoords[16] = new Point3f(gridCoords[3]);
        gridCoords[17] = new Point3f(gridCoords[2]);
        gridCoords[18] = new Point3f(gridCoords[14]);
        gridCoords[19] = new Point3f(gridCoords[15]);
        
        // create remaining grid lines through x plane
        adjust = new Point3f(-10, 0, 0);
        for (int i = 20; i < 32; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        // set up initial coordinates for y plane grid lines
        gridCoords[32] = new Point3f(gridCoords[0]);
        gridCoords[33] = new Point3f(gridCoords[3]);
        gridCoords[34] = new Point3f(gridCoords[15]);
        gridCoords[35] = new Point3f(gridCoords[12]);
        gridCoords[36] = new Point3f(gridCoords[0]);
        
        // create remaining grid lines through y plane
        adjust = new Point3f(0, -10, 0);
        for (int i = 37; i < 47; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 5]);
            gridCoords[i].add(adjust);
        }
        
        // create array for vertex counts in LineStripArray
        int[] lineCounts = new int[11];
        for (int i = 0; i < lineCounts.length; i++) {
            if (i < 8) {lineCounts[i] = 4;}
            else {lineCounts[i] = 5;}
        }
        
        // create LineStripArray object to create lines
        LineStripArray grid = new LineStripArray(47, LineStripArray.COORDINATES, lineCounts);
        for (int i = 0; i < gridCoords.length; i++) {
            grid.setCoordinate(i, gridCoords[i]);
        }
        
        return new Shape3D(grid);
    } // end of makeGrid method
    
    private void orbitControls(Canvas3D c)
    /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
    {
        OrbitBehavior orbit = 
            new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
        orbit.setSchedulingBounds(bounds);

        ViewingPlatform vp = su.getViewingPlatform();
        vp.setViewPlatformBehavior(orbit);      
    } // end of orbitControls()

    private void initUserPosition()
    // Set the user's initial viewpoint using lookAt()
    {
        ViewingPlatform vp = su.getViewingPlatform();
        TransformGroup steerTG = vp.getViewPlatformTransform();

        Transform3D t3d = new Transform3D();
        steerTG.getTransform(t3d);

        // args are: viewer posn, where looking, up direction
        t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
        t3d.invert();

        steerTG.setTransform(t3d);
    } // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3D(), 256, 256);
    } // end of main
} // end of class

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				179429359
			</iTime>
			<fName>
				LoadModel.java
			</fName>
			<fSize>
				4285.0
			</fSize>
			<fData>
/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor with grid lines
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 2.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import ncsa.j3d.loaders.*;
import com.sun.j3d.loaders.Scene;
import java.io.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import java.util.*;

public class LoadModel {
    private Scene loadedScene = null;
    private BranchGroup loadedBG = null;
    private TransformGroup tg = null;
    
    private static final Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
  private static final Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
  private static final Color3f blue = new Color3f(0.6f,0.6f, 1.0f);
    
    LoadModel() {
        // FileWriter ofw = null;
        
        try {
            ModelLoader loader = new ModelLoader();
            loadedScene = loader.load("GUN1.3DS");
            if(loadedScene != null) {
                loadedBG = loadedScene.getSceneGroup();
            }
        }
        catch( IOException ioe )
        { System.err.println("Could not find file."); }
        
        Transform3D t3d = new Transform3D();
        t3d.rotX( -Math.PI/2.0 );    // models are often on their face; fix that
        Vector3d scaleVec = calcScaleFactor(loadedBG);   // scale the model
        t3d.setScale( scaleVec );
        adjustShapes(loadedBG);  
        
        tg = new TransformGroup(t3d);
        tg.addChild(loadedBG);
        
    }
    
    private Vector3d calcScaleFactor(BranchGroup loadedBG)
        // Scale the model based on its original bounding box size
    {
        BoundingBox boundbox = new BoundingBox( loadedBG.getBounds() );
        // System.out.println(boundbox);

        // obtain the upper and lower coordinates of the box
        Point3d lower = new Point3d();
        boundbox.getLower( lower );
        Point3d upper = new Point3d();
        boundbox.getUpper( upper );

        // store the largest X, Y, or Z dimension and calculate a scale factor
        double max = 0.0;     
        if( (upper.x - lower.x ) > max )
            max = (upper.x - lower.x );

        if( (upper.y - lower.y ) > max )
            max = (upper.y - lower.y );

        if( (upper.z - lower.z ) > max )
            max = (upper.z - lower.z );

        double scaleFactor = 10.0/max;    // 10 is half the width of the floor
        //System.out.println("max dimension: " + df.format(max) + 
        //                 "; scaleFactor: " + df.format(scaleFactor) );

        // limit the scaling so that a big model isn't scaled too much
        if( scaleFactor < 0.0005 )
            scaleFactor = 0.0005;

        return new Vector3d(scaleFactor, scaleFactor, scaleFactor);
    }   // end of calcScaleFactor()
    
    private void adjustShapes(Node node)
    /*  If the node is a Group then recursively visit its children.
     *  Otherwise if the node is a Shape3D then so the changes.
     */
    { 
        int i = 1;
    if(node instanceof Group) {
      Group g = (Group) node;
      Enumeration enumKids = g.getAllChildren();
      while(enumKids.hasMoreElements()) {    // visit children
        SceneGraphObject obj = (SceneGraphObject) enumKids.nextElement();
        if (obj instanceof Node)
          adjustShapes((Node) obj);
      }
    }
    else if (node instanceof Shape3D) {
    System.out.println("Adjusting shape #" + i);
      adjustShape3D((Shape3D) node);
      i++;
    }
    }  // end of visitNode()
    
    private void adjustShape3D(Shape3D shape)
  // change the shape's colour to blue
  {
      System.out.println("adjusting shape to blue");
    Appearance app = shape.getAppearance();
    //Material blueMat = new Material(black, black, blue, white, 20.0f);
        // the black ambient means that unlit surfaces are pitch black
    //blueMat.setLightingEnable(true);
    //app.setMaterial( blueMat );
    ColoringAttributes ca = new ColoringAttributes(blue, 1);
    app.setColoringAttributes(ca);
    shape.setAppearance(app);
  }  // end of makeBlue()
  
    public TransformGroup getModel() { return tg; }
  
} // end of class

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				179434703
			</iTime>
			<fName>
				MyOwn3D.java
			</fName>
			<fSize>
				8658.0
			</fSize>
			<fData>
/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor with grid lines
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 2.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.applet.Applet;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;

public class MyOwn3D extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere();   // for environment nodes
    private SimpleUniverse su;
    
    // constructor
    public MyOwn3D() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
        BranchGroup scene = createSceneGraph();
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor

    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();  // root of visual objects in scene graph
        
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);  // solid color blue for coloring sides and floor
        
        // create the sides and floor
        TransformGroup floor = makeFace("floor", blue);
        TransformGroup back = makeFace("back", blue);
        TransformGroup front = makeFace("front", blue);
        TransformGroup left = makeFace("left", blue);
        TransformGroup right = makeFace("right", blue);
        // TransformGroup ceiling = makeFace("ceiling", new Color3f(1.0f, 1.0f, 1.0f));  // white
        
        // create lines to divide surfaces into 3x3 grids
        Shape3D grid = makeGrid();
        
        // add children to root branch graph
        objRoot.addChild(floor);
        objRoot.addChild(back);
        objRoot.addChild(left);
        objRoot.addChild(right);
        objRoot.addChild(front);
        // objRoot.addChild(ceiling);
        objRoot.addChild(grid);
        
        LoadModel lm = new LoadModel();
        objRoot.addChild(lm.getModel());
        
        return objRoot;
    } // end of method

    // method to create sides and floor of a room
    private TransformGroup makeFace(String face, Color3f faceColor) {
        
        // create standard QuadArray with coordinates for basic surface
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-15f, 0f, 15f));
        qa.setCoordinate(1, new Point3f(15f, 0f, 15f));
        qa.setCoordinate(2, new Point3f(15f, 0f, -15f));
        qa.setCoordinate(3, new Point3f(-15f, 0f, -15f));
        
        // set color for created quad
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        // create ability to transform and translate surface to correct position
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        // create surface based on input paramaters
        // surfaces are off by a factor of 0.005 to allow grid lines to be more visible
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15.005f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.rotX(Math.PI);
                t3d.setTranslation(new Vector3f(0f, 15.005f, 0f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "left": t3d.rotZ(-Math.PI/2);
                t3d.setTranslation(new Vector3f(-15.005f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "right": t3d.rotZ(Math.PI/2);
                t3d.setTranslation(new Vector3f(15.005f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.rotX(-Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, 15.005f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.rotX(Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, -15.005f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
        return tg;
    } // end of makeFace method
    
    // makes lines to divide constructed area into 3x3 grid for each side
    private Shape3D makeGrid() {
        
        // set up initial coordinates for z plane grid lines
        Point3f[] gridCoords = new Point3f[47];
        gridCoords[0] = new Point3f(-15f, 15f, 15f);
        gridCoords[1] = new Point3f(-15f, -15f, 15f);
        gridCoords[2] = new Point3f(15f, -15f, 15f);
        gridCoords[3] = new Point3f(15f, 15f, 15f);
        
        // create remaining grid lines through z plane
        Point3f adjust = new Point3f(0, 0, -10);
        for (int i = 4; i < 16; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        // set up initial coordinates for x plane grid lines
        gridCoords[16] = new Point3f(gridCoords[3]);
        gridCoords[17] = new Point3f(gridCoords[2]);
        gridCoords[18] = new Point3f(gridCoords[14]);
        gridCoords[19] = new Point3f(gridCoords[15]);
        
        // create remaining grid lines through x plane
        adjust = new Point3f(-10, 0, 0);
        for (int i = 20; i < 32; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        // set up initial coordinates for y plane grid lines
        gridCoords[32] = new Point3f(gridCoords[0]);
        gridCoords[33] = new Point3f(gridCoords[3]);
        gridCoords[34] = new Point3f(gridCoords[15]);
        gridCoords[35] = new Point3f(gridCoords[12]);
        gridCoords[36] = new Point3f(gridCoords[0]);
        
        // create remaining grid lines through y plane
        adjust = new Point3f(0, -10, 0);
        for (int i = 37; i < 47; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 5]);
            gridCoords[i].add(adjust);
        }
        
        // create array for vertex counts in LineStripArray
        int[] lineCounts = new int[11];
        for (int i = 0; i < lineCounts.length; i++) {
            if (i < 8) {lineCounts[i] = 4;}
            else {lineCounts[i] = 5;}
        }
        
        // create LineStripArray object to create lines
        LineStripArray grid = new LineStripArray(47, LineStripArray.COORDINATES, lineCounts);
        for (int i = 0; i < gridCoords.length; i++) {
            grid.setCoordinate(i, gridCoords[i]);
        }
        
        return new Shape3D(grid);
    } // end of makeGrid method
    
    private void orbitControls(Canvas3D c)
    /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
    {
        OrbitBehavior orbit = 
            new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
        orbit.setSchedulingBounds(bounds);

        ViewingPlatform vp = su.getViewingPlatform();
        vp.setViewPlatformBehavior(orbit);      
    } // end of orbitControls()

    private void initUserPosition()
    // Set the user's initial viewpoint using lookAt()
    {
        ViewingPlatform vp = su.getViewingPlatform();
        TransformGroup steerTG = vp.getViewPlatformTransform();

        Transform3D t3d = new Transform3D();
        steerTG.getTransform(t3d);

        // args are: viewer posn, where looking, up direction
        t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
        t3d.invert();

        steerTG.setTransform(t3d);
    } // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3D(), 256, 256);
    } // end of main
} // end of class

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				255483718
			</iTime>
			<fName>
				MyOwn3D.java
			</fName>
			<fSize>
				8658.0
			</fSize>
			<fData>
/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor with grid lines
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 2.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.applet.Applet;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;

public class MyOwn3D extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere();   // for environment nodes
    private SimpleUniverse su;
    
    // constructor
    public MyOwn3D() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
        BranchGroup scene = createSceneGraph();
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor

    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();  // root of visual objects in scene graph
        
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);  // solid color blue for coloring sides and floor
        
        // create the sides and floor
        TransformGroup floor = makeFace("floor", blue);
        TransformGroup back = makeFace("back", blue);
        TransformGroup front = makeFace("front", blue);
        TransformGroup left = makeFace("left", blue);
        TransformGroup right = makeFace("right", blue);
        // TransformGroup ceiling = makeFace("ceiling", new Color3f(1.0f, 1.0f, 1.0f));  // white
        
        // create lines to divide surfaces into 3x3 grids
        Shape3D grid = makeGrid();
        
        // add children to root branch graph
        objRoot.addChild(floor);
        objRoot.addChild(back);
        objRoot.addChild(left);
        objRoot.addChild(right);
        objRoot.addChild(front);
        // objRoot.addChild(ceiling);
        objRoot.addChild(grid);
        
        LoadModel lm = new LoadModel();
        objRoot.addChild(lm.getModel());
        
        return objRoot;
    } // end of method

    // method to create sides and floor of a room
    private TransformGroup makeFace(String face, Color3f faceColor) {
        
        // create standard QuadArray with coordinates for basic surface
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-15f, 0f, 15f));
        qa.setCoordinate(1, new Point3f(15f, 0f, 15f));
        qa.setCoordinate(2, new Point3f(15f, 0f, -15f));
        qa.setCoordinate(3, new Point3f(-15f, 0f, -15f));
        
        // set color for created quad
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        // create ability to transform and translate surface to correct position
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        // create surface based on input paramaters
        // surfaces are off by a factor of 0.005 to allow grid lines to be more visible
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15.005f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.rotX(Math.PI);
                t3d.setTranslation(new Vector3f(0f, 15.005f, 0f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "left": t3d.rotZ(-Math.PI/2);
                t3d.setTranslation(new Vector3f(-15.005f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "right": t3d.rotZ(Math.PI/2);
                t3d.setTranslation(new Vector3f(15.005f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.rotX(-Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, 15.005f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.rotX(Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, -15.005f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
        return tg;
    } // end of makeFace method
    
    // makes lines to divide constructed area into 3x3 grid for each side
    private Shape3D makeGrid() {
        
        // set up initial coordinates for z plane grid lines
        Point3f[] gridCoords = new Point3f[47];
        gridCoords[0] = new Point3f(-15f, 15f, 15f);
        gridCoords[1] = new Point3f(-15f, -15f, 15f);
        gridCoords[2] = new Point3f(15f, -15f, 15f);
        gridCoords[3] = new Point3f(15f, 15f, 15f);
        
        // create remaining grid lines through z plane
        Point3f adjust = new Point3f(0, 0, -10);
        for (int i = 4; i < 16; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        // set up initial coordinates for x plane grid lines
        gridCoords[16] = new Point3f(gridCoords[3]);
        gridCoords[17] = new Point3f(gridCoords[2]);
        gridCoords[18] = new Point3f(gridCoords[14]);
        gridCoords[19] = new Point3f(gridCoords[15]);
        
        // create remaining grid lines through x plane
        adjust = new Point3f(-10, 0, 0);
        for (int i = 20; i < 32; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        // set up initial coordinates for y plane grid lines
        gridCoords[32] = new Point3f(gridCoords[0]);
        gridCoords[33] = new Point3f(gridCoords[3]);
        gridCoords[34] = new Point3f(gridCoords[15]);
        gridCoords[35] = new Point3f(gridCoords[12]);
        gridCoords[36] = new Point3f(gridCoords[0]);
        
        // create remaining grid lines through y plane
        adjust = new Point3f(0, -10, 0);
        for (int i = 37; i < 47; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 5]);
            gridCoords[i].add(adjust);
        }
        
        // create array for vertex counts in LineStripArray
        int[] lineCounts = new int[11];
        for (int i = 0; i < lineCounts.length; i++) {
            if (i < 8) {lineCounts[i] = 4;}
            else {lineCounts[i] = 5;}
        }
        
        // create LineStripArray object to create lines
        LineStripArray grid = new LineStripArray(47, LineStripArray.COORDINATES, lineCounts);
        for (int i = 0; i < gridCoords.length; i++) {
            grid.setCoordinate(i, gridCoords[i]);
        }
        
        return new Shape3D(grid);
    } // end of makeGrid method
    
    private void orbitControls(Canvas3D c)
    /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
    {
        OrbitBehavior orbit = 
            new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
        orbit.setSchedulingBounds(bounds);

        ViewingPlatform vp = su.getViewingPlatform();
        vp.setViewPlatformBehavior(orbit);      
    } // end of orbitControls()

    private void initUserPosition()
    // Set the user's initial viewpoint using lookAt()
    {
        ViewingPlatform vp = su.getViewingPlatform();
        TransformGroup steerTG = vp.getViewPlatformTransform();

        Transform3D t3d = new Transform3D();
        steerTG.getTransform(t3d);

        // args are: viewer posn, where looking, up direction
        t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
        t3d.invert();

        steerTG.setTransform(t3d);
    } // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3D(), 256, 256);
    } // end of main
} // end of class

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				256475421
			</iTime>
			<fName>
				MyOwn3D.java
			</fName>
			<fSize>
				8658.0
			</fSize>
			<fData>
/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor with grid lines
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 2.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.applet.Applet;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;

public class MyOwn3D extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere();   // for environment nodes
    private SimpleUniverse su;
    
    // constructor
    public MyOwn3D() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
        BranchGroup scene = createSceneGraph();
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor

    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();  // root of visual objects in scene graph
        
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);  // solid color blue for coloring sides and floor
        
        // create the sides and floor
        TransformGroup floor = makeFace("floor", blue);
        TransformGroup back = makeFace("back", blue);
        TransformGroup front = makeFace("front", blue);
        TransformGroup left = makeFace("left", blue);
        TransformGroup right = makeFace("right", blue);
        // TransformGroup ceiling = makeFace("ceiling", new Color3f(1.0f, 1.0f, 1.0f));  // white
        
        // create lines to divide surfaces into 3x3 grids
        Shape3D grid = makeGrid();
        
        // add children to root branch graph
        objRoot.addChild(floor);
        objRoot.addChild(back);
        objRoot.addChild(left);
        objRoot.addChild(right);
        objRoot.addChild(front);
        // objRoot.addChild(ceiling);
        objRoot.addChild(grid);
        
        LoadModel lm = new LoadModel();
        objRoot.addChild(lm.getModel());
        
        return objRoot;
    } // end of method

    // method to create sides and floor of a room
    private TransformGroup makeFace(String face, Color3f faceColor) {
        
        // create standard QuadArray with coordinates for basic surface
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-15f, 0f, 15f));
        qa.setCoordinate(1, new Point3f(15f, 0f, 15f));
        qa.setCoordinate(2, new Point3f(15f, 0f, -15f));
        qa.setCoordinate(3, new Point3f(-15f, 0f, -15f));
        
        // set color for created quad
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        // create ability to transform and translate surface to correct position
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        // create surface based on input paramaters
        // surfaces are off by a factor of 0.005 to allow grid lines to be more visible
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15.005f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.rotX(Math.PI);
                t3d.setTranslation(new Vector3f(0f, 15.005f, 0f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "left": t3d.rotZ(-Math.PI/2);
                t3d.setTranslation(new Vector3f(-15.005f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "right": t3d.rotZ(Math.PI/2);
                t3d.setTranslation(new Vector3f(15.005f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.rotX(-Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, 15.005f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.rotX(Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, -15.005f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
        return tg;
    } // end of makeFace method
    
    // makes lines to divide constructed area into 3x3 grid for each side
    private Shape3D makeGrid() {
        
        // set up initial coordinates for z plane grid lines
        Point3f[] gridCoords = new Point3f[47];
        gridCoords[0] = new Point3f(-15f, 15f, 15f);
        gridCoords[1] = new Point3f(-15f, -15f, 15f);
        gridCoords[2] = new Point3f(15f, -15f, 15f);
        gridCoords[3] = new Point3f(15f, 15f, 15f);
        
        // create remaining grid lines through z plane
        Point3f adjust = new Point3f(0, 0, -10);
        for (int i = 4; i < 16; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        // set up initial coordinates for x plane grid lines
        gridCoords[16] = new Point3f(gridCoords[3]);
        gridCoords[17] = new Point3f(gridCoords[2]);
        gridCoords[18] = new Point3f(gridCoords[14]);
        gridCoords[19] = new Point3f(gridCoords[15]);
        
        // create remaining grid lines through x plane
        adjust = new Point3f(-10, 0, 0);
        for (int i = 20; i < 32; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        // set up initial coordinates for y plane grid lines
        gridCoords[32] = new Point3f(gridCoords[0]);
        gridCoords[33] = new Point3f(gridCoords[3]);
        gridCoords[34] = new Point3f(gridCoords[15]);
        gridCoords[35] = new Point3f(gridCoords[12]);
        gridCoords[36] = new Point3f(gridCoords[0]);
        
        // create remaining grid lines through y plane
        adjust = new Point3f(0, -10, 0);
        for (int i = 37; i < 47; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 5]);
            gridCoords[i].add(adjust);
        }
        
        // create array for vertex counts in LineStripArray
        int[] lineCounts = new int[11];
        for (int i = 0; i < lineCounts.length; i++) {
            if (i < 8) {lineCounts[i] = 4;}
            else {lineCounts[i] = 5;}
        }
        
        // create LineStripArray object to create lines
        LineStripArray grid = new LineStripArray(47, LineStripArray.COORDINATES, lineCounts);
        for (int i = 0; i < gridCoords.length; i++) {
            grid.setCoordinate(i, gridCoords[i]);
        }
        
        return new Shape3D(grid);
    } // end of makeGrid method
    
    private void orbitControls(Canvas3D c)
    /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
    {
        OrbitBehavior orbit = 
            new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
        orbit.setSchedulingBounds(bounds);

        ViewingPlatform vp = su.getViewingPlatform();
        vp.setViewPlatformBehavior(orbit);      
    } // end of orbitControls()

    private void initUserPosition()
    // Set the user's initial viewpoint using lookAt()
    {
        ViewingPlatform vp = su.getViewingPlatform();
        TransformGroup steerTG = vp.getViewPlatformTransform();

        Transform3D t3d = new Transform3D();
        steerTG.getTransform(t3d);

        // args are: viewer posn, where looking, up direction
        t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
        t3d.invert();

        steerTG.setTransform(t3d);
    } // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3D(), 256, 256);
    } // end of main
} // end of class

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				258002687
			</iTime>
			<fName>
				MyOwn3D.java
			</fName>
			<fSize>
				8757.0
			</fSize>
			<fData>
/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor with grid lines
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 2.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.applet.Applet;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;

public class MyOwn3D extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere();   // for environment nodes
    private SimpleUniverse su;
    
    // constructor
    public MyOwn3D() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
        BranchGroup scene = createSceneGraph();
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor

    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();  // root of visual objects in scene graph
        
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);  // solid color blue for coloring sides and floor
        
        // create the sides and floor
        TransformGroup floor = makeFace("floor", blue);
        TransformGroup back = makeFace("back", blue);
        TransformGroup front = makeFace("front", blue);
        TransformGroup left = makeFace("left", blue);
        TransformGroup right = makeFace("right", blue);
        // TransformGroup ceiling = makeFace("ceiling", new Color3f(1.0f, 1.0f, 1.0f));  // white
        
        // create lines to divide surfaces into 3x3 grids
        Shape3D grid = makeGrid();
        
        // add children to root branch graph
        objRoot.addChild(floor);
        objRoot.addChild(back);
        objRoot.addChild(left);
        objRoot.addChild(right);
        objRoot.addChild(front);
        // objRoot.addChild(ceiling);
        objRoot.addChild(grid);
        
        LoadModel lm = new LoadModel();
        objRoot.addChild(lm.getModel());
//         LoadModelFixed lmf = new LoadModelFixed();
//         objROot.addChild(lmf.getModel());
        
        return objRoot;
    } // end of method

    // method to create sides and floor of a room
    private TransformGroup makeFace(String face, Color3f faceColor) {
        
        // create standard QuadArray with coordinates for basic surface
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-15f, 0f, 15f));
        qa.setCoordinate(1, new Point3f(15f, 0f, 15f));
        qa.setCoordinate(2, new Point3f(15f, 0f, -15f));
        qa.setCoordinate(3, new Point3f(-15f, 0f, -15f));
        
        // set color for created quad
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        // create ability to transform and translate surface to correct position
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        // create surface based on input paramaters
        // surfaces are off by a factor of 0.005 to allow grid lines to be more visible
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15.005f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.rotX(Math.PI);
                t3d.setTranslation(new Vector3f(0f, 15.005f, 0f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "left": t3d.rotZ(-Math.PI/2);
                t3d.setTranslation(new Vector3f(-15.005f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "right": t3d.rotZ(Math.PI/2);
                t3d.setTranslation(new Vector3f(15.005f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.rotX(-Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, 15.005f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.rotX(Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, -15.005f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
        return tg;
    } // end of makeFace method
    
    // makes lines to divide constructed area into 3x3 grid for each side
    private Shape3D makeGrid() {
        
        // set up initial coordinates for z plane grid lines
        Point3f[] gridCoords = new Point3f[47];
        gridCoords[0] = new Point3f(-15f, 15f, 15f);
        gridCoords[1] = new Point3f(-15f, -15f, 15f);
        gridCoords[2] = new Point3f(15f, -15f, 15f);
        gridCoords[3] = new Point3f(15f, 15f, 15f);
        
        // create remaining grid lines through z plane
        Point3f adjust = new Point3f(0, 0, -10);
        for (int i = 4; i < 16; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        // set up initial coordinates for x plane grid lines
        gridCoords[16] = new Point3f(gridCoords[3]);
        gridCoords[17] = new Point3f(gridCoords[2]);
        gridCoords[18] = new Point3f(gridCoords[14]);
        gridCoords[19] = new Point3f(gridCoords[15]);
        
        // create remaining grid lines through x plane
        adjust = new Point3f(-10, 0, 0);
        for (int i = 20; i < 32; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        // set up initial coordinates for y plane grid lines
        gridCoords[32] = new Point3f(gridCoords[0]);
        gridCoords[33] = new Point3f(gridCoords[3]);
        gridCoords[34] = new Point3f(gridCoords[15]);
        gridCoords[35] = new Point3f(gridCoords[12]);
        gridCoords[36] = new Point3f(gridCoords[0]);
        
        // create remaining grid lines through y plane
        adjust = new Point3f(0, -10, 0);
        for (int i = 37; i < 47; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 5]);
            gridCoords[i].add(adjust);
        }
        
        // create array for vertex counts in LineStripArray
        int[] lineCounts = new int[11];
        for (int i = 0; i < lineCounts.length; i++) {
            if (i < 8) {lineCounts[i] = 4;}
            else {lineCounts[i] = 5;}
        }
        
        // create LineStripArray object to create lines
        LineStripArray grid = new LineStripArray(47, LineStripArray.COORDINATES, lineCounts);
        for (int i = 0; i < gridCoords.length; i++) {
            grid.setCoordinate(i, gridCoords[i]);
        }
        
        return new Shape3D(grid);
    } // end of makeGrid method
    
    private void orbitControls(Canvas3D c)
    /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
    {
        OrbitBehavior orbit = 
            new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
        orbit.setSchedulingBounds(bounds);

        ViewingPlatform vp = su.getViewingPlatform();
        vp.setViewPlatformBehavior(orbit);      
    } // end of orbitControls()

    private void initUserPosition()
    // Set the user's initial viewpoint using lookAt()
    {
        ViewingPlatform vp = su.getViewingPlatform();
        TransformGroup steerTG = vp.getViewPlatformTransform();

        Transform3D t3d = new Transform3D();
        steerTG.getTransform(t3d);

        // args are: viewer posn, where looking, up direction
        t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
        t3d.invert();

        steerTG.setTransform(t3d);
    } // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3D(), 256, 256);
    } // end of main
} // end of class

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				258545812
			</iTime>
			<fName>
				LoadModelFixed.java
			</fName>
			<fSize>
				4751.0
			</fSize>
			<fData>
/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor with grid lines
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 2.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import ncsa.j3d.loaders.*;
import com.sun.j3d.loaders.Scene;
import java.io.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import java.util.*;

public class LoadModelFixed {
    private Scene loadedScene = null;
    private BranchGroup loadedBG = null;
    private TransformGroup tg = null;
    
    private static final Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
  private static final Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
  private static final Color3f blue = new Color3f(0.6f,0.6f, 1.0f);
    
    LoadModelFixed() {
        // FileWriter ofw = null;
        
        try {
            ModelLoader loader = new ModelLoader();
            loadedScene = loader.load("GUN1.3DS");
            if(loadedScene != null) {
                loadedBG = loadedScene.getSceneGroup();
            }
        }
        catch( IOException ioe )
        { System.err.println("Could not find file."); }
        
        visitNode(loadedBG);
        
        Transform3D t3d = new Transform3D();
        t3d.rotX( -Math.PI/2.0 );    // models are often on their face; fix that
        Vector3d scaleVec = calcScaleFactor(loadedBG);   // scale the model
        t3d.setScale( scaleVec );
        tg = new TransformGroup(t3d);
        tg.addChild(loadedBG);
        
    }
    
    private Vector3d calcScaleFactor(BranchGroup loadedBG)
        // Scale the model based on its original bounding box size
    {
        BoundingBox boundbox = new BoundingBox( loadedBG.getBounds() );
        // System.out.println(boundbox);

        // obtain the upper and lower coordinates of the box
        Point3d lower = new Point3d();
        boundbox.getLower( lower );
        Point3d upper = new Point3d();
        boundbox.getUpper( upper );

        // store the largest X, Y, or Z dimension and calculate a scale factor
        double max = 0.0;     
        if( (upper.x - lower.x ) > max ) { max = (upper.x - lower.x ); }

        if( (upper.y - lower.y ) > max ) { max = (upper.y - lower.y ); }

        if( (upper.z - lower.z ) > max ) { max = (upper.z - lower.z ); }

        double scaleFactor = 10.0/max;    // 10 is half the width of the floor
        //System.out.println("max dimension: " + df.format(max) + 
        //                 "; scaleFactor: " + df.format(scaleFactor) );

        // limit the scaling so that a big model isn't scaled too much
        if( scaleFactor < 0.0005 )
            scaleFactor = 0.0005;

        return new Vector3d(scaleFactor, scaleFactor, scaleFactor);
    }   // end of calcScaleFactor()

    private void visitNode(Node node)
  /*  If the node is a Group then recursively visit its children.
      Otherwise if the node is a Shape3D then so the changes.
  */
  { if(node instanceof Group) {
      Group g = (Group) node;
      Enumeration enumKids = g.getAllChildren();
      while(enumKids.hasMoreElements()) {    // visit children
        SceneGraphObject obj = (SceneGraphObject) enumKids.nextElement();
        if (obj instanceof Node)
          visitNode((Node) obj);
      }
    }
    else if (node instanceof Shape3D)
      adjustShape3D((Shape3D) node);
  }  // end of visitNode()



  private void adjustShape3D(Shape3D shape)
  /* Shape adjusting examples:
        * change the colour of a shape to blue
        * draw the shape in outline (i.e. as a wireframe)
        * make the shape transparent
        * add a texture to the shape (this can be combined with the
          colour changing method)
     The choice of which one depends on adaptNo: 0-3, and
     4 does makeBlue() and addTexture()
  */
  { //switch(adaptNo) {
      makeBlue(shape); 
//       case 1: drawOutline(shape); break;
//       case 2: makeAlmostTransparent(shape); break;
//       case 3: addTexture(shape); break;
//       case 4: makeBlue(shape); addTexture(shape); break;
//       default: break;   // say nothing
//     }
  }  // end of adjustShape3D()


  private void makeBlue(Shape3D shape)
  // change the shape's colour to blue
  {
    Appearance app = shape.getAppearance();
    Material blueMat = new Material(black, black, blue, white, 20.0f);
        // the black ambient means that unlit surfaces are pitch black
    blueMat.setLightingEnable(true);
    app.setMaterial( blueMat );
    shape.setAppearance(app);
  }  // end of makeBlue()
    
    
    public TransformGroup getModel() { return tg; }
  
} // end of class

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				258566328
			</iTime>
			<fName>
				MyOwn3D.java
			</fName>
			<fSize>
				8757.0
			</fSize>
			<fData>
/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor with grid lines
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 2.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.applet.Applet;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;

public class MyOwn3D extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere();   // for environment nodes
    private SimpleUniverse su;
    
    // constructor
    public MyOwn3D() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
        BranchGroup scene = createSceneGraph();
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor

    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();  // root of visual objects in scene graph
        
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);  // solid color blue for coloring sides and floor
        
        // create the sides and floor
        TransformGroup floor = makeFace("floor", blue);
        TransformGroup back = makeFace("back", blue);
        TransformGroup front = makeFace("front", blue);
        TransformGroup left = makeFace("left", blue);
        TransformGroup right = makeFace("right", blue);
        // TransformGroup ceiling = makeFace("ceiling", new Color3f(1.0f, 1.0f, 1.0f));  // white
        
        // create lines to divide surfaces into 3x3 grids
        Shape3D grid = makeGrid();
        
        // add children to root branch graph
        objRoot.addChild(floor);
        objRoot.addChild(back);
        objRoot.addChild(left);
        objRoot.addChild(right);
        objRoot.addChild(front);
        // objRoot.addChild(ceiling);
        objRoot.addChild(grid);
        
//         LoadModel lm = new LoadModel();
//         objRoot.addChild(lm.getModel());
        LoadModelFixed lmf = new LoadModelFixed();
        objROot.addChild(lmf.getModel());
        
        return objRoot;
    } // end of method

    // method to create sides and floor of a room
    private TransformGroup makeFace(String face, Color3f faceColor) {
        
        // create standard QuadArray with coordinates for basic surface
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-15f, 0f, 15f));
        qa.setCoordinate(1, new Point3f(15f, 0f, 15f));
        qa.setCoordinate(2, new Point3f(15f, 0f, -15f));
        qa.setCoordinate(3, new Point3f(-15f, 0f, -15f));
        
        // set color for created quad
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        // create ability to transform and translate surface to correct position
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        // create surface based on input paramaters
        // surfaces are off by a factor of 0.005 to allow grid lines to be more visible
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15.005f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.rotX(Math.PI);
                t3d.setTranslation(new Vector3f(0f, 15.005f, 0f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "left": t3d.rotZ(-Math.PI/2);
                t3d.setTranslation(new Vector3f(-15.005f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "right": t3d.rotZ(Math.PI/2);
                t3d.setTranslation(new Vector3f(15.005f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.rotX(-Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, 15.005f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.rotX(Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, -15.005f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
        return tg;
    } // end of makeFace method
    
    // makes lines to divide constructed area into 3x3 grid for each side
    private Shape3D makeGrid() {
        
        // set up initial coordinates for z plane grid lines
        Point3f[] gridCoords = new Point3f[47];
        gridCoords[0] = new Point3f(-15f, 15f, 15f);
        gridCoords[1] = new Point3f(-15f, -15f, 15f);
        gridCoords[2] = new Point3f(15f, -15f, 15f);
        gridCoords[3] = new Point3f(15f, 15f, 15f);
        
        // create remaining grid lines through z plane
        Point3f adjust = new Point3f(0, 0, -10);
        for (int i = 4; i < 16; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        // set up initial coordinates for x plane grid lines
        gridCoords[16] = new Point3f(gridCoords[3]);
        gridCoords[17] = new Point3f(gridCoords[2]);
        gridCoords[18] = new Point3f(gridCoords[14]);
        gridCoords[19] = new Point3f(gridCoords[15]);
        
        // create remaining grid lines through x plane
        adjust = new Point3f(-10, 0, 0);
        for (int i = 20; i < 32; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        // set up initial coordinates for y plane grid lines
        gridCoords[32] = new Point3f(gridCoords[0]);
        gridCoords[33] = new Point3f(gridCoords[3]);
        gridCoords[34] = new Point3f(gridCoords[15]);
        gridCoords[35] = new Point3f(gridCoords[12]);
        gridCoords[36] = new Point3f(gridCoords[0]);
        
        // create remaining grid lines through y plane
        adjust = new Point3f(0, -10, 0);
        for (int i = 37; i < 47; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 5]);
            gridCoords[i].add(adjust);
        }
        
        // create array for vertex counts in LineStripArray
        int[] lineCounts = new int[11];
        for (int i = 0; i < lineCounts.length; i++) {
            if (i < 8) {lineCounts[i] = 4;}
            else {lineCounts[i] = 5;}
        }
        
        // create LineStripArray object to create lines
        LineStripArray grid = new LineStripArray(47, LineStripArray.COORDINATES, lineCounts);
        for (int i = 0; i < gridCoords.length; i++) {
            grid.setCoordinate(i, gridCoords[i]);
        }
        
        return new Shape3D(grid);
    } // end of makeGrid method
    
    private void orbitControls(Canvas3D c)
    /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
    {
        OrbitBehavior orbit = 
            new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
        orbit.setSchedulingBounds(bounds);

        ViewingPlatform vp = su.getViewingPlatform();
        vp.setViewPlatformBehavior(orbit);      
    } // end of orbitControls()

    private void initUserPosition()
    // Set the user's initial viewpoint using lookAt()
    {
        ViewingPlatform vp = su.getViewingPlatform();
        TransformGroup steerTG = vp.getViewPlatformTransform();

        Transform3D t3d = new Transform3D();
        steerTG.getTransform(t3d);

        // args are: viewer posn, where looking, up direction
        t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
        t3d.invert();

        steerTG.setTransform(t3d);
    } // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3D(), 256, 256);
    } // end of main
} // end of class

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				87
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   variable objROot
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				258583531
			</iTime>
			<fName>
				MyOwn3D.java
			</fName>
			<fSize>
				8757.0
			</fSize>
			<fData>
/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor with grid lines
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 2.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.applet.Applet;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;

public class MyOwn3D extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere();   // for environment nodes
    private SimpleUniverse su;
    
    // constructor
    public MyOwn3D() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
        BranchGroup scene = createSceneGraph();
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor

    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();  // root of visual objects in scene graph
        
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);  // solid color blue for coloring sides and floor
        
        // create the sides and floor
        TransformGroup floor = makeFace("floor", blue);
        TransformGroup back = makeFace("back", blue);
        TransformGroup front = makeFace("front", blue);
        TransformGroup left = makeFace("left", blue);
        TransformGroup right = makeFace("right", blue);
        // TransformGroup ceiling = makeFace("ceiling", new Color3f(1.0f, 1.0f, 1.0f));  // white
        
        // create lines to divide surfaces into 3x3 grids
        Shape3D grid = makeGrid();
        
        // add children to root branch graph
        objRoot.addChild(floor);
        objRoot.addChild(back);
        objRoot.addChild(left);
        objRoot.addChild(right);
        objRoot.addChild(front);
        // objRoot.addChild(ceiling);
        objRoot.addChild(grid);
        
//         LoadModel lm = new LoadModel();
//         objRoot.addChild(lm.getModel());
        LoadModelFixed lmf = new LoadModelFixed();
        objRoot.addChild(lmf.getModel());
        
        return objRoot;
    } // end of method

    // method to create sides and floor of a room
    private TransformGroup makeFace(String face, Color3f faceColor) {
        
        // create standard QuadArray with coordinates for basic surface
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-15f, 0f, 15f));
        qa.setCoordinate(1, new Point3f(15f, 0f, 15f));
        qa.setCoordinate(2, new Point3f(15f, 0f, -15f));
        qa.setCoordinate(3, new Point3f(-15f, 0f, -15f));
        
        // set color for created quad
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        // create ability to transform and translate surface to correct position
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        // create surface based on input paramaters
        // surfaces are off by a factor of 0.005 to allow grid lines to be more visible
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15.005f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.rotX(Math.PI);
                t3d.setTranslation(new Vector3f(0f, 15.005f, 0f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "left": t3d.rotZ(-Math.PI/2);
                t3d.setTranslation(new Vector3f(-15.005f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "right": t3d.rotZ(Math.PI/2);
                t3d.setTranslation(new Vector3f(15.005f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.rotX(-Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, 15.005f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.rotX(Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, -15.005f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
        return tg;
    } // end of makeFace method
    
    // makes lines to divide constructed area into 3x3 grid for each side
    private Shape3D makeGrid() {
        
        // set up initial coordinates for z plane grid lines
        Point3f[] gridCoords = new Point3f[47];
        gridCoords[0] = new Point3f(-15f, 15f, 15f);
        gridCoords[1] = new Point3f(-15f, -15f, 15f);
        gridCoords[2] = new Point3f(15f, -15f, 15f);
        gridCoords[3] = new Point3f(15f, 15f, 15f);
        
        // create remaining grid lines through z plane
        Point3f adjust = new Point3f(0, 0, -10);
        for (int i = 4; i < 16; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        // set up initial coordinates for x plane grid lines
        gridCoords[16] = new Point3f(gridCoords[3]);
        gridCoords[17] = new Point3f(gridCoords[2]);
        gridCoords[18] = new Point3f(gridCoords[14]);
        gridCoords[19] = new Point3f(gridCoords[15]);
        
        // create remaining grid lines through x plane
        adjust = new Point3f(-10, 0, 0);
        for (int i = 20; i < 32; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        // set up initial coordinates for y plane grid lines
        gridCoords[32] = new Point3f(gridCoords[0]);
        gridCoords[33] = new Point3f(gridCoords[3]);
        gridCoords[34] = new Point3f(gridCoords[15]);
        gridCoords[35] = new Point3f(gridCoords[12]);
        gridCoords[36] = new Point3f(gridCoords[0]);
        
        // create remaining grid lines through y plane
        adjust = new Point3f(0, -10, 0);
        for (int i = 37; i < 47; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 5]);
            gridCoords[i].add(adjust);
        }
        
        // create array for vertex counts in LineStripArray
        int[] lineCounts = new int[11];
        for (int i = 0; i < lineCounts.length; i++) {
            if (i < 8) {lineCounts[i] = 4;}
            else {lineCounts[i] = 5;}
        }
        
        // create LineStripArray object to create lines
        LineStripArray grid = new LineStripArray(47, LineStripArray.COORDINATES, lineCounts);
        for (int i = 0; i < gridCoords.length; i++) {
            grid.setCoordinate(i, gridCoords[i]);
        }
        
        return new Shape3D(grid);
    } // end of makeGrid method
    
    private void orbitControls(Canvas3D c)
    /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
    {
        OrbitBehavior orbit = 
            new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
        orbit.setSchedulingBounds(bounds);

        ViewingPlatform vp = su.getViewingPlatform();
        vp.setViewPlatformBehavior(orbit);      
    } // end of orbitControls()

    private void initUserPosition()
    // Set the user's initial viewpoint using lookAt()
    {
        ViewingPlatform vp = su.getViewingPlatform();
        TransformGroup steerTG = vp.getViewPlatformTransform();

        Transform3D t3d = new Transform3D();
        steerTG.getTransform(t3d);

        // args are: viewer posn, where looking, up direction
        t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
        t3d.invert();

        steerTG.setTransform(t3d);
    } // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3D(), 256, 256);
    } // end of main
} // end of class

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				258644015
			</iTime>
			<fName>
				WrapLoaderInfo3D.java
			</fName>
			<fSize>
				20211.0
			</fSize>
			<fData>

// WrapLoaderInfo3D.java
// Andrew Davison, April 2005, ad@fivedots.coe.psu.ac.th

/* A checkboard floor, with a red center square, and labelled
   XZ axes.

   Load the model stored in filename fn using a NCSA Portfolio
   loader. The model is rotated and scaled so it is easy to see.

   Carry out the following operations on the loaded model:
     * display its named objects
     * traverse its scene graph, saving info to the EXAMINE_FN file
     * adjust the model's component shapes in various ways
         - there are 4 different variations; see adjustShape3D()

*/

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.util.*;
import java.text.DecimalFormat;

import com.sun.j3d.utils.universe.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.image.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.behaviors.vp.*;

import ncsa.j3d.loaders.*;     // Portfolio loaders
import com.sun.j3d.loaders.Scene;

// import com.tornadolabs.j3dtree.*;    // for displaying the scene graph



public class WrapLoaderInfo3D extends JPanel
// Holds the 3D canvas where the loaded image is displayed
{
  private static final int PWIDTH = 512;   // size of panel
  private static final int PHEIGHT = 512; 

  private static final int BOUNDSIZE = 100;  // larger than world
  private static final Point3d USERPOSN = new Point3d(0,5,20);
    // initial user position

  private static final Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
  private static final Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
  private static final Color3f blue = new Color3f(0.6f,0.6f, 1.0f);

  private static final String EXAMINE_FN = "examObj.txt";
  private static final String TEXTURE_FN = "models/stone.jpg";


  private SimpleUniverse su;
  private BranchGroup sceneBG;
  private BoundingSphere bounds;   // for environment nodes

  private FileWriter ofw;     // for writing out model info
  private DecimalFormat df;   // for simpler output

  // references to the loading model
  private Scene loadedScene = null;
  private BranchGroup loadedBG = null;

  private int adaptNo;    
        // used to choose the shape adaption method in adjustShape3D()
  private Texture2D texture = null;   // used when changing a shape's texture

  // private Java3dTree j3dTree;   // frame to hold tree display


  public WrapLoaderInfo3D(String fn, int adaptNo)
  // construct the 3D canvas
  {
    this.adaptNo = adaptNo;
    setLayout( new BorderLayout() );
    setOpaque( false );
    setPreferredSize( new Dimension(PWIDTH, PHEIGHT));

    GraphicsConfiguration config =
					SimpleUniverse.getPreferredConfiguration();
    Canvas3D canvas3D = new Canvas3D(config);
    add("Center", canvas3D);
    canvas3D.setFocusable(true);     // give focus to the canvas 
    canvas3D.requestFocus();

    su = new SimpleUniverse(canvas3D);

    // j3dTree = new Java3dTree();   // create a display tree for the SG

    createSceneGraph(fn);
    initUserPosition();        // set user's viewpoint
    orbitControls(canvas3D);   // controls for moving the viewpoint
    
    su.addBranchGraph( sceneBG );

	// j3dTree.updateNodes( su );    // build the tree display window

  } // end of WrapLoaderInfo3D()



  private void createSceneGraph(String fn) 
  // initilise the scene
  { 
    sceneBG = new BranchGroup();
    bounds = new BoundingSphere(new Point3d(0,0,0), BOUNDSIZE);
    df = new DecimalFormat("0.###");    // 3 dp
   
    lightScene();         // add the lights
    addBackground();      // add the sky
    sceneBG.addChild( new CheckerFloor().getBG() );  // add the floor

    loadModel(fn);    // load the model stored in fn
                      // loadedScene and loadedBG should now have values
    // examine the model
    if (loadedScene != null) {
      showNamedObject(loadedScene);   // display its named objects
      storeGraphInfo(loadedBG);       // traverse model's graph; save info to file

      // adjust the model's component shapes in various ways
      adjustShapes(loadedBG);      
    }
	// j3dTree.recursiveApplyCapability( sceneBG );   // set capabilities for tree display

    sceneBG.compile();   // fix the scene
  } // end of createSceneGraph()



  private void lightScene()
  /* One ambient light, 2 directional lights */
  {
    // Set up the ambient light
    AmbientLight ambientLightNode = new AmbientLight(white);
    ambientLightNode.setInfluencingBounds(bounds);
    sceneBG.addChild(ambientLightNode);

    // Set up the directional lights
    Vector3f light1Direction  = new Vector3f(-1.0f, -1.0f, -1.0f);
       // left, down, backwards 
    Vector3f light2Direction  = new Vector3f(1.0f, -1.0f, 1.0f);
       // right, down, forwards

    DirectionalLight light1 = 
            new DirectionalLight(white, light1Direction);
    light1.setInfluencingBounds(bounds);
    sceneBG.addChild(light1);

    DirectionalLight light2 = 
        new DirectionalLight(white, light2Direction);
    light2.setInfluencingBounds(bounds);
    sceneBG.addChild(light2);
  }  // end of lightScene()


  private void addBackground()
  // A blue sky
  { Background back = new Background();
    back.setApplicationBounds( bounds );
    back.setColor(0.17f, 0.65f, 0.92f);    // sky colour
    sceneBG.addChild( back );
  }  // end of addBackground()


  private void orbitControls(Canvas3D c)
  /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
  {
    OrbitBehavior orbit = 
		new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
    orbit.setSchedulingBounds(bounds);

    ViewingPlatform vp = su.getViewingPlatform();
    vp.setViewPlatformBehavior(orbit);	    
  }  // end of orbitControls()



  private void initUserPosition()
  // Set the user's initial viewpoint using lookAt()
  {
    ViewingPlatform vp = su.getViewingPlatform();
    TransformGroup steerTG = vp.getViewPlatformTransform();

    Transform3D t3d = new Transform3D();
    steerTG.getTransform(t3d);

    // args are: viewer posn, where looking, up direction
    t3d.lookAt( USERPOSN, new Point3d(0,0,0), new Vector3d(0,1,0));
    t3d.invert();

    steerTG.setTransform(t3d);
  }  // end of initUserPosition()



// -------------------------- model loading --------------


    private void loadModel(String fn)
    /* Load the model from fn into the scene graph using a NCSA 
       Portfolio loader. Rotate and scale it to make it easier to see.
       Store the loaded model's scene in the global loadedScene, 
       and its branch group in loadedBG.
    */
    {
      FileWriter ofw = null;
      System.out.println( "Loading: " + fn );

      try {
        ModelLoader loader = new ModelLoader();    // the NCSA portfolio loader
        // System.out.println("Loader flags: " + loader.getFlags());
        loadedScene = loader.load(fn);             // the loaded scene

        // Rotate and scale the model
        if(loadedScene != null ) {
          loadedBG = loadedScene.getSceneGroup();    // the model's BG
 
          Transform3D t3d = new Transform3D();
          t3d.rotX( -Math.PI/2.0 );    // models are often on their face; fix that
          Vector3d scaleVec = calcScaleFactor(loadedBG, fn);   // scale the model
          t3d.setScale( scaleVec );

          TransformGroup tg = new TransformGroup(t3d);
          tg.addChild(loadedBG);

          sceneBG.addChild(tg);   // add (tg->loadedBG) to scene
        }
        else
          System.out.println("Load error with: " + fn);
      }
      catch( IOException ioe )
      { System.err.println("Could not find object file: " + fn); }
    } // end of loadModel()


  private Vector3d calcScaleFactor(BranchGroup loadedBG, String fn)
  // Scale the model based on its original bounding box size
  {
     BoundingBox boundbox = new BoundingBox( loadedBG.getBounds() );
     // System.out.println(boundbox);

     // obtain the upper and lower coordinates of the box
     Point3d lower = new Point3d();
     boundbox.getLower( lower );
     Point3d upper = new Point3d();
     boundbox.getUpper( upper );

     // store the largest X, Y, or Z dimension and calculate a scale factor
     double max = 0.0;
     if( (upper.x - lower.x ) > max )
       max = (upper.x - lower.x );

     if( (upper.y - lower.y ) > max )
       max = (upper.y - lower.y );

     if( (upper.z - lower.z ) > max )
       max = (upper.z - lower.z );

     double scaleFactor = 10.0/max;    // 10 is half the width of the floor
     System.out.println("max dimension: " + df.format(max) + 
                        "; scaleFactor: " + df.format(scaleFactor) );

     // limit the scaling so that a big model isn't scaled too much
     if( scaleFactor < 0.0005 )
         scaleFactor = 0.0005;

     return new Vector3d(scaleFactor, scaleFactor, scaleFactor);
  }  // end of calcScaleFactor()



 // ---------- model examination --------------------------------


  private void showNamedObject(Scene loadedScene)
  /* Display the named objects, if any. 
     The naming scheme is file-type dependent, but includes 
     VRML DEF names and Lightwave 3D object filenames.
  */
  {
    String name;
    Hashtable namedObjects = loadedScene.getNamedObjects();
    Enumeration e = namedObjects.keys();
    if (namedObjects.isEmpty())
      System.out.println("No Named Objects");
    else {
      System.out.println("Named Objects");
      while(e.hasMoreElements()) {
        name = (String) e.nextElement(); 
        System.out.println(name);
      }
    }
  }  // end of showNamedObject()



  
  private void storeGraphInfo(BranchGroup bg)
  /* Traverse the model's scene graph and store 
     information in EXAMINE_FN via the ofw FileWriter.
  */
  {
    System.out.println("Writing model details to " + EXAMINE_FN);
    try {
      ofw = new FileWriter( EXAMINE_FN );
      examineNode(0, bg);
      ofw.close();
    }
    catch( IOException ioe )
    { System.err.println("Cannot write to " + EXAMINE_FN); }
  }  // end of storeGraphInfo()

  

  private void examineNode(int level, Node node) throws IOException
  /* A Node can be a Group or a Leaf. Depending on the type of
     Group or Leaf, report different things.
     Recursively call examineNode() on the children of a Group,
     incrementing level so the output can be indented correctly.
  */
  {
    if(node instanceof Group) {     // the Node is a Group
      Group g = (Group) node;
      levelPrint(level, "Group: " + g.getClass());

      if(g instanceof TransformGroup) {    // consider subclass
        Transform3D t3d = new Transform3D();
	    ((TransformGroup) g).getTransform(t3d);
        levelPrint(level, t3d.toString() );   // show Transform3D info for TG
      }

      levelPrint(level, g.numChildren() + " children");
      Enumeration enumKids = g.getAllChildren();
      while(enumKids.hasMoreElements())    // visit Group children
        examineNode(level+1, (Node) enumKids.nextElement());
    }
    else if (node instanceof Leaf) {     // the Node is a Leaf
      levelPrint(level, "Leaf: " + node.getClass());
      if (node instanceof Shape3D)
        examineShape3D(level, (Shape3D) node);   // treat Shape3D specially
    }
    else    // the Node is something other than a Group or Leaf
      levelPrint(level, "Node: " + node.getClass());

  }  // end of examineNode()


  private void examineShape3D(int level, Shape3D shape)
									      throws IOException
  /* A Shape3D is a container for Appearance and Geometry components.
     Show appearance info with printAppearance().
     A shape may contain many geometries: examine each one with
     examineGeometry()
  */
  {
    Appearance app = shape.getAppearance();    // consider appearance
    if (app == null)
      levelPrint(level+1, "No Appearance Component");
    else
      printAppearance(level, app);

    int numGeoms = shape.numGeometries();    // consider geometries
    if (numGeoms == 0)
      levelPrint(level+1, "No Geometry Components");
    else if (numGeoms == 1) {
      Geometry g = shape.getGeometry();
      examineGeometry(level+1, 1, g);
    }
    else {   // more than one geometry in the shape
      levelPrint(level+1, "No. of Geometries: " + numGeoms);
      Enumeration enumGeoms = shape.getAllGeometries();
      int i = 1;
      while(enumGeoms.hasMoreElements()) {
        examineGeometry(level+1, i, (Geometry) enumGeoms.nextElement() );
        i++;
      }
    }
    levelPrint(level, "");  // put in a newline in the output
  }  // end of examineShape3D()


  private void printAppearance(int level, Appearance app)
										 throws IOException
  /* Lots of Appearance information could be printed here. We only
     display colour related stuff.
  */
  {
     ColoringAttributes ca = app.getColoringAttributes();
     if (ca != null)
       levelPrint(level, ca.toString() );
     Material mat = app.getMaterial();
     if (mat != null)
       levelPrint(level, mat.toString() );
  }  // end of printAppearance()


  private void examineGeometry(int level, int index, Geometry geo)
										 throws IOException
  // Display geometry info found in a shape
  {
    levelPrint(level, "Geometry: " + geo.getClass());
    if(geo instanceof GeometryArray)
      // geometryArray is frequently used in models, so give some extra info
      levelPrint(level, "Vertex count: " + 
               ((GeometryArray)geo).getVertexCount()); 
  }  // end of examineGeometry()



  private void levelPrint(int level, String s) throws IOException
  // the s string is indented according to level
  {
    for(int i=0; i<level; i++) {
      // System.out.print("  ");
      ofw.write("  ");
    }
    // System.out.println(s);
    ofw.write(s + "\n");
  }  // end of levelPrint()




  // ----------------------- adjust the model's Shape3Ds ------------------


  private void adjustShapes(Node node)
  {
    System.out.println("Adjusting shapes...");
    if ((adaptNo == 3) || (adaptNo == 4))   // will add a texture to the shapes
      loadTexture(TEXTURE_FN);
    visitNode(node);
  }  // end of adjustShapes()


  private void loadTexture(String fn)
  // load image from file fn as a texture
  {
    TextureLoader texLoader = new TextureLoader(fn, null);
    texture = (Texture2D) texLoader.getTexture();
    if (texture == null)
      System.out.println("Cannot load texture from " + fn);
    else {
      System.out.println("Loaded texture from " + fn);
      texture.setEnable(true);
    }
  }  // end of loadTexture()


  private void visitNode(Node node)
  /*  If the node is a Group then recursively visit its children.
      Otherwise if the node is a Shape3D then so the changes.
  */
  { if(node instanceof Group) {
      Group g = (Group) node;
      Enumeration enumKids = g.getAllChildren();
      while(enumKids.hasMoreElements()) {    // visit children
        SceneGraphObject obj = (SceneGraphObject) enumKids.nextElement();
        if (obj instanceof Node)
          visitNode((Node) obj);
      }
    }
    else if (node instanceof Shape3D)
      adjustShape3D((Shape3D) node);
  }  // end of visitNode()



  private void adjustShape3D(Shape3D shape)
  /* Shape adjusting examples:
        * change the colour of a shape to blue
        * draw the shape in outline (i.e. as a wireframe)
        * make the shape transparent
        * add a texture to the shape (this can be combined with the
          colour changing method)
     The choice of which one depends on adaptNo: 0-3, and
     4 does makeBlue() and addTexture()
  */
  { switch(adaptNo) {
      case 0: makeBlue(shape); break;
      case 1: drawOutline(shape); break;
      case 2: makeAlmostTransparent(shape); break;
      case 3: addTexture(shape); break;
      case 4: makeBlue(shape); addTexture(shape); break;
      default: break;   // say nothing
    }
  }  // end of adjustShape3D()


  private void makeBlue(Shape3D shape)
  // change the shape's colour to blue
  {
    Appearance app = shape.getAppearance();
    Material blueMat = new Material(black, black, blue, white, 20.0f);
        // the black ambient means that unlit surfaces are pitch black
    blueMat.setLightingEnable(true);
    app.setMaterial( blueMat );
    shape.setAppearance(app);
  }  // end of makeBlue()


  private void drawOutline(Shape3D shape)
  // draw only the shape's outline (i.e. as a wireframe)
  {
    Appearance app = shape.getAppearance();
    PolygonAttributes pa = new PolygonAttributes();
    pa.setCullFace( PolygonAttributes.CULL_NONE );
    pa.setPolygonMode( PolygonAttributes.POLYGON_LINE );

    app.setPolygonAttributes( pa );
    shape.setAppearance(app);
  }  // end of drawOutline()


  private void makeAlmostTransparent(Shape3D shape)
  // make the shape almost transparent
  {
    Appearance app = shape.getAppearance();

    TransparencyAttributes ta = new TransparencyAttributes();
    ta.setTransparencyMode( TransparencyAttributes.BLENDED );
    ta.setTransparency(0.8f);     // 1.0f is totally transparent

    app.setTransparencyAttributes( ta );
    shape.setAppearance(app);
  } // end of makeAlmostTransparent()


  private void addTexture(Shape3D shape)
  /* Add a texture to the shape, but only if it is represented by a
     single GeometryArray.
  */
  { if (shape.numGeometries() == 1) {
      Geometry g = shape.getGeometry();
      if (g instanceof GeometryArray) 
        addTextureGA(shape);
      else
        System.out.println("Shape geometry is not a GeometryArray");
    }
    else
      System.out.println("Shape has too many geometries");
  }  // end of addTexture()



  private void addTextureGA(Shape3D shape)
  /* Add a texture to a GeometryArray. 
     Add the texture to all faces of the model, 'stretch' the texture 
     over the model, modulate the texture with the existing colour
     and lighting components. The texture comes from TEXTURE_FN, and
     was loaded before the traversal of the model began.
  */
  {
    Appearance app = shape.getAppearance();

    // make shape two-sided, so texture appears on both sides
    PolygonAttributes pa = new PolygonAttributes();
    pa.setCullFace( PolygonAttributes.CULL_NONE );
    app.setPolygonAttributes( pa );

    // generate texture coords that 'stretch' the texture over the model
    app.setTexCoordGeneration( stampTexCoords(shape) );

    // combine texture with colour and lighting of underlying surface
    TextureAttributes ta = new TextureAttributes();
    ta.setTextureMode( TextureAttributes.MODULATE );
    app.setTextureAttributes( ta );

    // apply texture to shape
    if (texture != null) {    // loaded at start, from adjustShapes()
      app.setTexture(texture);
      shape.setAppearance(app);
    }
  }  // end of addTextureGA()


  private TexCoordGeneration stampTexCoords(Shape3D shape)
  /* Specify how the texture is mapped to the model by 
     adjusting the genration planes so that a single texture is
     'stetched' over the entire model rather than repeatedly 'tiled'.

     This makes a big difference for models that are very large
     since the default tiling approach tends to lose texture
     detail and the display 'shimmers' since the texture is 
     mapped to only a few pixels on the model.
  */
  {
    // get the bounds of the shape
    BoundingBox boundBox = new BoundingBox( shape.getBounds() );
    Point3d lower = new Point3d();
    Point3d upper = new Point3d();
    boundBox.getLower(lower); boundBox.getUpper(upper);
    // System.out.println("lower: " + lower + "\nupper: " + upper );

    double width = upper.x - lower.x;
    double height = upper.y - lower.y;
    // System.out.println("width: " + df.format(width) + 
    //                 "; height: " + df.format(height) );

    // adjust generation planes so shape box is mapped to texture
    // coordinates [0,0] and [1,1].
    Vector4f planeS = 
       new Vector4f( (float)(1.0/width), 0.0f, 0.0f, (float)(-lower.x/width));
    Vector4f planeT = 
       new Vector4f( 0.0f, (float)(1.0/height), 0.0f, (float)(-lower.y/height));

    // generate new texture coordinates for GeometryArray
    TexCoordGeneration texGen = new TexCoordGeneration();
    texGen.setPlaneS(planeS);
    texGen.setPlaneT(planeT);

    return texGen;
  } // end of stampTexCoords()


} // end of WrapLoaderInfo3D class

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				258667296
			</iTime>
			<fName>
				LoaderInfo3D.java
			</fName>
			<fSize>
				1614.0
			</fSize>
			<fData>

// LoaderInfo3D.java
// Andrew Davison, April 2005, ad@fivedots.coe.psu.ac.th

/*  Checkers3D scene with a model loaded using a Portfolio loader.
    The model is examined, and its shapes can be changed in various ways.

    Compilation done with CompileLI.bat:
     javac -classpath %CLASSPATH%;ncsa\portfolio.jar *.java
    in compileLI.bat

   Example LoaderInfo3D.bat batch file usage:
     LoaderInfo3D  dolphins.3ds 0

   Changes =======================

   November 2nd, 2004
   show() --> setVisible(true);

*/

import javax.swing.*;
import java.awt.*;


public class LoaderInfo3D extends JFrame
{

  public LoaderInfo3D(String fn, int adaptNo) 
  {
    super("LoaderInfo3D");

    Container c = getContentPane();
    c.setLayout( new BorderLayout() );
    WrapLoaderInfo3D w3d = new WrapLoaderInfo3D(fn, adaptNo);
    c.add(w3d, BorderLayout.CENTER);

    setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE );
    pack();
    setResizable(false);    // fixed size display
    // show();
    setVisible(true);
    w3d.requestFocus();
  } // end of LoaderInfo3D()

// -----------------------------------------

  public static void main(String[] args)
  { 
    if (args.length == 2) {
      int adaptNo = 0;
      try 
      { adaptNo = Integer.parseInt( args[1] ); }
      catch(NumberFormatException e)
      { System.out.println("Illegal adaptNo, using 0"); } 

      new LoaderInfo3D("models/" + args[0], adaptNo);   // assume in models/
    }
    else
      System.out.println(
       "Usage: java -cp %CLASSPATH%;ncsa\\portfolio.jar LoaderInfo3D  <file> <adaptNo>");
  }

} // end of LoaderInfo3D class


			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				259127640
			</iTime>
			<fName>
				LoadModelFixed.java
			</fName>
			<fSize>
				4868.0
			</fSize>
			<fData>
/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor with grid lines
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 2.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import ncsa.j3d.loaders.*;
import com.sun.j3d.loaders.Scene;
import java.io.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import java.util.*;

public class LoadModelFixed {
    private Scene loadedScene = null;
    private BranchGroup loadedBG = null;
    private TransformGroup tg = null;
    
    private static final Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
  private static final Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
  private static final Color3f blue = new Color3f(0.6f,0.6f, 1.0f);
    
    LoadModelFixed() {
        // FileWriter ofw = null;
        
        try {
            ModelLoader loader = new ModelLoader();
            loadedScene = loader.load("GUN1.3DS");
            if(loadedScene != null) {
                loadedBG = loadedScene.getSceneGroup();
            }
        }
        catch( IOException ioe )
        { System.err.println("Could not find file."); }
        
        visitNode(loadedBG);
        
        Transform3D t3d = new Transform3D();
        t3d.rotX( -Math.PI/2.0 );    // models are often on their face; fix that
        Vector3d scaleVec = calcScaleFactor(loadedBG);   // scale the model
        t3d.setScale( scaleVec );
        tg = new TransformGroup(t3d);
        tg.addChild(loadedBG);
        
    }
    
    private Vector3d calcScaleFactor(BranchGroup loadedBG)
        // Scale the model based on its original bounding box size
    {
        BoundingBox boundbox = new BoundingBox( loadedBG.getBounds() );
        // System.out.println(boundbox);

        // obtain the upper and lower coordinates of the box
        Point3d lower = new Point3d();
        boundbox.getLower( lower );
        Point3d upper = new Point3d();
        boundbox.getUpper( upper );

        // store the largest X, Y, or Z dimension and calculate a scale factor
        double max = 0.0;     
        if( (upper.x - lower.x ) > max ) { max = (upper.x - lower.x ); }

        if( (upper.y - lower.y ) > max ) { max = (upper.y - lower.y ); }

        if( (upper.z - lower.z ) > max ) { max = (upper.z - lower.z ); }

        double scaleFactor = 10.0/max;    // 10 is half the width of the floor
        //System.out.println("max dimension: " + df.format(max) + 
        //                 "; scaleFactor: " + df.format(scaleFactor) );

        // limit the scaling so that a big model isn't scaled too much
        if( scaleFactor < 0.0005 )
            scaleFactor = 0.0005;

        return new Vector3d(scaleFactor, scaleFactor, scaleFactor);
    }   // end of calcScaleFactor()

    private void visitNode(Node node)
  /*  If the node is a Group then recursively visit its children.
      Otherwise if the node is a Shape3D then so the changes.
  */
  { if(node instanceof Group) {
      Group g = (Group) node;
      Enumeration enumKids = g.getAllChildren();
      while(enumKids.hasMoreElements()) {    // visit children
        SceneGraphObject obj = (SceneGraphObject) enumKids.nextElement();
        if (obj instanceof Node)
          visitNode((Node) obj);
      }
    }
    else if (node instanceof Shape3D)
      adjustShape3D((Shape3D) node);
  }  // end of visitNode()



  private void adjustShape3D(Shape3D shape)
  /* Shape adjusting examples:
        * change the colour of a shape to blue
        * draw the shape in outline (i.e. as a wireframe)
        * make the shape transparent
        * add a texture to the shape (this can be combined with the
          colour changing method)
     The choice of which one depends on adaptNo: 0-3, and
     4 does makeBlue() and addTexture()
  */
  { //switch(adaptNo) {
      makeBlue(shape); 
//       case 1: drawOutline(shape); break;
//       case 2: makeAlmostTransparent(shape); break;
//       case 3: addTexture(shape); break;
//       case 4: makeBlue(shape); addTexture(shape); break;
//       default: break;   // say nothing
//     }
  }  // end of adjustShape3D()


  private void makeBlue(Shape3D shape)
  // change the shape's colour to blue
  {
    Appearance app = new Appearance();
    //Material blueMat = new Material(black, black, blue, white, 20.0f);
        // the black ambient means that unlit surfaces are pitch black
    //blueMat.setLightingEnable(true);
    //app.setMaterial( blueMat );
    ColoringAtrributes ca = new ColoringAtrributes(new Color3f(0f, 0.2f, 0.7f));
    app.setColoringAttributes(ca);
    shape.setAppearance(app);
  }  // end of makeBlue()
    
    
    public TransformGroup getModel() { return tg; }
  
} // end of class

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				145
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class ColoringAtrributes
			<iErrMessage>
		</compile_instance>
	</session_data>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				145
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class ColoringAtrributes
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				259253140
			</iTime>
			<fName>
				LoadModelFixed.java
			</fName>
			<fSize>
				4868.0
			</fSize>
			<fData>
/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor with grid lines
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 2.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import ncsa.j3d.loaders.*;
import com.sun.j3d.loaders.Scene;
import java.io.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import java.util.*;

public class LoadModelFixed {
    private Scene loadedScene = null;
    private BranchGroup loadedBG = null;
    private TransformGroup tg = null;
    
    private static final Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
  private static final Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
  private static final Color3f blue = new Color3f(0.6f,0.6f, 1.0f);
    
    LoadModelFixed() {
        // FileWriter ofw = null;
        
        try {
            ModelLoader loader = new ModelLoader();
            loadedScene = loader.load("GUN1.3DS");
            if(loadedScene != null) {
                loadedBG = loadedScene.getSceneGroup();
            }
        }
        catch( IOException ioe )
        { System.err.println("Could not find file."); }
        
        visitNode(loadedBG);
        
        Transform3D t3d = new Transform3D();
        t3d.rotX( -Math.PI/2.0 );    // models are often on their face; fix that
        Vector3d scaleVec = calcScaleFactor(loadedBG);   // scale the model
        t3d.setScale( scaleVec );
        tg = new TransformGroup(t3d);
        tg.addChild(loadedBG);
        
    }
    
    private Vector3d calcScaleFactor(BranchGroup loadedBG)
        // Scale the model based on its original bounding box size
    {
        BoundingBox boundbox = new BoundingBox( loadedBG.getBounds() );
        // System.out.println(boundbox);

        // obtain the upper and lower coordinates of the box
        Point3d lower = new Point3d();
        boundbox.getLower( lower );
        Point3d upper = new Point3d();
        boundbox.getUpper( upper );

        // store the largest X, Y, or Z dimension and calculate a scale factor
        double max = 0.0;     
        if( (upper.x - lower.x ) > max ) { max = (upper.x - lower.x ); }

        if( (upper.y - lower.y ) > max ) { max = (upper.y - lower.y ); }

        if( (upper.z - lower.z ) > max ) { max = (upper.z - lower.z ); }

        double scaleFactor = 10.0/max;    // 10 is half the width of the floor
        //System.out.println("max dimension: " + df.format(max) + 
        //                 "; scaleFactor: " + df.format(scaleFactor) );

        // limit the scaling so that a big model isn't scaled too much
        if( scaleFactor < 0.0005 )
            scaleFactor = 0.0005;

        return new Vector3d(scaleFactor, scaleFactor, scaleFactor);
    }   // end of calcScaleFactor()

    private void visitNode(Node node)
  /*  If the node is a Group then recursively visit its children.
      Otherwise if the node is a Shape3D then so the changes.
  */
  { if(node instanceof Group) {
      Group g = (Group) node;
      Enumeration enumKids = g.getAllChildren();
      while(enumKids.hasMoreElements()) {    // visit children
        SceneGraphObject obj = (SceneGraphObject) enumKids.nextElement();
        if (obj instanceof Node)
          visitNode((Node) obj);
      }
    }
    else if (node instanceof Shape3D)
      adjustShape3D((Shape3D) node);
  }  // end of visitNode()



  private void adjustShape3D(Shape3D shape)
  /* Shape adjusting examples:
        * change the colour of a shape to blue
        * draw the shape in outline (i.e. as a wireframe)
        * make the shape transparent
        * add a texture to the shape (this can be combined with the
          colour changing method)
     The choice of which one depends on adaptNo: 0-3, and
     4 does makeBlue() and addTexture()
  */
  { //switch(adaptNo) {
      makeBlue(shape); 
//       case 1: drawOutline(shape); break;
//       case 2: makeAlmostTransparent(shape); break;
//       case 3: addTexture(shape); break;
//       case 4: makeBlue(shape); addTexture(shape); break;
//       default: break;   // say nothing
//     }
  }  // end of adjustShape3D()


  private void makeBlue(Shape3D shape)
  // change the shape's colour to blue
  {
    Appearance app = new Appearance();
    //Material blueMat = new Material(black, black, blue, white, 20.0f);
        // the black ambient means that unlit surfaces are pitch black
    //blueMat.setLightingEnable(true);
    //app.setMaterial( blueMat );
    ColoringAttributes ca = new ColoringAtrributes(new Color3f(0f, 0.2f, 0.7f));
    app.setColoringAttributes(ca);
    shape.setAppearance(app);
  }  // end of makeBlue()
    
    
    public TransformGroup getModel() { return tg; }
  
} // end of class

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				145
			<iErrLine>
			<iErrMessage>
				cannot find symbol -   class ColoringAtrributes
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				259273859
			</iTime>
			<fName>
				LoadModelFixed.java
			</fName>
			<fSize>
				4868.0
			</fSize>
			<fData>
/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor with grid lines
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 2.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import ncsa.j3d.loaders.*;
import com.sun.j3d.loaders.Scene;
import java.io.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import java.util.*;

public class LoadModelFixed {
    private Scene loadedScene = null;
    private BranchGroup loadedBG = null;
    private TransformGroup tg = null;
    
    private static final Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
  private static final Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
  private static final Color3f blue = new Color3f(0.6f,0.6f, 1.0f);
    
    LoadModelFixed() {
        // FileWriter ofw = null;
        
        try {
            ModelLoader loader = new ModelLoader();
            loadedScene = loader.load("GUN1.3DS");
            if(loadedScene != null) {
                loadedBG = loadedScene.getSceneGroup();
            }
        }
        catch( IOException ioe )
        { System.err.println("Could not find file."); }
        
        visitNode(loadedBG);
        
        Transform3D t3d = new Transform3D();
        t3d.rotX( -Math.PI/2.0 );    // models are often on their face; fix that
        Vector3d scaleVec = calcScaleFactor(loadedBG);   // scale the model
        t3d.setScale( scaleVec );
        tg = new TransformGroup(t3d);
        tg.addChild(loadedBG);
        
    }
    
    private Vector3d calcScaleFactor(BranchGroup loadedBG)
        // Scale the model based on its original bounding box size
    {
        BoundingBox boundbox = new BoundingBox( loadedBG.getBounds() );
        // System.out.println(boundbox);

        // obtain the upper and lower coordinates of the box
        Point3d lower = new Point3d();
        boundbox.getLower( lower );
        Point3d upper = new Point3d();
        boundbox.getUpper( upper );

        // store the largest X, Y, or Z dimension and calculate a scale factor
        double max = 0.0;     
        if( (upper.x - lower.x ) > max ) { max = (upper.x - lower.x ); }

        if( (upper.y - lower.y ) > max ) { max = (upper.y - lower.y ); }

        if( (upper.z - lower.z ) > max ) { max = (upper.z - lower.z ); }

        double scaleFactor = 10.0/max;    // 10 is half the width of the floor
        //System.out.println("max dimension: " + df.format(max) + 
        //                 "; scaleFactor: " + df.format(scaleFactor) );

        // limit the scaling so that a big model isn't scaled too much
        if( scaleFactor < 0.0005 )
            scaleFactor = 0.0005;

        return new Vector3d(scaleFactor, scaleFactor, scaleFactor);
    }   // end of calcScaleFactor()

    private void visitNode(Node node)
  /*  If the node is a Group then recursively visit its children.
      Otherwise if the node is a Shape3D then so the changes.
  */
  { if(node instanceof Group) {
      Group g = (Group) node;
      Enumeration enumKids = g.getAllChildren();
      while(enumKids.hasMoreElements()) {    // visit children
        SceneGraphObject obj = (SceneGraphObject) enumKids.nextElement();
        if (obj instanceof Node)
          visitNode((Node) obj);
      }
    }
    else if (node instanceof Shape3D)
      adjustShape3D((Shape3D) node);
  }  // end of visitNode()



  private void adjustShape3D(Shape3D shape)
  /* Shape adjusting examples:
        * change the colour of a shape to blue
        * draw the shape in outline (i.e. as a wireframe)
        * make the shape transparent
        * add a texture to the shape (this can be combined with the
          colour changing method)
     The choice of which one depends on adaptNo: 0-3, and
     4 does makeBlue() and addTexture()
  */
  { //switch(adaptNo) {
      makeBlue(shape); 
//       case 1: drawOutline(shape); break;
//       case 2: makeAlmostTransparent(shape); break;
//       case 3: addTexture(shape); break;
//       case 4: makeBlue(shape); addTexture(shape); break;
//       default: break;   // say nothing
//     }
  }  // end of adjustShape3D()


  private void makeBlue(Shape3D shape)
  // change the shape's colour to blue
  {
    Appearance app = new Appearance();
    //Material blueMat = new Material(black, black, blue, white, 20.0f);
        // the black ambient means that unlit surfaces are pitch black
    //blueMat.setLightingEnable(true);
    //app.setMaterial( blueMat );
    ColoringAttributes ca = new ColoringAttributes(new Color3f(0f, 0.2f, 0.7f));
    app.setColoringAttributes(ca);
    shape.setAppearance(app);
  }  // end of makeBlue()
    
    
    public TransformGroup getModel() { return tg; }
  
} // end of class

			</fData>
			<iStatus>
				FAILED
			<iStatus>
			<iErrLine>
				145
			<iErrLine>
			<iErrMessage>
				no suitable constructor found for ColoringAttributes(javax.vecmath.Color3f)
    constructor javax.media.j3d.ColoringAttributes.ColoringAttributes(float,float,float,int) is not applicable
      (actual and formal argument lists differ in length)
    constructor javax.media.j3d.ColoringAttributes.ColoringAttributes(javax.vecmath.Color3f,int) is not applicable
      (actual and formal argument lists differ in length)
    constructor javax.media.j3d.ColoringAttributes.ColoringAttributes() is not applicable
      (actual and formal argument lists differ in length)
			<iErrMessage>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				259299093
			</iTime>
			<fName>
				LoadModelFixed.java
			</fName>
			<fSize>
				4871.0
			</fSize>
			<fData>
/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor with grid lines
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 2.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import ncsa.j3d.loaders.*;
import com.sun.j3d.loaders.Scene;
import java.io.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import java.util.*;

public class LoadModelFixed {
    private Scene loadedScene = null;
    private BranchGroup loadedBG = null;
    private TransformGroup tg = null;
    
    private static final Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
  private static final Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
  private static final Color3f blue = new Color3f(0.6f,0.6f, 1.0f);
    
    LoadModelFixed() {
        // FileWriter ofw = null;
        
        try {
            ModelLoader loader = new ModelLoader();
            loadedScene = loader.load("GUN1.3DS");
            if(loadedScene != null) {
                loadedBG = loadedScene.getSceneGroup();
            }
        }
        catch( IOException ioe )
        { System.err.println("Could not find file."); }
        
        visitNode(loadedBG);
        
        Transform3D t3d = new Transform3D();
        t3d.rotX( -Math.PI/2.0 );    // models are often on their face; fix that
        Vector3d scaleVec = calcScaleFactor(loadedBG);   // scale the model
        t3d.setScale( scaleVec );
        tg = new TransformGroup(t3d);
        tg.addChild(loadedBG);
        
    }
    
    private Vector3d calcScaleFactor(BranchGroup loadedBG)
        // Scale the model based on its original bounding box size
    {
        BoundingBox boundbox = new BoundingBox( loadedBG.getBounds() );
        // System.out.println(boundbox);

        // obtain the upper and lower coordinates of the box
        Point3d lower = new Point3d();
        boundbox.getLower( lower );
        Point3d upper = new Point3d();
        boundbox.getUpper( upper );

        // store the largest X, Y, or Z dimension and calculate a scale factor
        double max = 0.0;     
        if( (upper.x - lower.x ) > max ) { max = (upper.x - lower.x ); }

        if( (upper.y - lower.y ) > max ) { max = (upper.y - lower.y ); }

        if( (upper.z - lower.z ) > max ) { max = (upper.z - lower.z ); }

        double scaleFactor = 10.0/max;    // 10 is half the width of the floor
        //System.out.println("max dimension: " + df.format(max) + 
        //                 "; scaleFactor: " + df.format(scaleFactor) );

        // limit the scaling so that a big model isn't scaled too much
        if( scaleFactor < 0.0005 )
            scaleFactor = 0.0005;

        return new Vector3d(scaleFactor, scaleFactor, scaleFactor);
    }   // end of calcScaleFactor()

    private void visitNode(Node node)
  /*  If the node is a Group then recursively visit its children.
      Otherwise if the node is a Shape3D then so the changes.
  */
  { if(node instanceof Group) {
      Group g = (Group) node;
      Enumeration enumKids = g.getAllChildren();
      while(enumKids.hasMoreElements()) {    // visit children
        SceneGraphObject obj = (SceneGraphObject) enumKids.nextElement();
        if (obj instanceof Node)
          visitNode((Node) obj);
      }
    }
    else if (node instanceof Shape3D)
      adjustShape3D((Shape3D) node);
  }  // end of visitNode()



  private void adjustShape3D(Shape3D shape)
  /* Shape adjusting examples:
        * change the colour of a shape to blue
        * draw the shape in outline (i.e. as a wireframe)
        * make the shape transparent
        * add a texture to the shape (this can be combined with the
          colour changing method)
     The choice of which one depends on adaptNo: 0-3, and
     4 does makeBlue() and addTexture()
  */
  { //switch(adaptNo) {
      makeBlue(shape); 
//       case 1: drawOutline(shape); break;
//       case 2: makeAlmostTransparent(shape); break;
//       case 3: addTexture(shape); break;
//       case 4: makeBlue(shape); addTexture(shape); break;
//       default: break;   // say nothing
//     }
  }  // end of adjustShape3D()


  private void makeBlue(Shape3D shape)
  // change the shape's colour to blue
  {
    Appearance app = new Appearance();
    //Material blueMat = new Material(black, black, blue, white, 20.0f);
        // the black ambient means that unlit surfaces are pitch black
    //blueMat.setLightingEnable(true);
    //app.setMaterial( blueMat );
    ColoringAttributes ca = new ColoringAttributes(new Color3f(0f, 0.2f, 0.7f), 1);
    app.setColoringAttributes(ca);
    shape.setAppearance(app);
  }  // end of makeBlue()
    
    
    public TransformGroup getModel() { return tg; }
  
} // end of class

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				259311296
			</iTime>
			<fName>
				MyOwn3D.java
			</fName>
			<fSize>
				8757.0
			</fSize>
			<fData>
/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor with grid lines
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 2.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.applet.Applet;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;

public class MyOwn3D extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere();   // for environment nodes
    private SimpleUniverse su;
    
    // constructor
    public MyOwn3D() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
        BranchGroup scene = createSceneGraph();
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor

    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();  // root of visual objects in scene graph
        
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);  // solid color blue for coloring sides and floor
        
        // create the sides and floor
        TransformGroup floor = makeFace("floor", blue);
        TransformGroup back = makeFace("back", blue);
        TransformGroup front = makeFace("front", blue);
        TransformGroup left = makeFace("left", blue);
        TransformGroup right = makeFace("right", blue);
        // TransformGroup ceiling = makeFace("ceiling", new Color3f(1.0f, 1.0f, 1.0f));  // white
        
        // create lines to divide surfaces into 3x3 grids
        Shape3D grid = makeGrid();
        
        // add children to root branch graph
        objRoot.addChild(floor);
        objRoot.addChild(back);
        objRoot.addChild(left);
        objRoot.addChild(right);
        objRoot.addChild(front);
        // objRoot.addChild(ceiling);
        objRoot.addChild(grid);
        
//         LoadModel lm = new LoadModel();
//         objRoot.addChild(lm.getModel());
        LoadModelFixed lmf = new LoadModelFixed();
        objRoot.addChild(lmf.getModel());
        
        return objRoot;
    } // end of method

    // method to create sides and floor of a room
    private TransformGroup makeFace(String face, Color3f faceColor) {
        
        // create standard QuadArray with coordinates for basic surface
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-15f, 0f, 15f));
        qa.setCoordinate(1, new Point3f(15f, 0f, 15f));
        qa.setCoordinate(2, new Point3f(15f, 0f, -15f));
        qa.setCoordinate(3, new Point3f(-15f, 0f, -15f));
        
        // set color for created quad
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        // create ability to transform and translate surface to correct position
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        // create surface based on input paramaters
        // surfaces are off by a factor of 0.005 to allow grid lines to be more visible
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15.005f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.rotX(Math.PI);
                t3d.setTranslation(new Vector3f(0f, 15.005f, 0f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "left": t3d.rotZ(-Math.PI/2);
                t3d.setTranslation(new Vector3f(-15.005f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "right": t3d.rotZ(Math.PI/2);
                t3d.setTranslation(new Vector3f(15.005f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.rotX(-Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, 15.005f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.rotX(Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, -15.005f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
        return tg;
    } // end of makeFace method
    
    // makes lines to divide constructed area into 3x3 grid for each side
    private Shape3D makeGrid() {
        
        // set up initial coordinates for z plane grid lines
        Point3f[] gridCoords = new Point3f[47];
        gridCoords[0] = new Point3f(-15f, 15f, 15f);
        gridCoords[1] = new Point3f(-15f, -15f, 15f);
        gridCoords[2] = new Point3f(15f, -15f, 15f);
        gridCoords[3] = new Point3f(15f, 15f, 15f);
        
        // create remaining grid lines through z plane
        Point3f adjust = new Point3f(0, 0, -10);
        for (int i = 4; i < 16; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        // set up initial coordinates for x plane grid lines
        gridCoords[16] = new Point3f(gridCoords[3]);
        gridCoords[17] = new Point3f(gridCoords[2]);
        gridCoords[18] = new Point3f(gridCoords[14]);
        gridCoords[19] = new Point3f(gridCoords[15]);
        
        // create remaining grid lines through x plane
        adjust = new Point3f(-10, 0, 0);
        for (int i = 20; i < 32; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        // set up initial coordinates for y plane grid lines
        gridCoords[32] = new Point3f(gridCoords[0]);
        gridCoords[33] = new Point3f(gridCoords[3]);
        gridCoords[34] = new Point3f(gridCoords[15]);
        gridCoords[35] = new Point3f(gridCoords[12]);
        gridCoords[36] = new Point3f(gridCoords[0]);
        
        // create remaining grid lines through y plane
        adjust = new Point3f(0, -10, 0);
        for (int i = 37; i < 47; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 5]);
            gridCoords[i].add(adjust);
        }
        
        // create array for vertex counts in LineStripArray
        int[] lineCounts = new int[11];
        for (int i = 0; i < lineCounts.length; i++) {
            if (i < 8) {lineCounts[i] = 4;}
            else {lineCounts[i] = 5;}
        }
        
        // create LineStripArray object to create lines
        LineStripArray grid = new LineStripArray(47, LineStripArray.COORDINATES, lineCounts);
        for (int i = 0; i < gridCoords.length; i++) {
            grid.setCoordinate(i, gridCoords[i]);
        }
        
        return new Shape3D(grid);
    } // end of makeGrid method
    
    private void orbitControls(Canvas3D c)
    /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
    {
        OrbitBehavior orbit = 
            new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
        orbit.setSchedulingBounds(bounds);

        ViewingPlatform vp = su.getViewingPlatform();
        vp.setViewPlatformBehavior(orbit);      
    } // end of orbitControls()

    private void initUserPosition()
    // Set the user's initial viewpoint using lookAt()
    {
        ViewingPlatform vp = su.getViewingPlatform();
        TransformGroup steerTG = vp.getViewPlatformTransform();

        Transform3D t3d = new Transform3D();
        steerTG.getTransform(t3d);

        // args are: viewer posn, where looking, up direction
        t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
        t3d.invert();

        steerTG.setTransform(t3d);
    } // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3D(), 256, 256);
    } // end of main
} // end of class

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				259549453
			</iTime>
			<fName>
				MyOwn3D.java
			</fName>
			<fSize>
				8757.0
			</fSize>
			<fData>
/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor with grid lines
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 2.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.applet.Applet;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;

public class MyOwn3D extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere();   // for environment nodes
    private SimpleUniverse su;
    
    // constructor
    public MyOwn3D() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
        BranchGroup scene = createSceneGraph();
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor

    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();  // root of visual objects in scene graph
        
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);  // solid color blue for coloring sides and floor
        
        // create the sides and floor
        TransformGroup floor = makeFace("floor", blue);
        TransformGroup back = makeFace("back", blue);
        TransformGroup front = makeFace("front", blue);
        TransformGroup left = makeFace("left", blue);
        TransformGroup right = makeFace("right", blue);
        // TransformGroup ceiling = makeFace("ceiling", new Color3f(1.0f, 1.0f, 1.0f));  // white
        
        // create lines to divide surfaces into 3x3 grids
        Shape3D grid = makeGrid();
        
        // add children to root branch graph
        objRoot.addChild(floor);
        objRoot.addChild(back);
        objRoot.addChild(left);
        objRoot.addChild(right);
        objRoot.addChild(front);
        // objRoot.addChild(ceiling);
        objRoot.addChild(grid);
        
//         LoadModel lm = new LoadModel();
//         objRoot.addChild(lm.getModel());
        LoadModelFixed lmf = new LoadModelFixed();
        objRoot.addChild(lmf.getModel());
        
        return objRoot;
    } // end of method

    // method to create sides and floor of a room
    private TransformGroup makeFace(String face, Color3f faceColor) {
        
        // create standard QuadArray with coordinates for basic surface
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-15f, 0f, 15f));
        qa.setCoordinate(1, new Point3f(15f, 0f, 15f));
        qa.setCoordinate(2, new Point3f(15f, 0f, -15f));
        qa.setCoordinate(3, new Point3f(-15f, 0f, -15f));
        
        // set color for created quad
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        // create ability to transform and translate surface to correct position
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        // create surface based on input paramaters
        // surfaces are off by a factor of 0.005 to allow grid lines to be more visible
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15.005f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.rotX(Math.PI);
                t3d.setTranslation(new Vector3f(0f, 15.005f, 0f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "left": t3d.rotZ(-Math.PI/2);
                t3d.setTranslation(new Vector3f(-15.005f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "right": t3d.rotZ(Math.PI/2);
                t3d.setTranslation(new Vector3f(15.005f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.rotX(-Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, 15.005f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.rotX(Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, -15.005f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
        return tg;
    } // end of makeFace method
    
    // makes lines to divide constructed area into 3x3 grid for each side
    private Shape3D makeGrid() {
        
        // set up initial coordinates for z plane grid lines
        Point3f[] gridCoords = new Point3f[47];
        gridCoords[0] = new Point3f(-15f, 15f, 15f);
        gridCoords[1] = new Point3f(-15f, -15f, 15f);
        gridCoords[2] = new Point3f(15f, -15f, 15f);
        gridCoords[3] = new Point3f(15f, 15f, 15f);
        
        // create remaining grid lines through z plane
        Point3f adjust = new Point3f(0, 0, -10);
        for (int i = 4; i < 16; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        // set up initial coordinates for x plane grid lines
        gridCoords[16] = new Point3f(gridCoords[3]);
        gridCoords[17] = new Point3f(gridCoords[2]);
        gridCoords[18] = new Point3f(gridCoords[14]);
        gridCoords[19] = new Point3f(gridCoords[15]);
        
        // create remaining grid lines through x plane
        adjust = new Point3f(-10, 0, 0);
        for (int i = 20; i < 32; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        // set up initial coordinates for y plane grid lines
        gridCoords[32] = new Point3f(gridCoords[0]);
        gridCoords[33] = new Point3f(gridCoords[3]);
        gridCoords[34] = new Point3f(gridCoords[15]);
        gridCoords[35] = new Point3f(gridCoords[12]);
        gridCoords[36] = new Point3f(gridCoords[0]);
        
        // create remaining grid lines through y plane
        adjust = new Point3f(0, -10, 0);
        for (int i = 37; i < 47; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 5]);
            gridCoords[i].add(adjust);
        }
        
        // create array for vertex counts in LineStripArray
        int[] lineCounts = new int[11];
        for (int i = 0; i < lineCounts.length; i++) {
            if (i < 8) {lineCounts[i] = 4;}
            else {lineCounts[i] = 5;}
        }
        
        // create LineStripArray object to create lines
        LineStripArray grid = new LineStripArray(47, LineStripArray.COORDINATES, lineCounts);
        for (int i = 0; i < gridCoords.length; i++) {
            grid.setCoordinate(i, gridCoords[i]);
        }
        
        return new Shape3D(grid);
    } // end of makeGrid method
    
    private void orbitControls(Canvas3D c)
    /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
    {
        OrbitBehavior orbit = 
            new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
        orbit.setSchedulingBounds(bounds);

        ViewingPlatform vp = su.getViewingPlatform();
        vp.setViewPlatformBehavior(orbit);      
    } // end of orbitControls()

    private void initUserPosition()
    // Set the user's initial viewpoint using lookAt()
    {
        ViewingPlatform vp = su.getViewingPlatform();
        TransformGroup steerTG = vp.getViewPlatformTransform();

        Transform3D t3d = new Transform3D();
        steerTG.getTransform(t3d);

        // args are: viewer posn, where looking, up direction
        t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
        t3d.invert();

        steerTG.setTransform(t3d);
    } // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3D(), 256, 256);
    } // end of main
} // end of class

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				259793046
			</iTime>
			<fName>
				LoadModelFixed.java
			</fName>
			<fSize>
				5006.0
			</fSize>
			<fData>
/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor with grid lines
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 2.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import ncsa.j3d.loaders.*;
import com.sun.j3d.loaders.Scene;
import java.io.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import java.util.*;

public class LoadModelFixed {
    private Scene loadedScene = null;
    private BranchGroup loadedBG = null;
    private TransformGroup tg = null;
    
    private static final Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
  private static final Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
  private static final Color3f blue = new Color3f(0.6f,0.6f, 1.0f);
    
    LoadModelFixed() {
        // FileWriter ofw = null;
        
        try {
            ModelLoader loader = new ModelLoader();
            loadedScene = loader.load("GUN1.3DS");
            if(loadedScene != null) {
                loadedBG = loadedScene.getSceneGroup();
            }
        }
        catch( IOException ioe )
        { System.err.println("Could not find file."); }
        
        visitNode(loadedBG);
        
        Transform3D t3d = new Transform3D();
        t3d.rotX( -Math.PI/2.0 );    // models are often on their face; fix that
        Vector3d scaleVec = calcScaleFactor(loadedBG);   // scale the model
        t3d.setScale( scaleVec );
        tg = new TransformGroup(t3d);
        tg.addChild(loadedBG);
        
    }
    
    private Vector3d calcScaleFactor(BranchGroup loadedBG)
        // Scale the model based on its original bounding box size
    {
        BoundingBox boundbox = new BoundingBox( loadedBG.getBounds() );
        // System.out.println(boundbox);

        // obtain the upper and lower coordinates of the box
        Point3d lower = new Point3d();
        boundbox.getLower( lower );
        Point3d upper = new Point3d();
        boundbox.getUpper( upper );

        // store the largest X, Y, or Z dimension and calculate a scale factor
        double max = 0.0;     
        if( (upper.x - lower.x ) > max ) { max = (upper.x - lower.x ); }

        if( (upper.y - lower.y ) > max ) { max = (upper.y - lower.y ); }

        if( (upper.z - lower.z ) > max ) { max = (upper.z - lower.z ); }

        double scaleFactor = 10.0/max;    // 10 is half the width of the floor
        //System.out.println("max dimension: " + df.format(max) + 
        //                 "; scaleFactor: " + df.format(scaleFactor) );

        // limit the scaling so that a big model isn't scaled too much
        if( scaleFactor < 0.0005 )
            scaleFactor = 0.0005;

        return new Vector3d(scaleFactor, scaleFactor, scaleFactor);
    }   // end of calcScaleFactor()

    private void visitNode(Node node)
  /*  If the node is a Group then recursively visit its children.
      Otherwise if the node is a Shape3D then so the changes.
  */
  { if(node instanceof Group) {
      Group g = (Group) node;
      Enumeration enumKids = g.getAllChildren();
      while(enumKids.hasMoreElements()) {    // visit children
        SceneGraphObject obj = (SceneGraphObject) enumKids.nextElement();
        if (obj instanceof Node)
          visitNode((Node) obj);
      }
    }
    else if (node instanceof Shape3D)
      adjustShape3D((Shape3D) node);
  }  // end of visitNode()



  private void adjustShape3D(Shape3D shape)
  /* Shape adjusting examples:
        * change the colour of a shape to blue
        * draw the shape in outline (i.e. as a wireframe)
        * make the shape transparent
        * add a texture to the shape (this can be combined with the
          colour changing method)
     The choice of which one depends on adaptNo: 0-3, and
     4 does makeBlue() and addTexture()
  */
  { //switch(adaptNo) {
      makeBlue(shape); 
//       case 1: drawOutline(shape); break;
//       case 2: makeAlmostTransparent(shape); break;
//       case 3: addTexture(shape); break;
//       case 4: makeBlue(shape); addTexture(shape); break;
//       default: break;   // say nothing
//     }
  }  // end of adjustShape3D()


  private void makeBlue(Shape3D shape)
  // change the shape's colour to blue
  {
    Appearance app = shape.getAppearance();
    // black black blue white
Material blueMat = new Material(new Color3f(0.97f, 0.6f, 0.98f), new Color3f(0.97f, 0.6f, 0.98f), new Color3f(0.97f, 0.6f, 0.98f), new Color3f(0.97f, 0.6f, 0.98f), 20.0f);
        // the black ambient means that unlit surfaces are pitch black
// blueMat.setLightingEnable(true);
app.setMaterial( blueMat );
//     ColoringAttributes ca = new ColoringAttributes(new Color3f(0.97f, 0.6f, 0.98f), 1);
//     app.setColoringAttributes(ca);
    shape.setAppearance(app);
  }  // end of makeBlue()
    
    
    public TransformGroup getModel() { return tg; }
  
} // end of class

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				259798046
			</iTime>
			<fName>
				MyOwn3D.java
			</fName>
			<fSize>
				8757.0
			</fSize>
			<fData>
/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor with grid lines
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 2.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.applet.Applet;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;

public class MyOwn3D extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere();   // for environment nodes
    private SimpleUniverse su;
    
    // constructor
    public MyOwn3D() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
        BranchGroup scene = createSceneGraph();
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor

    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();  // root of visual objects in scene graph
        
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);  // solid color blue for coloring sides and floor
        
        // create the sides and floor
        TransformGroup floor = makeFace("floor", blue);
        TransformGroup back = makeFace("back", blue);
        TransformGroup front = makeFace("front", blue);
        TransformGroup left = makeFace("left", blue);
        TransformGroup right = makeFace("right", blue);
        // TransformGroup ceiling = makeFace("ceiling", new Color3f(1.0f, 1.0f, 1.0f));  // white
        
        // create lines to divide surfaces into 3x3 grids
        Shape3D grid = makeGrid();
        
        // add children to root branch graph
        objRoot.addChild(floor);
        objRoot.addChild(back);
        objRoot.addChild(left);
        objRoot.addChild(right);
        objRoot.addChild(front);
        // objRoot.addChild(ceiling);
        objRoot.addChild(grid);
        
//         LoadModel lm = new LoadModel();
//         objRoot.addChild(lm.getModel());
        LoadModelFixed lmf = new LoadModelFixed();
        objRoot.addChild(lmf.getModel());
        
        return objRoot;
    } // end of method

    // method to create sides and floor of a room
    private TransformGroup makeFace(String face, Color3f faceColor) {
        
        // create standard QuadArray with coordinates for basic surface
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-15f, 0f, 15f));
        qa.setCoordinate(1, new Point3f(15f, 0f, 15f));
        qa.setCoordinate(2, new Point3f(15f, 0f, -15f));
        qa.setCoordinate(3, new Point3f(-15f, 0f, -15f));
        
        // set color for created quad
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        // create ability to transform and translate surface to correct position
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        // create surface based on input paramaters
        // surfaces are off by a factor of 0.005 to allow grid lines to be more visible
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15.005f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.rotX(Math.PI);
                t3d.setTranslation(new Vector3f(0f, 15.005f, 0f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "left": t3d.rotZ(-Math.PI/2);
                t3d.setTranslation(new Vector3f(-15.005f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "right": t3d.rotZ(Math.PI/2);
                t3d.setTranslation(new Vector3f(15.005f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.rotX(-Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, 15.005f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.rotX(Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, -15.005f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
        return tg;
    } // end of makeFace method
    
    // makes lines to divide constructed area into 3x3 grid for each side
    private Shape3D makeGrid() {
        
        // set up initial coordinates for z plane grid lines
        Point3f[] gridCoords = new Point3f[47];
        gridCoords[0] = new Point3f(-15f, 15f, 15f);
        gridCoords[1] = new Point3f(-15f, -15f, 15f);
        gridCoords[2] = new Point3f(15f, -15f, 15f);
        gridCoords[3] = new Point3f(15f, 15f, 15f);
        
        // create remaining grid lines through z plane
        Point3f adjust = new Point3f(0, 0, -10);
        for (int i = 4; i < 16; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        // set up initial coordinates for x plane grid lines
        gridCoords[16] = new Point3f(gridCoords[3]);
        gridCoords[17] = new Point3f(gridCoords[2]);
        gridCoords[18] = new Point3f(gridCoords[14]);
        gridCoords[19] = new Point3f(gridCoords[15]);
        
        // create remaining grid lines through x plane
        adjust = new Point3f(-10, 0, 0);
        for (int i = 20; i < 32; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        // set up initial coordinates for y plane grid lines
        gridCoords[32] = new Point3f(gridCoords[0]);
        gridCoords[33] = new Point3f(gridCoords[3]);
        gridCoords[34] = new Point3f(gridCoords[15]);
        gridCoords[35] = new Point3f(gridCoords[12]);
        gridCoords[36] = new Point3f(gridCoords[0]);
        
        // create remaining grid lines through y plane
        adjust = new Point3f(0, -10, 0);
        for (int i = 37; i < 47; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 5]);
            gridCoords[i].add(adjust);
        }
        
        // create array for vertex counts in LineStripArray
        int[] lineCounts = new int[11];
        for (int i = 0; i < lineCounts.length; i++) {
            if (i < 8) {lineCounts[i] = 4;}
            else {lineCounts[i] = 5;}
        }
        
        // create LineStripArray object to create lines
        LineStripArray grid = new LineStripArray(47, LineStripArray.COORDINATES, lineCounts);
        for (int i = 0; i < gridCoords.length; i++) {
            grid.setCoordinate(i, gridCoords[i]);
        }
        
        return new Shape3D(grid);
    } // end of makeGrid method
    
    private void orbitControls(Canvas3D c)
    /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
    {
        OrbitBehavior orbit = 
            new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
        orbit.setSchedulingBounds(bounds);

        ViewingPlatform vp = su.getViewingPlatform();
        vp.setViewPlatformBehavior(orbit);      
    } // end of orbitControls()

    private void initUserPosition()
    // Set the user's initial viewpoint using lookAt()
    {
        ViewingPlatform vp = su.getViewingPlatform();
        TransformGroup steerTG = vp.getViewPlatformTransform();

        Transform3D t3d = new Transform3D();
        steerTG.getTransform(t3d);

        // args are: viewer posn, where looking, up direction
        t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
        t3d.invert();

        steerTG.setTransform(t3d);
    } // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3D(), 256, 256);
    } // end of main
} // end of class

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				259952531
			</iTime>
			<fName>
				LoadModelFixed.java
			</fName>
			<fSize>
				4971.0
			</fSize>
			<fData>
/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor with grid lines
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 2.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import ncsa.j3d.loaders.*;
import com.sun.j3d.loaders.Scene;
import java.io.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import java.util.*;

public class LoadModelFixed {
    private Scene loadedScene = null;
    private BranchGroup loadedBG = null;
    private TransformGroup tg = null;
    
    private static final Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
  private static final Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
  private static final Color3f blue = new Color3f(0.6f,0.6f, 1.0f);
  private static final Color3f pink = new Color3f(0.97f, 0.6f, 0.98f);
    
    LoadModelFixed() {
        // FileWriter ofw = null;
        
        try {
            ModelLoader loader = new ModelLoader();
            loadedScene = loader.load("GUN1.3DS");
            if(loadedScene != null) {
                loadedBG = loadedScene.getSceneGroup();
            }
        }
        catch( IOException ioe )
        { System.err.println("Could not find file."); }
        
        visitNode(loadedBG);
        
        Transform3D t3d = new Transform3D();
        t3d.rotX( -Math.PI/2.0 );    // models are often on their face; fix that
        Vector3d scaleVec = calcScaleFactor(loadedBG);   // scale the model
        t3d.setScale( scaleVec );
        tg = new TransformGroup(t3d);
        tg.addChild(loadedBG);
        
    }
    
    private Vector3d calcScaleFactor(BranchGroup loadedBG)
        // Scale the model based on its original bounding box size
    {
        BoundingBox boundbox = new BoundingBox( loadedBG.getBounds() );
        // System.out.println(boundbox);

        // obtain the upper and lower coordinates of the box
        Point3d lower = new Point3d();
        boundbox.getLower( lower );
        Point3d upper = new Point3d();
        boundbox.getUpper( upper );

        // store the largest X, Y, or Z dimension and calculate a scale factor
        double max = 0.0;     
        if( (upper.x - lower.x ) > max ) { max = (upper.x - lower.x ); }

        if( (upper.y - lower.y ) > max ) { max = (upper.y - lower.y ); }

        if( (upper.z - lower.z ) > max ) { max = (upper.z - lower.z ); }

        double scaleFactor = 10.0/max;    // 10 is half the width of the floor
        //System.out.println("max dimension: " + df.format(max) + 
        //                 "; scaleFactor: " + df.format(scaleFactor) );

        // limit the scaling so that a big model isn't scaled too much
        if( scaleFactor < 0.0005 )
            scaleFactor = 0.0005;

        return new Vector3d(scaleFactor, scaleFactor, scaleFactor);
    }   // end of calcScaleFactor()

    private void visitNode(Node node)
  /*  If the node is a Group then recursively visit its children.
      Otherwise if the node is a Shape3D then so the changes.
  */
  { if(node instanceof Group) {
      Group g = (Group) node;
      Enumeration enumKids = g.getAllChildren();
      while(enumKids.hasMoreElements()) {    // visit children
        SceneGraphObject obj = (SceneGraphObject) enumKids.nextElement();
        if (obj instanceof Node)
          visitNode((Node) obj);
      }
    }
    else if (node instanceof Shape3D)
      adjustShape3D((Shape3D) node);
  }  // end of visitNode()



  private void adjustShape3D(Shape3D shape)
  /* Shape adjusting examples:
        * change the colour of a shape to blue
        * draw the shape in outline (i.e. as a wireframe)
        * make the shape transparent
        * add a texture to the shape (this can be combined with the
          colour changing method)
     The choice of which one depends on adaptNo: 0-3, and
     4 does makeBlue() and addTexture()
  */
  { //switch(adaptNo) {
      makeBlue(shape); 
//       case 1: drawOutline(shape); break;
//       case 2: makeAlmostTransparent(shape); break;
//       case 3: addTexture(shape); break;
//       case 4: makeBlue(shape); addTexture(shape); break;
//       default: break;   // say nothing
//     }
  }  // end of adjustShape3D()


  private void makeBlue(Shape3D shape)
  // change the shape's colour to blue
  {
    Appearance app = shape.getAppearance();
    // black black blue white
Material blueMat = new Material(pink, black, pink, white, 20.0f);
        // the black ambient means that unlit surfaces are pitch black
// blueMat.setLightingEnable(true);
app.setMaterial( blueMat );
//     ColoringAttributes ca = new ColoringAttributes(new Color3f(0.97f, 0.6f, 0.98f), 1);
//     app.setColoringAttributes(ca);
    shape.setAppearance(app);
  }  // end of makeBlue()
    
    
    public TransformGroup getModel() { return tg; }
  
} // end of class

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				259956515
			</iTime>
			<fName>
				MyOwn3D.java
			</fName>
			<fSize>
				8757.0
			</fSize>
			<fData>
/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor with grid lines
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 2.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.applet.Applet;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;

public class MyOwn3D extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere();   // for environment nodes
    private SimpleUniverse su;
    
    // constructor
    public MyOwn3D() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
        BranchGroup scene = createSceneGraph();
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor

    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();  // root of visual objects in scene graph
        
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);  // solid color blue for coloring sides and floor
        
        // create the sides and floor
        TransformGroup floor = makeFace("floor", blue);
        TransformGroup back = makeFace("back", blue);
        TransformGroup front = makeFace("front", blue);
        TransformGroup left = makeFace("left", blue);
        TransformGroup right = makeFace("right", blue);
        // TransformGroup ceiling = makeFace("ceiling", new Color3f(1.0f, 1.0f, 1.0f));  // white
        
        // create lines to divide surfaces into 3x3 grids
        Shape3D grid = makeGrid();
        
        // add children to root branch graph
        objRoot.addChild(floor);
        objRoot.addChild(back);
        objRoot.addChild(left);
        objRoot.addChild(right);
        objRoot.addChild(front);
        // objRoot.addChild(ceiling);
        objRoot.addChild(grid);
        
//         LoadModel lm = new LoadModel();
//         objRoot.addChild(lm.getModel());
        LoadModelFixed lmf = new LoadModelFixed();
        objRoot.addChild(lmf.getModel());
        
        return objRoot;
    } // end of method

    // method to create sides and floor of a room
    private TransformGroup makeFace(String face, Color3f faceColor) {
        
        // create standard QuadArray with coordinates for basic surface
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-15f, 0f, 15f));
        qa.setCoordinate(1, new Point3f(15f, 0f, 15f));
        qa.setCoordinate(2, new Point3f(15f, 0f, -15f));
        qa.setCoordinate(3, new Point3f(-15f, 0f, -15f));
        
        // set color for created quad
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        // create ability to transform and translate surface to correct position
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        // create surface based on input paramaters
        // surfaces are off by a factor of 0.005 to allow grid lines to be more visible
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15.005f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.rotX(Math.PI);
                t3d.setTranslation(new Vector3f(0f, 15.005f, 0f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "left": t3d.rotZ(-Math.PI/2);
                t3d.setTranslation(new Vector3f(-15.005f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "right": t3d.rotZ(Math.PI/2);
                t3d.setTranslation(new Vector3f(15.005f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.rotX(-Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, 15.005f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.rotX(Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, -15.005f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
        return tg;
    } // end of makeFace method
    
    // makes lines to divide constructed area into 3x3 grid for each side
    private Shape3D makeGrid() {
        
        // set up initial coordinates for z plane grid lines
        Point3f[] gridCoords = new Point3f[47];
        gridCoords[0] = new Point3f(-15f, 15f, 15f);
        gridCoords[1] = new Point3f(-15f, -15f, 15f);
        gridCoords[2] = new Point3f(15f, -15f, 15f);
        gridCoords[3] = new Point3f(15f, 15f, 15f);
        
        // create remaining grid lines through z plane
        Point3f adjust = new Point3f(0, 0, -10);
        for (int i = 4; i < 16; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        // set up initial coordinates for x plane grid lines
        gridCoords[16] = new Point3f(gridCoords[3]);
        gridCoords[17] = new Point3f(gridCoords[2]);
        gridCoords[18] = new Point3f(gridCoords[14]);
        gridCoords[19] = new Point3f(gridCoords[15]);
        
        // create remaining grid lines through x plane
        adjust = new Point3f(-10, 0, 0);
        for (int i = 20; i < 32; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        // set up initial coordinates for y plane grid lines
        gridCoords[32] = new Point3f(gridCoords[0]);
        gridCoords[33] = new Point3f(gridCoords[3]);
        gridCoords[34] = new Point3f(gridCoords[15]);
        gridCoords[35] = new Point3f(gridCoords[12]);
        gridCoords[36] = new Point3f(gridCoords[0]);
        
        // create remaining grid lines through y plane
        adjust = new Point3f(0, -10, 0);
        for (int i = 37; i < 47; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 5]);
            gridCoords[i].add(adjust);
        }
        
        // create array for vertex counts in LineStripArray
        int[] lineCounts = new int[11];
        for (int i = 0; i < lineCounts.length; i++) {
            if (i < 8) {lineCounts[i] = 4;}
            else {lineCounts[i] = 5;}
        }
        
        // create LineStripArray object to create lines
        LineStripArray grid = new LineStripArray(47, LineStripArray.COORDINATES, lineCounts);
        for (int i = 0; i < gridCoords.length; i++) {
            grid.setCoordinate(i, gridCoords[i]);
        }
        
        return new Shape3D(grid);
    } // end of makeGrid method
    
    private void orbitControls(Canvas3D c)
    /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
    {
        OrbitBehavior orbit = 
            new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
        orbit.setSchedulingBounds(bounds);

        ViewingPlatform vp = su.getViewingPlatform();
        vp.setViewPlatformBehavior(orbit);      
    } // end of orbitControls()

    private void initUserPosition()
    // Set the user's initial viewpoint using lookAt()
    {
        ViewingPlatform vp = su.getViewingPlatform();
        TransformGroup steerTG = vp.getViewPlatformTransform();

        Transform3D t3d = new Transform3D();
        steerTG.getTransform(t3d);

        // args are: viewer posn, where looking, up direction
        t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
        t3d.invert();

        steerTG.setTransform(t3d);
    } // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3D(), 256, 256);
    } // end of main
} // end of class

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				259979968
			</iTime>
			<fName>
				LoadModelFixed.java
			</fName>
			<fSize>
				4971.0
			</fSize>
			<fData>
/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor with grid lines
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 2.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import ncsa.j3d.loaders.*;
import com.sun.j3d.loaders.Scene;
import java.io.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import java.util.*;

public class LoadModelFixed {
    private Scene loadedScene = null;
    private BranchGroup loadedBG = null;
    private TransformGroup tg = null;
    
    private static final Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
  private static final Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
  private static final Color3f blue = new Color3f(0.6f,0.6f, 1.0f);
  private static final Color3f pink = new Color3f(0.97f, 0.6f, 0.98f);
    
    LoadModelFixed() {
        // FileWriter ofw = null;
        
        try {
            ModelLoader loader = new ModelLoader();
            loadedScene = loader.load("GUN1.3DS");
            if(loadedScene != null) {
                loadedBG = loadedScene.getSceneGroup();
            }
        }
        catch( IOException ioe )
        { System.err.println("Could not find file."); }
        
        visitNode(loadedBG);
        
        Transform3D t3d = new Transform3D();
        t3d.rotX( -Math.PI/2.0 );    // models are often on their face; fix that
        Vector3d scaleVec = calcScaleFactor(loadedBG);   // scale the model
        t3d.setScale( scaleVec );
        tg = new TransformGroup(t3d);
        tg.addChild(loadedBG);
        
    }
    
    private Vector3d calcScaleFactor(BranchGroup loadedBG)
        // Scale the model based on its original bounding box size
    {
        BoundingBox boundbox = new BoundingBox( loadedBG.getBounds() );
        // System.out.println(boundbox);

        // obtain the upper and lower coordinates of the box
        Point3d lower = new Point3d();
        boundbox.getLower( lower );
        Point3d upper = new Point3d();
        boundbox.getUpper( upper );

        // store the largest X, Y, or Z dimension and calculate a scale factor
        double max = 0.0;     
        if( (upper.x - lower.x ) > max ) { max = (upper.x - lower.x ); }

        if( (upper.y - lower.y ) > max ) { max = (upper.y - lower.y ); }

        if( (upper.z - lower.z ) > max ) { max = (upper.z - lower.z ); }

        double scaleFactor = 10.0/max;    // 10 is half the width of the floor
        //System.out.println("max dimension: " + df.format(max) + 
        //                 "; scaleFactor: " + df.format(scaleFactor) );

        // limit the scaling so that a big model isn't scaled too much
        if( scaleFactor < 0.0005 )
            scaleFactor = 0.0005;

        return new Vector3d(scaleFactor, scaleFactor, scaleFactor);
    }   // end of calcScaleFactor()

    private void visitNode(Node node)
  /*  If the node is a Group then recursively visit its children.
      Otherwise if the node is a Shape3D then so the changes.
  */
  { if(node instanceof Group) {
      Group g = (Group) node;
      Enumeration enumKids = g.getAllChildren();
      while(enumKids.hasMoreElements()) {    // visit children
        SceneGraphObject obj = (SceneGraphObject) enumKids.nextElement();
        if (obj instanceof Node)
          visitNode((Node) obj);
      }
    }
    else if (node instanceof Shape3D)
      adjustShape3D((Shape3D) node);
  }  // end of visitNode()



  private void adjustShape3D(Shape3D shape)
  /* Shape adjusting examples:
        * change the colour of a shape to blue
        * draw the shape in outline (i.e. as a wireframe)
        * make the shape transparent
        * add a texture to the shape (this can be combined with the
          colour changing method)
     The choice of which one depends on adaptNo: 0-3, and
     4 does makeBlue() and addTexture()
  */
  { //switch(adaptNo) {
      makeBlue(shape); 
//       case 1: drawOutline(shape); break;
//       case 2: makeAlmostTransparent(shape); break;
//       case 3: addTexture(shape); break;
//       case 4: makeBlue(shape); addTexture(shape); break;
//       default: break;   // say nothing
//     }
  }  // end of adjustShape3D()


  private void makeBlue(Shape3D shape)
  // change the shape's colour to blue
  {
    Appearance app = shape.getAppearance();
    // black black blue white
Material blueMat = new Material(black, pink, pink, white, 20.0f);
        // the black ambient means that unlit surfaces are pitch black
// blueMat.setLightingEnable(true);
app.setMaterial( blueMat );
//     ColoringAttributes ca = new ColoringAttributes(new Color3f(0.97f, 0.6f, 0.98f), 1);
//     app.setColoringAttributes(ca);
    shape.setAppearance(app);
  }  // end of makeBlue()
    
    
    public TransformGroup getModel() { return tg; }
  
} // end of class

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				259983250
			</iTime>
			<fName>
				LoadModelFixed.java
			</fName>
			<fSize>
				4971.0
			</fSize>
			<fData>
/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor with grid lines
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 2.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import ncsa.j3d.loaders.*;
import com.sun.j3d.loaders.Scene;
import java.io.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import java.util.*;

public class LoadModelFixed {
    private Scene loadedScene = null;
    private BranchGroup loadedBG = null;
    private TransformGroup tg = null;
    
    private static final Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
  private static final Color3f black = new Color3f(0.0f, 0.0f, 0.0f);
  private static final Color3f blue = new Color3f(0.6f,0.6f, 1.0f);
  private static final Color3f pink = new Color3f(0.97f, 0.6f, 0.98f);
    
    LoadModelFixed() {
        // FileWriter ofw = null;
        
        try {
            ModelLoader loader = new ModelLoader();
            loadedScene = loader.load("GUN1.3DS");
            if(loadedScene != null) {
                loadedBG = loadedScene.getSceneGroup();
            }
        }
        catch( IOException ioe )
        { System.err.println("Could not find file."); }
        
        visitNode(loadedBG);
        
        Transform3D t3d = new Transform3D();
        t3d.rotX( -Math.PI/2.0 );    // models are often on their face; fix that
        Vector3d scaleVec = calcScaleFactor(loadedBG);   // scale the model
        t3d.setScale( scaleVec );
        tg = new TransformGroup(t3d);
        tg.addChild(loadedBG);
        
    }
    
    private Vector3d calcScaleFactor(BranchGroup loadedBG)
        // Scale the model based on its original bounding box size
    {
        BoundingBox boundbox = new BoundingBox( loadedBG.getBounds() );
        // System.out.println(boundbox);

        // obtain the upper and lower coordinates of the box
        Point3d lower = new Point3d();
        boundbox.getLower( lower );
        Point3d upper = new Point3d();
        boundbox.getUpper( upper );

        // store the largest X, Y, or Z dimension and calculate a scale factor
        double max = 0.0;     
        if( (upper.x - lower.x ) > max ) { max = (upper.x - lower.x ); }

        if( (upper.y - lower.y ) > max ) { max = (upper.y - lower.y ); }

        if( (upper.z - lower.z ) > max ) { max = (upper.z - lower.z ); }

        double scaleFactor = 10.0/max;    // 10 is half the width of the floor
        //System.out.println("max dimension: " + df.format(max) + 
        //                 "; scaleFactor: " + df.format(scaleFactor) );

        // limit the scaling so that a big model isn't scaled too much
        if( scaleFactor < 0.0005 )
            scaleFactor = 0.0005;

        return new Vector3d(scaleFactor, scaleFactor, scaleFactor);
    }   // end of calcScaleFactor()

    private void visitNode(Node node)
  /*  If the node is a Group then recursively visit its children.
      Otherwise if the node is a Shape3D then so the changes.
  */
  { if(node instanceof Group) {
      Group g = (Group) node;
      Enumeration enumKids = g.getAllChildren();
      while(enumKids.hasMoreElements()) {    // visit children
        SceneGraphObject obj = (SceneGraphObject) enumKids.nextElement();
        if (obj instanceof Node)
          visitNode((Node) obj);
      }
    }
    else if (node instanceof Shape3D)
      adjustShape3D((Shape3D) node);
  }  // end of visitNode()



  private void adjustShape3D(Shape3D shape)
  /* Shape adjusting examples:
        * change the colour of a shape to blue
        * draw the shape in outline (i.e. as a wireframe)
        * make the shape transparent
        * add a texture to the shape (this can be combined with the
          colour changing method)
     The choice of which one depends on adaptNo: 0-3, and
     4 does makeBlue() and addTexture()
  */
  { //switch(adaptNo) {
      makeBlue(shape); 
//       case 1: drawOutline(shape); break;
//       case 2: makeAlmostTransparent(shape); break;
//       case 3: addTexture(shape); break;
//       case 4: makeBlue(shape); addTexture(shape); break;
//       default: break;   // say nothing
//     }
  }  // end of adjustShape3D()


  private void makeBlue(Shape3D shape)
  // change the shape's colour to blue
  {
    Appearance app = shape.getAppearance();
    // black black blue white
Material blueMat = new Material(black, pink, pink, white, 20.0f);
        // the black ambient means that unlit surfaces are pitch black
// blueMat.setLightingEnable(true);
app.setMaterial( blueMat );
//     ColoringAttributes ca = new ColoringAttributes(new Color3f(0.97f, 0.6f, 0.98f), 1);
//     app.setColoringAttributes(ca);
    shape.setAppearance(app);
  }  // end of makeBlue()
    
    
    public TransformGroup getModel() { return tg; }
  
} // end of class

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
	<session_data>
		<compile_instance>
			<iTime>
				259988109
			</iTime>
			<fName>
				MyOwn3D.java
			</fName>
			<fSize>
				8757.0
			</fSize>
			<fData>
/**
*   Title: MyOwn3D.java
*   Description: A 3D environment representing a room with 4 walls and a floor with grid lines
*   Date: December 13, 2014
*   Author: Jason Bishop
*   Student #: 3042012
*   Version: 2.0
*
*
*   DOCUMENTATION
*
*   Program Purpose:
*   Notes:
*   Classes:
*   Variables:
*
*
*   TEST PLAN
*
*   Normal case:
*   Bad Data case 1 
*   Discussion:
*
*/ 

import java.applet.Applet;
import java.awt.*;
import com.sun.j3d.utils.applet.MainFrame; 
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import com.sun.j3d.utils.geometry.*;
import com.sun.j3d.utils.behaviors.vp.*;

public class MyOwn3D extends Applet {
    
    private BoundingSphere bounds  = new BoundingSphere();   // for environment nodes
    private SimpleUniverse su;
    
    // constructor
    public MyOwn3D() {
        
        setLayout(new BorderLayout());
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
        Canvas3D c3d = new Canvas3D(config);
        add("Center", c3d);
        
        BranchGroup scene = createSceneGraph();
        scene.compile();
        
        su = new SimpleUniverse(c3d);
        initUserPosition();        // set user's viewpoint
        orbitControls(c3d);   // controls for moving the viewpoint
        su.addBranchGraph(scene);
    } // end of constructor

    
    private BranchGroup createSceneGraph() {
        
        BranchGroup objRoot = new BranchGroup();  // root of visual objects in scene graph
        
        Color3f blue = new Color3f(0.0f, 0.1f, 0.4f);  // solid color blue for coloring sides and floor
        
        // create the sides and floor
        TransformGroup floor = makeFace("floor", blue);
        TransformGroup back = makeFace("back", blue);
        TransformGroup front = makeFace("front", blue);
        TransformGroup left = makeFace("left", blue);
        TransformGroup right = makeFace("right", blue);
        // TransformGroup ceiling = makeFace("ceiling", new Color3f(1.0f, 1.0f, 1.0f));  // white
        
        // create lines to divide surfaces into 3x3 grids
        Shape3D grid = makeGrid();
        
        // add children to root branch graph
        objRoot.addChild(floor);
        objRoot.addChild(back);
        objRoot.addChild(left);
        objRoot.addChild(right);
        objRoot.addChild(front);
        // objRoot.addChild(ceiling);
        objRoot.addChild(grid);
        
//         LoadModel lm = new LoadModel();
//         objRoot.addChild(lm.getModel());
        LoadModelFixed lmf = new LoadModelFixed();
        objRoot.addChild(lmf.getModel());
        
        return objRoot;
    } // end of method

    // method to create sides and floor of a room
    private TransformGroup makeFace(String face, Color3f faceColor) {
        
        // create standard QuadArray with coordinates for basic surface
        QuadArray qa = new QuadArray(4, QuadArray.COORDINATES);
        qa.setCoordinate(0, new Point3f(-15f, 0f, 15f));
        qa.setCoordinate(1, new Point3f(15f, 0f, 15f));
        qa.setCoordinate(2, new Point3f(15f, 0f, -15f));
        qa.setCoordinate(3, new Point3f(-15f, 0f, -15f));
        
        // set color for created quad
        ColoringAttributes ca = new ColoringAttributes(faceColor, 1);
        Appearance appear = new Appearance();
        appear.setColoringAttributes(ca);
        Shape3D shape = new Shape3D(qa, appear);
        
        // create ability to transform and translate surface to correct position
        TransformGroup tg = new TransformGroup();
        Transform3D t3d = new Transform3D();
        Transform3D rotate = new Transform3D();
        
        // create surface based on input paramaters
        // surfaces are off by a factor of 0.005 to allow grid lines to be more visible
        switch (face) {
            case "floor": t3d.setTranslation(new Vector3f(0f, -15.005f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "ceiling": t3d.rotX(Math.PI);
                t3d.setTranslation(new Vector3f(0f, 15.005f, 0f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "left": t3d.rotZ(-Math.PI/2);
                t3d.setTranslation(new Vector3f(-15.005f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "right": t3d.rotZ(Math.PI/2);
                t3d.setTranslation(new Vector3f(15.005f, 0f, 0f));
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "front": t3d.rotX(-Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, 15.005f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            case "back": t3d.rotX(Math.PI/2);
                t3d.setTranslation(new Vector3f(0f, 0f, -15.005f));                
                tg.setTransform(t3d);
                tg.addChild(shape);
                break;
            default: return null;
        }
        return tg;
    } // end of makeFace method
    
    // makes lines to divide constructed area into 3x3 grid for each side
    private Shape3D makeGrid() {
        
        // set up initial coordinates for z plane grid lines
        Point3f[] gridCoords = new Point3f[47];
        gridCoords[0] = new Point3f(-15f, 15f, 15f);
        gridCoords[1] = new Point3f(-15f, -15f, 15f);
        gridCoords[2] = new Point3f(15f, -15f, 15f);
        gridCoords[3] = new Point3f(15f, 15f, 15f);
        
        // create remaining grid lines through z plane
        Point3f adjust = new Point3f(0, 0, -10);
        for (int i = 4; i < 16; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        // set up initial coordinates for x plane grid lines
        gridCoords[16] = new Point3f(gridCoords[3]);
        gridCoords[17] = new Point3f(gridCoords[2]);
        gridCoords[18] = new Point3f(gridCoords[14]);
        gridCoords[19] = new Point3f(gridCoords[15]);
        
        // create remaining grid lines through x plane
        adjust = new Point3f(-10, 0, 0);
        for (int i = 20; i < 32; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 4]);
            gridCoords[i].add(adjust);
        }
        
        // set up initial coordinates for y plane grid lines
        gridCoords[32] = new Point3f(gridCoords[0]);
        gridCoords[33] = new Point3f(gridCoords[3]);
        gridCoords[34] = new Point3f(gridCoords[15]);
        gridCoords[35] = new Point3f(gridCoords[12]);
        gridCoords[36] = new Point3f(gridCoords[0]);
        
        // create remaining grid lines through y plane
        adjust = new Point3f(0, -10, 0);
        for (int i = 37; i < 47; i++) {
            gridCoords[i] = new Point3f(gridCoords[i - 5]);
            gridCoords[i].add(adjust);
        }
        
        // create array for vertex counts in LineStripArray
        int[] lineCounts = new int[11];
        for (int i = 0; i < lineCounts.length; i++) {
            if (i < 8) {lineCounts[i] = 4;}
            else {lineCounts[i] = 5;}
        }
        
        // create LineStripArray object to create lines
        LineStripArray grid = new LineStripArray(47, LineStripArray.COORDINATES, lineCounts);
        for (int i = 0; i < gridCoords.length; i++) {
            grid.setCoordinate(i, gridCoords[i]);
        }
        
        return new Shape3D(grid);
    } // end of makeGrid method
    
    private void orbitControls(Canvas3D c)
    /* OrbitBehaviour allows the user to rotate around the scene, and to
     zoom in and out.  */
    {
        OrbitBehavior orbit = 
            new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);
        orbit.setSchedulingBounds(bounds);

        ViewingPlatform vp = su.getViewingPlatform();
        vp.setViewPlatformBehavior(orbit);      
    } // end of orbitControls()

    private void initUserPosition()
    // Set the user's initial viewpoint using lookAt()
    {
        ViewingPlatform vp = su.getViewingPlatform();
        TransformGroup steerTG = vp.getViewPlatformTransform();

        Transform3D t3d = new Transform3D();
        steerTG.getTransform(t3d);

        // args are: viewer posn, where looking, up direction
        t3d.lookAt( new Point3d(0,5,20), new Point3d(0,0,0), new Vector3d(0,1,0));
        t3d.invert();

        steerTG.setTransform(t3d);
    } // end of initUserPosition()
  
    public static void main(String args[]) {
        Frame frame = new MainFrame(new MyOwn3D(), 256, 256);
    } // end of main
} // end of class

			</fData>
			<iStatus>
				SUCCESS
			<iStatus>
		</compile_instance>
	</session_data>
</mile>
